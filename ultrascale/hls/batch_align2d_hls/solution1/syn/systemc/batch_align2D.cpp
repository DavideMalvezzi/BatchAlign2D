// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "batch_align2D.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic batch_align2D::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic batch_align2D::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<39> batch_align2D::ap_ST_fsm_state1 = "1";
const sc_lv<39> batch_align2D::ap_ST_fsm_state2 = "10";
const sc_lv<39> batch_align2D::ap_ST_fsm_state3 = "100";
const sc_lv<39> batch_align2D::ap_ST_fsm_state4 = "1000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state5 = "10000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state6 = "100000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state7 = "1000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state8 = "10000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state12 = "1000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state13 = "10000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state14 = "100000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state15 = "1000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state16 = "10000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state17 = "100000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state18 = "1000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state19 = "10000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state20 = "100000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_pp1_stage0 = "1000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state25 = "10000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state26 = "100000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state27 = "1000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state28 = "10000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state29 = "100000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state30 = "1000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state31 = "10000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state32 = "100000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state33 = "1000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state34 = "10000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state35 = "100000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state36 = "1000000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state37 = "10000000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state38 = "100000000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state39 = "1000000000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state40 = "10000000000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state41 = "100000000000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state42 = "1000000000000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state43 = "10000000000000000000000000000000000000";
const sc_lv<39> batch_align2D::ap_ST_fsm_state44 = "100000000000000000000000000000000000000";
const sc_lv<32> batch_align2D::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool batch_align2D::ap_const_boolean_1 = true;
const sc_lv<32> batch_align2D::ap_const_lv32_9 = "1001";
const sc_lv<32> batch_align2D::ap_const_lv32_10 = "10000";
const sc_lv<32> batch_align2D::ap_const_lv32_18 = "11000";
const sc_lv<32> batch_align2D::ap_const_lv32_1F = "11111";
const sc_lv<32> batch_align2D::ap_const_lv32_20 = "100000";
const sc_lv<32> batch_align2D::ap_const_lv32_21 = "100001";
const sc_lv<32> batch_align2D::ap_const_lv32_26 = "100110";
const sc_lv<32> batch_align2D::ap_const_lv32_1 = "1";
const sc_lv<32> batch_align2D::ap_const_lv32_8 = "1000";
const bool batch_align2D::ap_const_boolean_0 = false;
const sc_lv<1> batch_align2D::ap_const_lv1_0 = "0";
const sc_lv<32> batch_align2D::ap_const_lv32_11 = "10001";
const sc_lv<32> batch_align2D::ap_const_lv32_17 = "10111";
const int batch_align2D::C_S_AXI_DATA_WIDTH = "100000";
const int batch_align2D::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int batch_align2D::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int batch_align2D::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int batch_align2D::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> batch_align2D::ap_const_lv32_12 = "10010";
const sc_lv<32> batch_align2D::ap_const_lv32_7 = "111";
const sc_lv<1> batch_align2D::ap_const_lv1_1 = "1";
const sc_lv<2> batch_align2D::ap_const_lv2_0 = "00";
const sc_lv<32> batch_align2D::ap_const_lv32_2 = "10";
const sc_lv<3> batch_align2D::ap_const_lv3_0 = "000";
const sc_lv<4> batch_align2D::ap_const_lv4_0 = "0000";
const sc_lv<4> batch_align2D::ap_const_lv4_F = "1111";
const sc_lv<32> batch_align2D::ap_const_lv32_40000000 = "1000000000000000000000000000000";
const sc_lv<32> batch_align2D::ap_const_lv32_3F = "111111";
const sc_lv<2> batch_align2D::ap_const_lv2_2 = "10";
const sc_lv<2> batch_align2D::ap_const_lv2_1 = "1";

batch_align2D::batch_align2D(sc_module_name name) : sc_module(name), mVcdFile(0) {
    batch_align2D_ctrl_s_axi_U = new batch_align2D_ctrl_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("batch_align2D_ctrl_s_axi_U");
    batch_align2D_ctrl_s_axi_U->AWVALID(s_axi_ctrl_AWVALID);
    batch_align2D_ctrl_s_axi_U->AWREADY(s_axi_ctrl_AWREADY);
    batch_align2D_ctrl_s_axi_U->AWADDR(s_axi_ctrl_AWADDR);
    batch_align2D_ctrl_s_axi_U->WVALID(s_axi_ctrl_WVALID);
    batch_align2D_ctrl_s_axi_U->WREADY(s_axi_ctrl_WREADY);
    batch_align2D_ctrl_s_axi_U->WDATA(s_axi_ctrl_WDATA);
    batch_align2D_ctrl_s_axi_U->WSTRB(s_axi_ctrl_WSTRB);
    batch_align2D_ctrl_s_axi_U->ARVALID(s_axi_ctrl_ARVALID);
    batch_align2D_ctrl_s_axi_U->ARREADY(s_axi_ctrl_ARREADY);
    batch_align2D_ctrl_s_axi_U->ARADDR(s_axi_ctrl_ARADDR);
    batch_align2D_ctrl_s_axi_U->RVALID(s_axi_ctrl_RVALID);
    batch_align2D_ctrl_s_axi_U->RREADY(s_axi_ctrl_RREADY);
    batch_align2D_ctrl_s_axi_U->RDATA(s_axi_ctrl_RDATA);
    batch_align2D_ctrl_s_axi_U->RRESP(s_axi_ctrl_RRESP);
    batch_align2D_ctrl_s_axi_U->BVALID(s_axi_ctrl_BVALID);
    batch_align2D_ctrl_s_axi_U->BREADY(s_axi_ctrl_BREADY);
    batch_align2D_ctrl_s_axi_U->BRESP(s_axi_ctrl_BRESP);
    batch_align2D_ctrl_s_axi_U->ACLK(ap_clk);
    batch_align2D_ctrl_s_axi_U->ARESET(ap_rst_n_inv);
    batch_align2D_ctrl_s_axi_U->ACLK_EN(ap_var_for_const0);
    batch_align2D_ctrl_s_axi_U->ap_start(ap_start);
    batch_align2D_ctrl_s_axi_U->interrupt(interrupt);
    batch_align2D_ctrl_s_axi_U->ap_ready(ap_ready);
    batch_align2D_ctrl_s_axi_U->ap_done(ap_done);
    batch_align2D_ctrl_s_axi_U->ap_idle(ap_idle);
    batch_align2D_ctrl_s_axi_U->cur_px_estimate(cur_px_estimate);
    batch_align2D_ctrl_s_axi_U->converged(converged);
    batch_align2D_gmem_m_axi_U = new batch_align2D_gmem_m_axi<0,32,64,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("batch_align2D_gmem_m_axi_U");
    batch_align2D_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    batch_align2D_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    batch_align2D_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    batch_align2D_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    batch_align2D_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    batch_align2D_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    batch_align2D_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    batch_align2D_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    batch_align2D_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    batch_align2D_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    batch_align2D_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    batch_align2D_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    batch_align2D_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    batch_align2D_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    batch_align2D_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    batch_align2D_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    batch_align2D_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    batch_align2D_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    batch_align2D_gmem_m_axi_U->WID(m_axi_gmem_WID);
    batch_align2D_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    batch_align2D_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    batch_align2D_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    batch_align2D_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    batch_align2D_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    batch_align2D_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    batch_align2D_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    batch_align2D_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    batch_align2D_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    batch_align2D_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    batch_align2D_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    batch_align2D_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    batch_align2D_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    batch_align2D_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    batch_align2D_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    batch_align2D_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    batch_align2D_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    batch_align2D_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    batch_align2D_gmem_m_axi_U->RID(m_axi_gmem_RID);
    batch_align2D_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    batch_align2D_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    batch_align2D_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    batch_align2D_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    batch_align2D_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    batch_align2D_gmem_m_axi_U->BID(m_axi_gmem_BID);
    batch_align2D_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    batch_align2D_gmem_m_axi_U->ACLK(ap_clk);
    batch_align2D_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    batch_align2D_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    batch_align2D_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    batch_align2D_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    batch_align2D_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    batch_align2D_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    batch_align2D_gmem_m_axi_U->I_ARLEN(gmem_ARLEN);
    batch_align2D_gmem_m_axi_U->I_ARSIZE(ap_var_for_const2);
    batch_align2D_gmem_m_axi_U->I_ARLOCK(ap_var_for_const3);
    batch_align2D_gmem_m_axi_U->I_ARCACHE(ap_var_for_const4);
    batch_align2D_gmem_m_axi_U->I_ARQOS(ap_var_for_const4);
    batch_align2D_gmem_m_axi_U->I_ARPROT(ap_var_for_const2);
    batch_align2D_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    batch_align2D_gmem_m_axi_U->I_ARBURST(ap_var_for_const3);
    batch_align2D_gmem_m_axi_U->I_ARREGION(ap_var_for_const4);
    batch_align2D_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    batch_align2D_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    batch_align2D_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    batch_align2D_gmem_m_axi_U->I_RID(gmem_RID);
    batch_align2D_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    batch_align2D_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    batch_align2D_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    batch_align2D_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    batch_align2D_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    batch_align2D_gmem_m_axi_U->I_AWADDR(gmem_AWADDR);
    batch_align2D_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    batch_align2D_gmem_m_axi_U->I_AWLEN(gmem_AWLEN);
    batch_align2D_gmem_m_axi_U->I_AWSIZE(ap_var_for_const2);
    batch_align2D_gmem_m_axi_U->I_AWLOCK(ap_var_for_const3);
    batch_align2D_gmem_m_axi_U->I_AWCACHE(ap_var_for_const4);
    batch_align2D_gmem_m_axi_U->I_AWQOS(ap_var_for_const4);
    batch_align2D_gmem_m_axi_U->I_AWPROT(ap_var_for_const2);
    batch_align2D_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    batch_align2D_gmem_m_axi_U->I_AWBURST(ap_var_for_const3);
    batch_align2D_gmem_m_axi_U->I_AWREGION(ap_var_for_const4);
    batch_align2D_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    batch_align2D_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    batch_align2D_gmem_m_axi_U->I_WDATA(gmem_WDATA);
    batch_align2D_gmem_m_axi_U->I_WID(ap_var_for_const1);
    batch_align2D_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    batch_align2D_gmem_m_axi_U->I_WLAST(ap_var_for_const5);
    batch_align2D_gmem_m_axi_U->I_WSTRB(ap_var_for_const6);
    batch_align2D_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    batch_align2D_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    batch_align2D_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    batch_align2D_gmem_m_axi_U->I_BID(gmem_BID);
    batch_align2D_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1 = new batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1<1,2,32,32,32>("batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1");
    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1->clk(ap_clk);
    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1->reset(ap_rst_n_inv);
    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1->din0(select_ln83_reg_387);
    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1->din1(ap_var_for_const7);
    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1->ce(grp_fu_200_ce);
    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1->dout(grp_fu_200_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln72_fu_251_p2);
    sensitive << ( phi_ln72_reg_178 );

    SC_METHOD(thread_add_ln83_fu_293_p2);
    sensitive << ( phi_ln83_reg_189 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln72_reg_338 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln72_reg_338 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_block_state24_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_block_state24_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( icmp_ln72_reg_338 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state21_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state22_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state23_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state24_io);
    sensitive << ( icmp_ln83_reg_378_pp1_iter2_reg );
    sensitive << ( gmem_WREADY );

    SC_METHOD(thread_ap_block_state24_pp1_stage0_iter3);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( icmp_ln72_fu_245_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state21);
    sensitive << ( icmp_ln83_fu_287_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bitcast_ln83_fu_311_p1);
    sensitive << ( select_ln_reg_392 );

    SC_METHOD(thread_converged3_fu_205_p4);
    sensitive << ( converged );

    SC_METHOD(thread_empty_fu_215_p1);
    sensitive << ( converged3_fu_205_p4 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( gmem_ARREADY );
    sensitive << ( gmem_addr_reg_324 );
    sensitive << ( gmem_addr_1_reg_331 );

    SC_METHOD(thread_gmem_ARLEN);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( gmem_ARREADY );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( gmem_ARREADY );

    SC_METHOD(thread_gmem_AWADDR);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( gmem_AWREADY );
    sensitive << ( gmem_addr_reg_324 );
    sensitive << ( gmem_addr_1_reg_331 );

    SC_METHOD(thread_gmem_AWLEN);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( gmem_AWREADY );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln72_reg_338 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_gmem_WDATA);
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( icmp_ln83_reg_378_pp1_iter2_reg );
    sensitive << ( tmp_1_reg_397 );
    sensitive << ( bitcast_ln83_fu_311_p1 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( icmp_ln83_reg_378_pp1_iter2_reg );
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state29 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln72_reg_338 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( icmp_ln83_reg_378_pp1_iter2_reg );

    SC_METHOD(thread_grp_fu_200_ce);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_icmp_ln72_fu_245_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( phi_ln72_reg_178 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln83_fu_287_p2);
    sensitive << ( phi_ln83_reg_189 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_select_ln83_fu_303_p3);
    sensitive << ( v_buff_0_1_0_reg_154 );
    sensitive << ( v_buff_0_0_0_reg_166 );
    sensitive << ( trunc_ln83_fu_299_p1 );

    SC_METHOD(thread_tmp_1_fu_315_p4);
    sensitive << ( gmem_RDATA );
    sensitive << ( xor_ln84_reg_373 );

    SC_METHOD(thread_tmp_fu_225_p4);
    sensitive << ( cur_px_estimate );

    SC_METHOD(thread_trunc_ln72_fu_257_p1);
    sensitive << ( phi_ln72_reg_178 );

    SC_METHOD(thread_trunc_ln73_fu_278_p1);
    sensitive << ( gmem_RDATA );

    SC_METHOD(thread_trunc_ln83_fu_299_p1);
    sensitive << ( phi_ln83_reg_189 );

    SC_METHOD(thread_v_buff_0_0_fu_261_p1);
    sensitive << ( gmem_addr_1_read_reg_353 );

    SC_METHOD(thread_v_buff_0_1_1_fu_264_p3);
    sensitive << ( v_buff_0_1_0_reg_154 );
    sensitive << ( trunc_ln72_reg_347_pp0_iter1_reg );
    sensitive << ( v_buff_0_0_fu_261_p1 );

    SC_METHOD(thread_v_buff_0_1_2_fu_271_p3);
    sensitive << ( v_buff_0_0_0_reg_166 );
    sensitive << ( trunc_ln72_reg_347_pp0_iter1_reg );
    sensitive << ( v_buff_0_0_fu_261_p1 );

    SC_METHOD(thread_xor_ln84_fu_282_p2);
    sensitive << ( trunc_ln73_reg_368 );

    SC_METHOD(thread_zext_ln72_fu_235_p1);
    sensitive << ( tmp_fu_225_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( gmem_AWREADY );
    sensitive << ( gmem_WREADY );
    sensitive << ( gmem_ARREADY );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_BVALID );
    sensitive << ( icmp_ln72_fu_245_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln83_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "000000000000000000000000000000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "batch_align2D_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_ctrl_AWVALID, "(port)s_axi_ctrl_AWVALID");
    sc_trace(mVcdFile, s_axi_ctrl_AWREADY, "(port)s_axi_ctrl_AWREADY");
    sc_trace(mVcdFile, s_axi_ctrl_AWADDR, "(port)s_axi_ctrl_AWADDR");
    sc_trace(mVcdFile, s_axi_ctrl_WVALID, "(port)s_axi_ctrl_WVALID");
    sc_trace(mVcdFile, s_axi_ctrl_WREADY, "(port)s_axi_ctrl_WREADY");
    sc_trace(mVcdFile, s_axi_ctrl_WDATA, "(port)s_axi_ctrl_WDATA");
    sc_trace(mVcdFile, s_axi_ctrl_WSTRB, "(port)s_axi_ctrl_WSTRB");
    sc_trace(mVcdFile, s_axi_ctrl_ARVALID, "(port)s_axi_ctrl_ARVALID");
    sc_trace(mVcdFile, s_axi_ctrl_ARREADY, "(port)s_axi_ctrl_ARREADY");
    sc_trace(mVcdFile, s_axi_ctrl_ARADDR, "(port)s_axi_ctrl_ARADDR");
    sc_trace(mVcdFile, s_axi_ctrl_RVALID, "(port)s_axi_ctrl_RVALID");
    sc_trace(mVcdFile, s_axi_ctrl_RREADY, "(port)s_axi_ctrl_RREADY");
    sc_trace(mVcdFile, s_axi_ctrl_RDATA, "(port)s_axi_ctrl_RDATA");
    sc_trace(mVcdFile, s_axi_ctrl_RRESP, "(port)s_axi_ctrl_RRESP");
    sc_trace(mVcdFile, s_axi_ctrl_BVALID, "(port)s_axi_ctrl_BVALID");
    sc_trace(mVcdFile, s_axi_ctrl_BREADY, "(port)s_axi_ctrl_BREADY");
    sc_trace(mVcdFile, s_axi_ctrl_BRESP, "(port)s_axi_ctrl_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, cur_px_estimate, "cur_px_estimate");
    sc_trace(mVcdFile, converged, "converged");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln72_reg_338, "icmp_ln72_reg_338");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter3, "ap_enable_reg_pp1_iter3");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, icmp_ln83_reg_378, "icmp_ln83_reg_378");
    sc_trace(mVcdFile, icmp_ln83_reg_378_pp1_iter2_reg, "icmp_ln83_reg_378_pp1_iter2_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_AWADDR, "gmem_AWADDR");
    sc_trace(mVcdFile, gmem_AWLEN, "gmem_AWLEN");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_WDATA, "gmem_WDATA");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_ARLEN, "gmem_ARLEN");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, v_buff_0_1_0_reg_154, "v_buff_0_1_0_reg_154");
    sc_trace(mVcdFile, v_buff_0_0_0_reg_166, "v_buff_0_0_0_reg_166");
    sc_trace(mVcdFile, phi_ln72_reg_178, "phi_ln72_reg_178");
    sc_trace(mVcdFile, phi_ln83_reg_189, "phi_ln83_reg_189");
    sc_trace(mVcdFile, gmem_addr_reg_324, "gmem_addr_reg_324");
    sc_trace(mVcdFile, gmem_addr_1_reg_331, "gmem_addr_1_reg_331");
    sc_trace(mVcdFile, icmp_ln72_fu_245_p2, "icmp_ln72_fu_245_p2");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln72_reg_338_pp0_iter1_reg, "icmp_ln72_reg_338_pp0_iter1_reg");
    sc_trace(mVcdFile, add_ln72_fu_251_p2, "add_ln72_fu_251_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, trunc_ln72_fu_257_p1, "trunc_ln72_fu_257_p1");
    sc_trace(mVcdFile, trunc_ln72_reg_347, "trunc_ln72_reg_347");
    sc_trace(mVcdFile, trunc_ln72_reg_347_pp0_iter1_reg, "trunc_ln72_reg_347_pp0_iter1_reg");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_353, "gmem_addr_1_read_reg_353");
    sc_trace(mVcdFile, v_buff_0_1_1_fu_264_p3, "v_buff_0_1_1_fu_264_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, v_buff_0_1_2_fu_271_p3, "v_buff_0_1_2_fu_271_p3");
    sc_trace(mVcdFile, trunc_ln73_fu_278_p1, "trunc_ln73_fu_278_p1");
    sc_trace(mVcdFile, trunc_ln73_reg_368, "trunc_ln73_reg_368");
    sc_trace(mVcdFile, xor_ln84_fu_282_p2, "xor_ln84_fu_282_p2");
    sc_trace(mVcdFile, xor_ln84_reg_373, "xor_ln84_reg_373");
    sc_trace(mVcdFile, icmp_ln83_fu_287_p2, "icmp_ln83_fu_287_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state21_pp1_stage0_iter0, "ap_block_state21_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state22_pp1_stage0_iter1, "ap_block_state22_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state23_pp1_stage0_iter2, "ap_block_state23_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state24_pp1_stage0_iter3, "ap_block_state24_pp1_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state24_io, "ap_block_state24_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, icmp_ln83_reg_378_pp1_iter1_reg, "icmp_ln83_reg_378_pp1_iter1_reg");
    sc_trace(mVcdFile, add_ln83_fu_293_p2, "add_ln83_fu_293_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, select_ln83_fu_303_p3, "select_ln83_fu_303_p3");
    sc_trace(mVcdFile, select_ln83_reg_387, "select_ln83_reg_387");
    sc_trace(mVcdFile, grp_fu_200_p2, "grp_fu_200_p2");
    sc_trace(mVcdFile, select_ln_reg_392, "select_ln_reg_392");
    sc_trace(mVcdFile, tmp_1_fu_315_p4, "tmp_1_fu_315_p4");
    sc_trace(mVcdFile, tmp_1_reg_397, "tmp_1_reg_397");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state21, "ap_condition_pp1_exit_iter0_state21");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, empty_fu_215_p1, "empty_fu_215_p1");
    sc_trace(mVcdFile, zext_ln72_fu_235_p1, "zext_ln72_fu_235_p1");
    sc_trace(mVcdFile, bitcast_ln83_fu_311_p1, "bitcast_ln83_fu_311_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, converged3_fu_205_p4, "converged3_fu_205_p4");
    sc_trace(mVcdFile, tmp_fu_225_p4, "tmp_fu_225_p4");
    sc_trace(mVcdFile, v_buff_0_0_fu_261_p1, "v_buff_0_0_fu_261_p1");
    sc_trace(mVcdFile, trunc_ln83_fu_299_p1, "trunc_ln83_fu_299_p1");
    sc_trace(mVcdFile, grp_fu_200_ce, "grp_fu_200_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
    mHdltvinHandle.open("batch_align2D.hdltvin.dat");
    mHdltvoutHandle.open("batch_align2D.hdltvout.dat");
}

batch_align2D::~batch_align2D() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete batch_align2D_ctrl_s_axi_U;
    delete batch_align2D_gmem_m_axi_U;
    delete batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1;
}

void batch_align2D::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void batch_align2D::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_logic_0;
}

void batch_align2D::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void batch_align2D::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void batch_align2D::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void batch_align2D::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void batch_align2D::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_F;
}

void batch_align2D::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_40000000;
}

void batch_align2D::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state21.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
                    esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state21.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state21.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter3 = ap_enable_reg_pp1_iter2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
                    esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp1_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln72_fu_245_p2.read()))) {
        phi_ln72_reg_178 = add_ln72_fu_251_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        phi_ln72_reg_178 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
        phi_ln83_reg_189 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln83_fu_287_p2.read()))) {
        phi_ln83_reg_189 = add_ln83_fu_293_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln72_reg_338.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_addr_1_read_reg_353 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        gmem_addr_1_reg_331 = zext_ln72_fu_235_p1.read();
        gmem_addr_reg_324 = empty_fu_215_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln72_reg_338 = icmp_ln72_fu_245_p2.read();
        icmp_ln72_reg_338_pp0_iter1_reg = icmp_ln72_reg_338.read();
        trunc_ln72_reg_347_pp0_iter1_reg = trunc_ln72_reg_347.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln83_reg_378 = icmp_ln83_fu_287_p2.read();
        icmp_ln83_reg_378_pp1_iter1_reg = icmp_ln83_reg_378.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln83_reg_378_pp1_iter2_reg = icmp_ln83_reg_378_pp1_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln83_fu_287_p2.read()))) {
        select_ln83_reg_387 = select_ln83_fu_303_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln83_reg_378_pp1_iter1_reg.read()))) {
        select_ln_reg_392 = grp_fu_200_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        tmp_1_reg_397 = tmp_1_fu_315_p4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln72_fu_245_p2.read()))) {
        trunc_ln72_reg_347 = trunc_ln72_fu_257_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        trunc_ln73_reg_368 = trunc_ln73_fu_278_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln72_reg_338_pp0_iter1_reg.read()))) {
        v_buff_0_0_0_reg_166 = v_buff_0_1_2_fu_271_p3.read();
        v_buff_0_1_0_reg_154 = v_buff_0_1_1_fu_264_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
        xor_ln84_reg_373 = xor_ln84_fu_282_p2.read();
    }
}

void batch_align2D::thread_add_ln72_fu_251_p2() {
    add_ln72_fu_251_p2 = (!phi_ln72_reg_178.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(phi_ln72_reg_178.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void batch_align2D::thread_add_ln83_fu_293_p2() {
    add_ln83_fu_293_p2 = (!phi_ln83_reg_189.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(phi_ln83_reg_189.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void batch_align2D::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void batch_align2D::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[18];
}

void batch_align2D::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void batch_align2D::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void batch_align2D::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[16];
}

void batch_align2D::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void batch_align2D::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[17];
}

void batch_align2D::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[23];
}

void batch_align2D::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[24];
}

void batch_align2D::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[31];
}

void batch_align2D::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[32];
}

void batch_align2D::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[33];
}

void batch_align2D::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[38];
}

void batch_align2D::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void batch_align2D::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln72_reg_338.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void batch_align2D::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln72_reg_338.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void batch_align2D::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state24_io.read()));
}

void batch_align2D::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state24_io.read()));
}

void batch_align2D::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln72_reg_338.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void batch_align2D::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_block_state21_pp1_stage0_iter0() {
    ap_block_state21_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_block_state22_pp1_stage0_iter1() {
    ap_block_state22_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_block_state23_pp1_stage0_iter2() {
    ap_block_state23_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_block_state24_io() {
    ap_block_state24_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln83_reg_378_pp1_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_WREADY.read()));
}

void batch_align2D::thread_ap_block_state24_pp1_stage0_iter3() {
    ap_block_state24_pp1_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_align2D::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(icmp_ln72_fu_245_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void batch_align2D::thread_ap_condition_pp1_exit_iter0_state21() {
    if (esl_seteq<1,1,1>(icmp_ln83_fu_287_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state21 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state21 = ap_const_logic_0;
    }
}

void batch_align2D::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void batch_align2D::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void batch_align2D::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void batch_align2D::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void batch_align2D::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void batch_align2D::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter3.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void batch_align2D::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void batch_align2D::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void batch_align2D::thread_bitcast_ln83_fu_311_p1() {
    bitcast_ln83_fu_311_p1 = select_ln_reg_392.read();
}

void batch_align2D::thread_converged3_fu_205_p4() {
    converged3_fu_205_p4 = converged.read().range(63, 2);
}

void batch_align2D::thread_empty_fu_215_p1() {
    empty_fu_215_p1 = esl_zext<64,62>(converged3_fu_205_p4.read());
}

void batch_align2D::thread_gmem_ARADDR() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)))) {
        gmem_ARADDR = gmem_addr_reg_324.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
        gmem_ARADDR = gmem_addr_1_reg_331.read();
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void batch_align2D::thread_gmem_ARLEN() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)))) {
        gmem_ARLEN = ap_const_lv32_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
        gmem_ARLEN = ap_const_lv32_2;
    } else {
        gmem_ARLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void batch_align2D::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void batch_align2D::thread_gmem_AWADDR() {
    if (esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
            gmem_AWADDR = gmem_addr_reg_324.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
            gmem_AWADDR = gmem_addr_1_reg_331.read();
        } else {
            gmem_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void batch_align2D::thread_gmem_AWLEN() {
    if (esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
            gmem_AWLEN = ap_const_lv32_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
            gmem_AWLEN = ap_const_lv32_2;
        } else {
            gmem_AWLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        gmem_AWLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void batch_align2D::thread_gmem_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
          esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1)))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void batch_align2D::thread_gmem_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
          esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1)))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void batch_align2D::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln72_reg_338.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void batch_align2D::thread_gmem_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        gmem_WDATA = tmp_1_reg_397.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln83_reg_378_pp1_iter2_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0))) {
        gmem_WDATA = bitcast_ln83_fu_311_p1.read();
    } else {
        gmem_WDATA =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void batch_align2D::thread_gmem_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln83_reg_378_pp1_iter2_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
          esl_seteq<1,1,1>(gmem_WREADY.read(), ap_const_logic_1)))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void batch_align2D::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void batch_align2D::thread_gmem_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void batch_align2D::thread_gmem_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void batch_align2D::thread_gmem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln72_reg_338.read(), ap_const_lv1_0)))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void batch_align2D::thread_gmem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln83_reg_378_pp1_iter2_reg.read())))) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void batch_align2D::thread_grp_fu_200_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_200_ce = ap_const_logic_1;
    } else {
        grp_fu_200_ce = ap_const_logic_0;
    }
}

void batch_align2D::thread_icmp_ln72_fu_245_p2() {
    icmp_ln72_fu_245_p2 = (!phi_ln72_reg_178.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln72_reg_178.read() == ap_const_lv2_2);
}

void batch_align2D::thread_icmp_ln83_fu_287_p2() {
    icmp_ln83_fu_287_p2 = (!phi_ln83_reg_189.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln83_reg_189.read() == ap_const_lv2_2);
}

void batch_align2D::thread_select_ln83_fu_303_p3() {
    select_ln83_fu_303_p3 = (!trunc_ln83_fu_299_p1.read()[0].is_01())? sc_lv<32>(): ((trunc_ln83_fu_299_p1.read()[0].to_bool())? v_buff_0_1_0_reg_154.read(): v_buff_0_0_0_reg_166.read());
}

void batch_align2D::thread_tmp_1_fu_315_p4() {
    tmp_1_fu_315_p4 = esl_bitset<32,32,32,1>(gmem_RDATA.read(), ap_const_lv32_0, xor_ln84_reg_373.read());
}

void batch_align2D::thread_tmp_fu_225_p4() {
    tmp_fu_225_p4 = cur_px_estimate.read().range(63, 2);
}

void batch_align2D::thread_trunc_ln72_fu_257_p1() {
    trunc_ln72_fu_257_p1 = phi_ln72_reg_178.read().range(1-1, 0);
}

void batch_align2D::thread_trunc_ln73_fu_278_p1() {
    trunc_ln73_fu_278_p1 = gmem_RDATA.read().range(1-1, 0);
}

void batch_align2D::thread_trunc_ln83_fu_299_p1() {
    trunc_ln83_fu_299_p1 = phi_ln83_reg_189.read().range(1-1, 0);
}

void batch_align2D::thread_v_buff_0_0_fu_261_p1() {
    v_buff_0_0_fu_261_p1 = gmem_addr_1_read_reg_353.read();
}

void batch_align2D::thread_v_buff_0_1_1_fu_264_p3() {
    v_buff_0_1_1_fu_264_p3 = (!trunc_ln72_reg_347_pp0_iter1_reg.read()[0].is_01())? sc_lv<32>(): ((trunc_ln72_reg_347_pp0_iter1_reg.read()[0].to_bool())? v_buff_0_0_fu_261_p1.read(): v_buff_0_1_0_reg_154.read());
}

void batch_align2D::thread_v_buff_0_1_2_fu_271_p3() {
    v_buff_0_1_2_fu_271_p3 = (!trunc_ln72_reg_347_pp0_iter1_reg.read()[0].is_01())? sc_lv<32>(): ((trunc_ln72_reg_347_pp0_iter1_reg.read()[0].to_bool())? v_buff_0_0_0_reg_166.read(): v_buff_0_0_fu_261_p1.read());
}

void batch_align2D::thread_xor_ln84_fu_282_p2() {
    xor_ln84_fu_282_p2 = (trunc_ln73_reg_368.read() ^ ap_const_lv1_1);
}

void batch_align2D::thread_zext_ln72_fu_235_p1() {
    zext_ln72_fu_235_p1 = esl_zext<64,62>(tmp_fu_225_p4.read());
}

void batch_align2D::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln72_fu_245_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln72_fu_245_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 262144 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln83_fu_287_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln83_fu_287_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 2147483648 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state38;
            } else {
                ap_NS_fsm = ap_ST_fsm_state37;
            }
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state39;
            } else {
                ap_NS_fsm = ap_ST_fsm_state38;
            }
            break;
        case 8589934592 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && esl_seteq<1,1,1>(gmem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state40;
            } else {
                ap_NS_fsm = ap_ST_fsm_state39;
            }
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 274877906944 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state44;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<39>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void batch_align2D::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_AWVALID\" :  \"" << s_axi_ctrl_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_AWREADY\" :  \"" << s_axi_ctrl_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_AWADDR\" :  \"" << s_axi_ctrl_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WVALID\" :  \"" << s_axi_ctrl_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_WREADY\" :  \"" << s_axi_ctrl_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WDATA\" :  \"" << s_axi_ctrl_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WSTRB\" :  \"" << s_axi_ctrl_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_ARVALID\" :  \"" << s_axi_ctrl_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_ARREADY\" :  \"" << s_axi_ctrl_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_ARADDR\" :  \"" << s_axi_ctrl_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RVALID\" :  \"" << s_axi_ctrl_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_RREADY\" :  \"" << s_axi_ctrl_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RDATA\" :  \"" << s_axi_ctrl_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RRESP\" :  \"" << s_axi_ctrl_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_BVALID\" :  \"" << s_axi_ctrl_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_BREADY\" :  \"" << s_axi_ctrl_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_BRESP\" :  \"" << s_axi_ctrl_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

