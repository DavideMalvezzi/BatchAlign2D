// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _batch_align2D_HH_
#define _batch_align2D_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1.h"
#include "batch_align2D_ctrl_s_axi.h"
#include "batch_align2D_gmem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_GMEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32>
struct batch_align2D : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_gmem_AWVALID;
    sc_in< sc_logic > m_axi_gmem_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_AWID;
    sc_out< sc_lv<8> > m_axi_gmem_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_AWUSER_WIDTH> > m_axi_gmem_AWUSER;
    sc_out< sc_logic > m_axi_gmem_WVALID;
    sc_in< sc_logic > m_axi_gmem_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH/8> > m_axi_gmem_WSTRB;
    sc_out< sc_logic > m_axi_gmem_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_WID;
    sc_out< sc_uint<C_M_AXI_GMEM_WUSER_WIDTH> > m_axi_gmem_WUSER;
    sc_out< sc_logic > m_axi_gmem_ARVALID;
    sc_in< sc_logic > m_axi_gmem_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_ARID;
    sc_out< sc_lv<8> > m_axi_gmem_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_ARUSER_WIDTH> > m_axi_gmem_ARUSER;
    sc_in< sc_logic > m_axi_gmem_RVALID;
    sc_out< sc_logic > m_axi_gmem_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_RDATA;
    sc_in< sc_logic > m_axi_gmem_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_RID;
    sc_in< sc_uint<C_M_AXI_GMEM_RUSER_WIDTH> > m_axi_gmem_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem_RRESP;
    sc_in< sc_logic > m_axi_gmem_BVALID;
    sc_out< sc_logic > m_axi_gmem_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_BID;
    sc_in< sc_uint<C_M_AXI_GMEM_BUSER_WIDTH> > m_axi_gmem_BUSER;
    sc_in< sc_logic > s_axi_ctrl_AWVALID;
    sc_out< sc_logic > s_axi_ctrl_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_ctrl_AWADDR;
    sc_in< sc_logic > s_axi_ctrl_WVALID;
    sc_out< sc_logic > s_axi_ctrl_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_ctrl_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_ctrl_WSTRB;
    sc_in< sc_logic > s_axi_ctrl_ARVALID;
    sc_out< sc_logic > s_axi_ctrl_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_ctrl_ARADDR;
    sc_out< sc_logic > s_axi_ctrl_RVALID;
    sc_in< sc_logic > s_axi_ctrl_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_ctrl_RDATA;
    sc_out< sc_lv<2> > s_axi_ctrl_RRESP;
    sc_out< sc_logic > s_axi_ctrl_BVALID;
    sc_in< sc_logic > s_axi_ctrl_BREADY;
    sc_out< sc_lv<2> > s_axi_ctrl_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const5;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<2> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const2;
    sc_signal< sc_lv<4> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;


    // Module declarations
    batch_align2D(sc_module_name name);
    SC_HAS_PROCESS(batch_align2D);

    ~batch_align2D();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    batch_align2D_ctrl_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* batch_align2D_ctrl_s_axi_U;
    batch_align2D_gmem_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>* batch_align2D_gmem_m_axi_U;
    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1<1,2,32,32,32>* batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<39> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > cur_px_estimate;
    sc_signal< sc_lv<32> > converged;
    sc_signal< sc_logic > gmem_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > gmem_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_logic > ap_CS_fsm_state30;
    sc_signal< sc_logic > ap_CS_fsm_state37;
    sc_signal< sc_logic > gmem_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state38;
    sc_signal< sc_logic > gmem_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state39;
    sc_signal< sc_logic > gmem_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state44;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln71_reg_347;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter3;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln82_reg_387;
    sc_signal< sc_lv<1> > icmp_ln82_reg_387_pp1_iter2_reg;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_logic > gmem_AWVALID;
    sc_signal< sc_logic > gmem_AWREADY;
    sc_signal< sc_lv<32> > gmem_AWADDR;
    sc_signal< sc_lv<32> > gmem_AWLEN;
    sc_signal< sc_logic > gmem_WVALID;
    sc_signal< sc_logic > gmem_WREADY;
    sc_signal< sc_lv<32> > gmem_WDATA;
    sc_signal< sc_logic > gmem_ARVALID;
    sc_signal< sc_logic > gmem_ARREADY;
    sc_signal< sc_lv<32> > gmem_ARADDR;
    sc_signal< sc_lv<32> > gmem_ARLEN;
    sc_signal< sc_logic > gmem_RVALID;
    sc_signal< sc_logic > gmem_RREADY;
    sc_signal< sc_lv<32> > gmem_RDATA;
    sc_signal< sc_logic > gmem_RLAST;
    sc_signal< sc_lv<1> > gmem_RID;
    sc_signal< sc_lv<1> > gmem_RUSER;
    sc_signal< sc_lv<2> > gmem_RRESP;
    sc_signal< sc_logic > gmem_BVALID;
    sc_signal< sc_logic > gmem_BREADY;
    sc_signal< sc_lv<2> > gmem_BRESP;
    sc_signal< sc_lv<1> > gmem_BID;
    sc_signal< sc_lv<1> > gmem_BUSER;
    sc_signal< sc_lv<32> > v_buff_0_1_0_reg_154;
    sc_signal< sc_lv<32> > v_buff_0_0_0_reg_166;
    sc_signal< sc_lv<2> > phi_ln71_reg_178;
    sc_signal< sc_lv<2> > phi_ln82_reg_189;
    sc_signal< sc_lv<30> > converged3_reg_323;
    sc_signal< sc_lv<30> > tmp_reg_328;
    sc_signal< sc_lv<32> > gmem_addr_1_reg_333;
    sc_signal< sc_lv<32> > gmem_addr_reg_340;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > icmp_ln71_fu_244_p2;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln71_reg_347_pp0_iter1_reg;
    sc_signal< sc_lv<2> > add_ln71_fu_250_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > trunc_ln71_fu_256_p1;
    sc_signal< sc_lv<1> > trunc_ln71_reg_356;
    sc_signal< sc_lv<1> > trunc_ln71_reg_356_pp0_iter1_reg;
    sc_signal< sc_lv<32> > gmem_addr_1_read_reg_362;
    sc_signal< sc_lv<32> > v_buff_0_1_1_fu_263_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<32> > v_buff_0_1_2_fu_270_p3;
    sc_signal< sc_lv<1> > trunc_ln72_fu_277_p1;
    sc_signal< sc_lv<1> > trunc_ln72_reg_377;
    sc_signal< sc_lv<1> > xor_ln83_fu_281_p2;
    sc_signal< sc_lv<1> > xor_ln83_reg_382;
    sc_signal< sc_lv<1> > icmp_ln82_fu_286_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state21_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state22_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state23_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state24_pp1_stage0_iter3;
    sc_signal< bool > ap_block_state24_io;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln82_reg_387_pp1_iter1_reg;
    sc_signal< sc_lv<2> > add_ln82_fu_292_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<32> > select_ln82_fu_302_p3;
    sc_signal< sc_lv<32> > select_ln82_reg_396;
    sc_signal< sc_lv<32> > grp_fu_200_p2;
    sc_signal< sc_lv<32> > select_ln_reg_401;
    sc_signal< sc_lv<32> > tmp_1_fu_314_p4;
    sc_signal< sc_lv<32> > tmp_1_reg_406;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state21;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_lv<64> > zext_ln71_fu_225_p1;
    sc_signal< sc_lv<64> > empty_fu_235_p1;
    sc_signal< sc_lv<32> > bitcast_ln82_fu_310_p1;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<32> > v_buff_0_0_fu_260_p1;
    sc_signal< sc_lv<1> > trunc_ln82_fu_298_p1;
    sc_signal< sc_logic > grp_fu_200_ce;
    sc_signal< sc_lv<39> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<39> ap_ST_fsm_state1;
    static const sc_lv<39> ap_ST_fsm_state2;
    static const sc_lv<39> ap_ST_fsm_state3;
    static const sc_lv<39> ap_ST_fsm_state4;
    static const sc_lv<39> ap_ST_fsm_state5;
    static const sc_lv<39> ap_ST_fsm_state6;
    static const sc_lv<39> ap_ST_fsm_state7;
    static const sc_lv<39> ap_ST_fsm_state8;
    static const sc_lv<39> ap_ST_fsm_pp0_stage0;
    static const sc_lv<39> ap_ST_fsm_state12;
    static const sc_lv<39> ap_ST_fsm_state13;
    static const sc_lv<39> ap_ST_fsm_state14;
    static const sc_lv<39> ap_ST_fsm_state15;
    static const sc_lv<39> ap_ST_fsm_state16;
    static const sc_lv<39> ap_ST_fsm_state17;
    static const sc_lv<39> ap_ST_fsm_state18;
    static const sc_lv<39> ap_ST_fsm_state19;
    static const sc_lv<39> ap_ST_fsm_state20;
    static const sc_lv<39> ap_ST_fsm_pp1_stage0;
    static const sc_lv<39> ap_ST_fsm_state25;
    static const sc_lv<39> ap_ST_fsm_state26;
    static const sc_lv<39> ap_ST_fsm_state27;
    static const sc_lv<39> ap_ST_fsm_state28;
    static const sc_lv<39> ap_ST_fsm_state29;
    static const sc_lv<39> ap_ST_fsm_state30;
    static const sc_lv<39> ap_ST_fsm_state31;
    static const sc_lv<39> ap_ST_fsm_state32;
    static const sc_lv<39> ap_ST_fsm_state33;
    static const sc_lv<39> ap_ST_fsm_state34;
    static const sc_lv<39> ap_ST_fsm_state35;
    static const sc_lv<39> ap_ST_fsm_state36;
    static const sc_lv<39> ap_ST_fsm_state37;
    static const sc_lv<39> ap_ST_fsm_state38;
    static const sc_lv<39> ap_ST_fsm_state39;
    static const sc_lv<39> ap_ST_fsm_state40;
    static const sc_lv<39> ap_ST_fsm_state41;
    static const sc_lv<39> ap_ST_fsm_state42;
    static const sc_lv<39> ap_ST_fsm_state43;
    static const sc_lv<39> ap_ST_fsm_state44;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_21;
    static const sc_lv<32> ap_const_lv32_26;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_17;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_GMEM_USER_VALUE;
    static const int C_M_AXI_GMEM_PROT_VALUE;
    static const int C_M_AXI_GMEM_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_40000000;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_add_ln71_fu_250_p2();
    void thread_add_ln82_fu_292_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state30();
    void thread_ap_CS_fsm_state37();
    void thread_ap_CS_fsm_state38();
    void thread_ap_CS_fsm_state39();
    void thread_ap_CS_fsm_state44();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state21_pp1_stage0_iter0();
    void thread_ap_block_state22_pp1_stage0_iter1();
    void thread_ap_block_state23_pp1_stage0_iter2();
    void thread_ap_block_state24_io();
    void thread_ap_block_state24_pp1_stage0_iter3();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_condition_pp1_exit_iter0_state21();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_bitcast_ln82_fu_310_p1();
    void thread_empty_fu_235_p1();
    void thread_gmem_ARADDR();
    void thread_gmem_ARLEN();
    void thread_gmem_ARVALID();
    void thread_gmem_AWADDR();
    void thread_gmem_AWLEN();
    void thread_gmem_AWVALID();
    void thread_gmem_BREADY();
    void thread_gmem_RREADY();
    void thread_gmem_WDATA();
    void thread_gmem_WVALID();
    void thread_gmem_blk_n_AR();
    void thread_gmem_blk_n_AW();
    void thread_gmem_blk_n_B();
    void thread_gmem_blk_n_R();
    void thread_gmem_blk_n_W();
    void thread_grp_fu_200_ce();
    void thread_icmp_ln71_fu_244_p2();
    void thread_icmp_ln82_fu_286_p2();
    void thread_select_ln82_fu_302_p3();
    void thread_tmp_1_fu_314_p4();
    void thread_trunc_ln71_fu_256_p1();
    void thread_trunc_ln72_fu_277_p1();
    void thread_trunc_ln82_fu_298_p1();
    void thread_v_buff_0_0_fu_260_p1();
    void thread_v_buff_0_1_1_fu_263_p3();
    void thread_v_buff_0_1_2_fu_270_p3();
    void thread_xor_ln83_fu_281_p2();
    void thread_zext_ln71_fu_225_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
