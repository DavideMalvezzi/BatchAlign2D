-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gauss_newton_optim is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read32 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read33 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read34 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read35 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read36 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read37 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read38 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read39 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read40 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read41 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read42 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read43 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read44 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read45 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read46 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read47 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read48 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read49 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read50 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read51 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read52 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read53 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read54 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read55 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read56 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read57 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read58 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read59 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read60 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read61 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read62 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read63 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read64 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read65 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read66 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read67 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read68 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read69 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read70 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read71 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read72 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read73 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read74 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read75 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read76 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read77 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read78 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read79 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read80 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read81 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read82 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read83 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read84 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read85 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read86 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read87 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read88 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read89 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read90 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read91 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read92 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read93 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read94 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read95 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read96 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read97 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read98 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read99 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_w : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read100 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read101 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read102 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read103 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read104 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read105 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read106 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read107 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read108 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read109 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read110 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read111 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read112 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read113 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read114 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read115 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read116 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read117 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read118 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read119 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read120 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read121 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read122 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read123 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read124 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read125 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read126 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read127 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read128 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read129 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read130 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read131 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read132 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read133 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read134 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read135 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read136 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read137 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read138 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read139 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read140 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read141 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read142 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read143 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read144 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read145 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read146 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read147 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read148 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read149 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read150 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read151 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read152 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read153 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read154 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read155 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read156 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read157 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read158 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read159 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read160 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read161 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read162 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read163 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read164 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read165 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read166 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read167 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read168 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read169 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read170 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read171 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read172 : IN STD_LOGIC_VECTOR (31 downto 0);
    cur_px_estimate_0_r : IN STD_LOGIC_VECTOR (31 downto 0);
    cur_px_estimate_1_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gauss_newton_optim is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (67 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (67 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (67 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (67 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (67 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (67 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (67 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (67 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (67 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (67 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (67 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table2_ce0 : STD_LOGIC;
    signal mask_table2_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal mask_table2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table2_ce1 : STD_LOGIC;
    signal mask_table2_q1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2052 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_2004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2058 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_1983_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2071 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_fu_1987_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2078 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2084 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal indvarinc_fu_2102_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_2181_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_5127 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_2160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iter_1_fu_2205_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal iter_1_reg_5137 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Result_s_reg_5142 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_2199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_reg_5151 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_2233_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_5159 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_fu_2252_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_reg_5170 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_14_reg_5175 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_6_reg_5184 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_7_fu_2278_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_7_reg_5192 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_77_fu_2297_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_77_reg_5203 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_30_fu_2617_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_30_reg_5208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_32_fu_2929_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_32_reg_5213 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_2937_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_84_reg_5218 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_fu_2941_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_reg_5223 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal subpix_y_reg_5228 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_2022_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_5234 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_16_fu_2025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_5240 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2028_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_5246 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_2034_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_5252 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2040_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_5258 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_2044_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_5263 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2048_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_5268 : STD_LOGIC_VECTOR (63 downto 0);
    signal wTL_fu_2013_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wTL_reg_5273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal wTR_fu_2016_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wTR_reg_5278 : STD_LOGIC_VECTOR (31 downto 0);
    signal wBL_fu_2019_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wBL_reg_5283 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_2951_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_1_reg_5291 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_shl_fu_2971_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_reg_5296 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_2945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_3793_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp46_reg_5301 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp62_fu_2993_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp62_reg_5306 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_fu_3020_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_5314 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_35_fu_3026_p102 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_reg_5319 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_3014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_3138_p102 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_5324 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_3249_p102 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_reg_5329 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_3360_p102 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_reg_5334 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_3485_p102 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_5339 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_3600_p66 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_5344 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_3670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_40_fu_3674_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2007_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_5369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_reg_5374 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1991_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_5379 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp59_reg_5384 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_reg_5389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp61_reg_5394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_53_fu_3686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal update_2_2_load_reg_5430 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_cast_fu_3701_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_cast_reg_5437 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_3711_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_5445 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_60_fu_3725_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_60_reg_5450 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal j_fu_3736_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_5458 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tmp_64_fu_3751_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_reg_5463 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_3730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_3766_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_reg_5468 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_0_reg_5473 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal invdar_reg_1591 : STD_LOGIC_VECTOR (1 downto 0);
    signal mean_diff_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1614 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_reg_1624 : STD_LOGIC_VECTOR (31 downto 0);
    signal iter_reg_1634 : STD_LOGIC_VECTOR (3 downto 0);
    signal Jres_2_reg_1645 : STD_LOGIC_VECTOR (31 downto 0);
    signal Jres_1_reg_1657 : STD_LOGIC_VECTOR (31 downto 0);
    signal Jres_0_reg_1669 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1681 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1693 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1705 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_1717 : STD_LOGIC_VECTOR (3 downto 0);
    signal Jres_2_s_reg_1728 : STD_LOGIC_VECTOR (31 downto 0);
    signal Jres_1_s_reg_1740 : STD_LOGIC_VECTOR (31 downto 0);
    signal Jres_0_s_reg_1752 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_1764 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1776 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1788 : STD_LOGIC_VECTOR (31 downto 0);
    signal it_0_rec_reg_1800 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_0_i_phi_fu_1815_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_i_reg_1811 : STD_LOGIC_VECTOR (1 downto 0);
    signal update_2_4_reg_1823 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_i_fu_3705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal update_1_4_reg_1837 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_0_4_reg_1851 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_2_5_reg_1865 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal update_1_5_reg_1876 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_0_5_reg_1887 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_reg_1898 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i_reg_1910 : STD_LOGIC_VECTOR (1 downto 0);
    signal update_2_5_be_reg_1921 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_1_5_be_reg_1936 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_0_5_be_reg_1951 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_fu_2247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_i1_fu_2292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal update_fu_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_0_1_fu_2128_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_1_fu_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_1_1_fu_2136_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_2_fu_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_2_1_fu_2152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_2_15_fu_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_2_1_16_fu_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_2_2_fu_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1966_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1966_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_fu_1971_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1971_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1983_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1983_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_1987_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1987_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2001_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_2004_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2007_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2010_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_fu_2108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_2122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_2114_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_2144_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_2211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_V_fu_2237_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_15_fu_2256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_V_1_fu_2282_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_10_fu_2334_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_i_cast_fu_2330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_2341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_3_fu_2365_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_2_fu_2355_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_11_fu_2347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sig_V_1_fu_2369_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i_18_fu_2386_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_V_9_fu_2381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_7_fu_2375_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sig_V_fu_2392_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i_fu_2313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_fu_2318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_demorgan_i_fu_2408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_2323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_fu_2398_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_v_i_fu_2414_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_i_fu_2426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_i_fu_2432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_2422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs_i_fu_2451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_i_fu_2446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i_fu_2456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_2462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_fu_2438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp9_i_fu_2467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_2473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_2477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_fu_2503_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_2507_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_4_fu_2493_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast_fu_2521_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_2525_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i_fu_2539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_2531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_2545_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_2549_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_cast_fu_2557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_2_cast_cas_fu_2561_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_1_cast1_fu_2517_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_i_i_i_19_fu_2565_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_2569_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_74_fu_2581_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_2575_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_13_fu_2589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_2593_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_29_fu_2603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_fu_2485_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_2611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_fu_2646_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_i186_cast_fu_2642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_20_fu_2653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_9_fu_2677_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_8_fu_2667_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_17_fu_2659_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sig_V_4_fu_2681_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i1_20_fu_2698_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_V_10_fu_2693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_8_fu_2687_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sig_V_9_fu_2704_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i1_fu_2625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i1_fu_2630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_demorgan_i1_fu_2720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_2635_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_fu_2710_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_v_i1_fu_2726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_i1_fu_2738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_i1_fu_2744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i1_fu_2734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs_i1_fu_2763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_i1_fu_2758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i1_fu_2768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp31_fu_2774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i1_fu_2750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp9_i1_fu_2779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_2785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_24_fu_2789_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_11_fu_2815_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_1_fu_2819_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_10_fu_2805_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i1_cast_fu_2833_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_2837_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i1_fu_2851_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_2843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i1_cast_fu_2857_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_2861_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_cast_fu_2869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast_cas_fu_2873_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_3_cast1_fu_2829_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_i_i_i1_21_fu_2877_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_2_fu_2881_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_83_fu_2893_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_2887_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_26_fu_2901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_2905_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_31_fu_2915_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_19_fu_2797_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_3_fu_2923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_2957_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp45_fu_2961_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_87_fu_2983_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_2979_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_cast_fu_2989_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp47_fu_2999_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp217_cast_fu_3005_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_t_fu_3009_p2 : STD_LOGIC_VECTOR (6 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sum_t_fu_3009_p2 : signal is "no";
    signal sum6_t_fu_3132_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_3249_p101 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_47_fu_3360_p101 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_58_cast_fu_3466_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp63_fu_3470_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp223_cast_fu_3476_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_3485_p101 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_56_fu_3591_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_58_fu_3600_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_fu_3717_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_62_fu_3742_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_64_fu_3751_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1966_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1971_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (67 downto 0);

    component batch_align2D_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_sitofp_32ns_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_fptrunc_64ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_fpext_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component batch_align2D_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component batch_align2D_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component batch_align2D_mux_1007_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (7 downto 0);
        din33 : IN STD_LOGIC_VECTOR (7 downto 0);
        din34 : IN STD_LOGIC_VECTOR (7 downto 0);
        din35 : IN STD_LOGIC_VECTOR (7 downto 0);
        din36 : IN STD_LOGIC_VECTOR (7 downto 0);
        din37 : IN STD_LOGIC_VECTOR (7 downto 0);
        din38 : IN STD_LOGIC_VECTOR (7 downto 0);
        din39 : IN STD_LOGIC_VECTOR (7 downto 0);
        din40 : IN STD_LOGIC_VECTOR (7 downto 0);
        din41 : IN STD_LOGIC_VECTOR (7 downto 0);
        din42 : IN STD_LOGIC_VECTOR (7 downto 0);
        din43 : IN STD_LOGIC_VECTOR (7 downto 0);
        din44 : IN STD_LOGIC_VECTOR (7 downto 0);
        din45 : IN STD_LOGIC_VECTOR (7 downto 0);
        din46 : IN STD_LOGIC_VECTOR (7 downto 0);
        din47 : IN STD_LOGIC_VECTOR (7 downto 0);
        din48 : IN STD_LOGIC_VECTOR (7 downto 0);
        din49 : IN STD_LOGIC_VECTOR (7 downto 0);
        din50 : IN STD_LOGIC_VECTOR (7 downto 0);
        din51 : IN STD_LOGIC_VECTOR (7 downto 0);
        din52 : IN STD_LOGIC_VECTOR (7 downto 0);
        din53 : IN STD_LOGIC_VECTOR (7 downto 0);
        din54 : IN STD_LOGIC_VECTOR (7 downto 0);
        din55 : IN STD_LOGIC_VECTOR (7 downto 0);
        din56 : IN STD_LOGIC_VECTOR (7 downto 0);
        din57 : IN STD_LOGIC_VECTOR (7 downto 0);
        din58 : IN STD_LOGIC_VECTOR (7 downto 0);
        din59 : IN STD_LOGIC_VECTOR (7 downto 0);
        din60 : IN STD_LOGIC_VECTOR (7 downto 0);
        din61 : IN STD_LOGIC_VECTOR (7 downto 0);
        din62 : IN STD_LOGIC_VECTOR (7 downto 0);
        din63 : IN STD_LOGIC_VECTOR (7 downto 0);
        din64 : IN STD_LOGIC_VECTOR (7 downto 0);
        din65 : IN STD_LOGIC_VECTOR (7 downto 0);
        din66 : IN STD_LOGIC_VECTOR (7 downto 0);
        din67 : IN STD_LOGIC_VECTOR (7 downto 0);
        din68 : IN STD_LOGIC_VECTOR (7 downto 0);
        din69 : IN STD_LOGIC_VECTOR (7 downto 0);
        din70 : IN STD_LOGIC_VECTOR (7 downto 0);
        din71 : IN STD_LOGIC_VECTOR (7 downto 0);
        din72 : IN STD_LOGIC_VECTOR (7 downto 0);
        din73 : IN STD_LOGIC_VECTOR (7 downto 0);
        din74 : IN STD_LOGIC_VECTOR (7 downto 0);
        din75 : IN STD_LOGIC_VECTOR (7 downto 0);
        din76 : IN STD_LOGIC_VECTOR (7 downto 0);
        din77 : IN STD_LOGIC_VECTOR (7 downto 0);
        din78 : IN STD_LOGIC_VECTOR (7 downto 0);
        din79 : IN STD_LOGIC_VECTOR (7 downto 0);
        din80 : IN STD_LOGIC_VECTOR (7 downto 0);
        din81 : IN STD_LOGIC_VECTOR (7 downto 0);
        din82 : IN STD_LOGIC_VECTOR (7 downto 0);
        din83 : IN STD_LOGIC_VECTOR (7 downto 0);
        din84 : IN STD_LOGIC_VECTOR (7 downto 0);
        din85 : IN STD_LOGIC_VECTOR (7 downto 0);
        din86 : IN STD_LOGIC_VECTOR (7 downto 0);
        din87 : IN STD_LOGIC_VECTOR (7 downto 0);
        din88 : IN STD_LOGIC_VECTOR (7 downto 0);
        din89 : IN STD_LOGIC_VECTOR (7 downto 0);
        din90 : IN STD_LOGIC_VECTOR (7 downto 0);
        din91 : IN STD_LOGIC_VECTOR (7 downto 0);
        din92 : IN STD_LOGIC_VECTOR (7 downto 0);
        din93 : IN STD_LOGIC_VECTOR (7 downto 0);
        din94 : IN STD_LOGIC_VECTOR (7 downto 0);
        din95 : IN STD_LOGIC_VECTOR (7 downto 0);
        din96 : IN STD_LOGIC_VECTOR (7 downto 0);
        din97 : IN STD_LOGIC_VECTOR (7 downto 0);
        din98 : IN STD_LOGIC_VECTOR (7 downto 0);
        din99 : IN STD_LOGIC_VECTOR (7 downto 0);
        din100 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component batch_align2D_mux_646_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_mux_94_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_ama_addmuladd_7ns_3s_7s_7ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component gauss_newton_optim_mask_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    mask_table2_U : component gauss_newton_optim_mask_table2
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table2_address0,
        ce0 => mask_table2_ce0,
        q0 => mask_table2_q0,
        address1 => mask_table2_address1,
        ce1 => mask_table2_ce1,
        q1 => mask_table2_q1);

    batch_align2D_faddfsub_32ns_32ns_32_4_full_dsp_1_U128 : component batch_align2D_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1966_p0,
        din1 => grp_fu_1966_p1,
        opcode => grp_fu_1966_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_1966_p2);

    batch_align2D_faddfsub_32ns_32ns_32_4_full_dsp_1_U129 : component batch_align2D_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1971_p0,
        din1 => grp_fu_1971_p1,
        opcode => grp_fu_1971_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_1971_p2);

    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U130 : component batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1983_p0,
        din1 => grp_fu_1983_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1983_p2);

    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U131 : component batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1987_p0,
        din1 => grp_fu_1987_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1987_p2);

    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U132 : component batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => wBL_reg_5283,
        din1 => tmp_45_reg_5369,
        ce => ap_const_logic_1,
        dout => grp_fu_1991_p2);

    batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1_U133 : component batch_align2D_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => subpix_y_reg_5228,
        din1 => tmp_49_reg_5374,
        ce => ap_const_logic_1,
        dout => grp_fu_1995_p2);

    batch_align2D_sitofp_32ns_32_3_1_U134 : component batch_align2D_sitofp_32ns_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2001_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_2001_p1);

    batch_align2D_sitofp_32ns_32_3_1_U135 : component batch_align2D_sitofp_32ns_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2004_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_2004_p1);

    batch_align2D_sitofp_32ns_32_3_1_U136 : component batch_align2D_sitofp_32ns_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2007_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_2007_p1);

    batch_align2D_sitofp_32ns_32_3_1_U137 : component batch_align2D_sitofp_32ns_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2010_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_2010_p1);

    batch_align2D_fptrunc_64ns_32_1_1_U138 : component batch_align2D_fptrunc_64ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_18_reg_5258,
        dout => wTL_fu_2013_p1);

    batch_align2D_fptrunc_64ns_32_1_1_U139 : component batch_align2D_fptrunc_64ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_19_reg_5263,
        dout => wTR_fu_2016_p1);

    batch_align2D_fptrunc_64ns_32_1_1_U140 : component batch_align2D_fptrunc_64ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_20_reg_5268,
        dout => wBL_fu_2019_p1);

    batch_align2D_fpext_32ns_64_1_1_U141 : component batch_align2D_fpext_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_2064,
        dout => tmp_8_fu_2022_p1);

    batch_align2D_fpext_32ns_64_1_1_U142 : component batch_align2D_fpext_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => subpix_y_reg_5228,
        dout => tmp_16_fu_2025_p1);

    batch_align2D_dsub_64ns_64ns_64_5_full_dsp_1_U143 : component batch_align2D_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => tmp_8_fu_2022_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2028_p2);

    batch_align2D_dsub_64ns_64ns_64_5_full_dsp_1_U144 : component batch_align2D_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => tmp_16_fu_2025_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2034_p2);

    batch_align2D_dmul_64ns_64ns_64_5_max_dsp_1_U145 : component batch_align2D_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_10_reg_5246,
        din1 => tmp_17_reg_5252,
        ce => ap_const_logic_1,
        dout => grp_fu_2040_p2);

    batch_align2D_dmul_64ns_64ns_64_5_max_dsp_1_U146 : component batch_align2D_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_5234,
        din1 => tmp_17_reg_5252,
        ce => ap_const_logic_1,
        dout => grp_fu_2044_p2);

    batch_align2D_dmul_64ns_64ns_64_5_max_dsp_1_U147 : component batch_align2D_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_10_reg_5246,
        din1 => tmp_16_reg_5240,
        ce => ap_const_logic_1,
        dout => grp_fu_2048_p2);

    batch_align2D_mux_1007_8_1_1_U148 : component batch_align2D_mux_1007_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 8,
        din65_WIDTH => 8,
        din66_WIDTH => 8,
        din67_WIDTH => 8,
        din68_WIDTH => 8,
        din69_WIDTH => 8,
        din70_WIDTH => 8,
        din71_WIDTH => 8,
        din72_WIDTH => 8,
        din73_WIDTH => 8,
        din74_WIDTH => 8,
        din75_WIDTH => 8,
        din76_WIDTH => 8,
        din77_WIDTH => 8,
        din78_WIDTH => 8,
        din79_WIDTH => 8,
        din80_WIDTH => 8,
        din81_WIDTH => 8,
        din82_WIDTH => 8,
        din83_WIDTH => 8,
        din84_WIDTH => 8,
        din85_WIDTH => 8,
        din86_WIDTH => 8,
        din87_WIDTH => 8,
        din88_WIDTH => 8,
        din89_WIDTH => 8,
        din90_WIDTH => 8,
        din91_WIDTH => 8,
        din92_WIDTH => 8,
        din93_WIDTH => 8,
        din94_WIDTH => 8,
        din95_WIDTH => 8,
        din96_WIDTH => 8,
        din97_WIDTH => 8,
        din98_WIDTH => 8,
        din99_WIDTH => 8,
        din100_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => p_read10,
        din11 => p_read11,
        din12 => p_read12,
        din13 => p_read13,
        din14 => p_read14,
        din15 => p_read15,
        din16 => p_read16,
        din17 => p_read17,
        din18 => p_read18,
        din19 => p_read19,
        din20 => p_read20,
        din21 => p_read21,
        din22 => p_read22,
        din23 => p_read23,
        din24 => p_read24,
        din25 => p_read25,
        din26 => p_read26,
        din27 => p_read27,
        din28 => p_read28,
        din29 => p_read29,
        din30 => p_read30,
        din31 => p_read31,
        din32 => p_read32,
        din33 => p_read33,
        din34 => p_read34,
        din35 => p_read35,
        din36 => p_read36,
        din37 => p_read37,
        din38 => p_read38,
        din39 => p_read39,
        din40 => p_read40,
        din41 => p_read41,
        din42 => p_read42,
        din43 => p_read43,
        din44 => p_read44,
        din45 => p_read45,
        din46 => p_read46,
        din47 => p_read47,
        din48 => p_read48,
        din49 => p_read49,
        din50 => p_read50,
        din51 => p_read51,
        din52 => p_read52,
        din53 => p_read53,
        din54 => p_read54,
        din55 => p_read55,
        din56 => p_read56,
        din57 => p_read57,
        din58 => p_read58,
        din59 => p_read59,
        din60 => p_read60,
        din61 => p_read61,
        din62 => p_read62,
        din63 => p_read63,
        din64 => p_read64,
        din65 => p_read65,
        din66 => p_read66,
        din67 => p_read67,
        din68 => p_read68,
        din69 => p_read69,
        din70 => p_read70,
        din71 => p_read71,
        din72 => p_read72,
        din73 => p_read73,
        din74 => p_read74,
        din75 => p_read75,
        din76 => p_read76,
        din77 => p_read77,
        din78 => p_read78,
        din79 => p_read79,
        din80 => p_read80,
        din81 => p_read81,
        din82 => p_read82,
        din83 => p_read83,
        din84 => p_read84,
        din85 => p_read85,
        din86 => p_read86,
        din87 => p_read87,
        din88 => p_read88,
        din89 => p_read89,
        din90 => p_read90,
        din91 => p_read91,
        din92 => p_read92,
        din93 => p_read93,
        din94 => p_read94,
        din95 => p_read95,
        din96 => p_read96,
        din97 => p_read97,
        din98 => p_read98,
        din99 => p_read99,
        din100 => sum_t_fu_3009_p2,
        dout => tmp_35_fu_3026_p102);

    batch_align2D_mux_1007_8_1_1_U149 : component batch_align2D_mux_1007_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 8,
        din65_WIDTH => 8,
        din66_WIDTH => 8,
        din67_WIDTH => 8,
        din68_WIDTH => 8,
        din69_WIDTH => 8,
        din70_WIDTH => 8,
        din71_WIDTH => 8,
        din72_WIDTH => 8,
        din73_WIDTH => 8,
        din74_WIDTH => 8,
        din75_WIDTH => 8,
        din76_WIDTH => 8,
        din77_WIDTH => 8,
        din78_WIDTH => 8,
        din79_WIDTH => 8,
        din80_WIDTH => 8,
        din81_WIDTH => 8,
        din82_WIDTH => 8,
        din83_WIDTH => 8,
        din84_WIDTH => 8,
        din85_WIDTH => 8,
        din86_WIDTH => 8,
        din87_WIDTH => 8,
        din88_WIDTH => 8,
        din89_WIDTH => 8,
        din90_WIDTH => 8,
        din91_WIDTH => 8,
        din92_WIDTH => 8,
        din93_WIDTH => 8,
        din94_WIDTH => 8,
        din95_WIDTH => 8,
        din96_WIDTH => 8,
        din97_WIDTH => 8,
        din98_WIDTH => 8,
        din99_WIDTH => 8,
        din100_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => p_read10,
        din11 => p_read11,
        din12 => p_read12,
        din13 => p_read13,
        din14 => p_read14,
        din15 => p_read15,
        din16 => p_read16,
        din17 => p_read17,
        din18 => p_read18,
        din19 => p_read19,
        din20 => p_read20,
        din21 => p_read21,
        din22 => p_read22,
        din23 => p_read23,
        din24 => p_read24,
        din25 => p_read25,
        din26 => p_read26,
        din27 => p_read27,
        din28 => p_read28,
        din29 => p_read29,
        din30 => p_read30,
        din31 => p_read31,
        din32 => p_read32,
        din33 => p_read33,
        din34 => p_read34,
        din35 => p_read35,
        din36 => p_read36,
        din37 => p_read37,
        din38 => p_read38,
        din39 => p_read39,
        din40 => p_read40,
        din41 => p_read41,
        din42 => p_read42,
        din43 => p_read43,
        din44 => p_read44,
        din45 => p_read45,
        din46 => p_read46,
        din47 => p_read47,
        din48 => p_read48,
        din49 => p_read49,
        din50 => p_read50,
        din51 => p_read51,
        din52 => p_read52,
        din53 => p_read53,
        din54 => p_read54,
        din55 => p_read55,
        din56 => p_read56,
        din57 => p_read57,
        din58 => p_read58,
        din59 => p_read59,
        din60 => p_read60,
        din61 => p_read61,
        din62 => p_read62,
        din63 => p_read63,
        din64 => p_read64,
        din65 => p_read65,
        din66 => p_read66,
        din67 => p_read67,
        din68 => p_read68,
        din69 => p_read69,
        din70 => p_read70,
        din71 => p_read71,
        din72 => p_read72,
        din73 => p_read73,
        din74 => p_read74,
        din75 => p_read75,
        din76 => p_read76,
        din77 => p_read77,
        din78 => p_read78,
        din79 => p_read79,
        din80 => p_read80,
        din81 => p_read81,
        din82 => p_read82,
        din83 => p_read83,
        din84 => p_read84,
        din85 => p_read85,
        din86 => p_read86,
        din87 => p_read87,
        din88 => p_read88,
        din89 => p_read89,
        din90 => p_read90,
        din91 => p_read91,
        din92 => p_read92,
        din93 => p_read93,
        din94 => p_read94,
        din95 => p_read95,
        din96 => p_read96,
        din97 => p_read97,
        din98 => p_read98,
        din99 => p_read99,
        din100 => sum6_t_fu_3132_p2,
        dout => tmp_39_fu_3138_p102);

    batch_align2D_mux_1007_8_1_1_U150 : component batch_align2D_mux_1007_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 8,
        din65_WIDTH => 8,
        din66_WIDTH => 8,
        din67_WIDTH => 8,
        din68_WIDTH => 8,
        din69_WIDTH => 8,
        din70_WIDTH => 8,
        din71_WIDTH => 8,
        din72_WIDTH => 8,
        din73_WIDTH => 8,
        din74_WIDTH => 8,
        din75_WIDTH => 8,
        din76_WIDTH => 8,
        din77_WIDTH => 8,
        din78_WIDTH => 8,
        din79_WIDTH => 8,
        din80_WIDTH => 8,
        din81_WIDTH => 8,
        din82_WIDTH => 8,
        din83_WIDTH => 8,
        din84_WIDTH => 8,
        din85_WIDTH => 8,
        din86_WIDTH => 8,
        din87_WIDTH => 8,
        din88_WIDTH => 8,
        din89_WIDTH => 8,
        din90_WIDTH => 8,
        din91_WIDTH => 8,
        din92_WIDTH => 8,
        din93_WIDTH => 8,
        din94_WIDTH => 8,
        din95_WIDTH => 8,
        din96_WIDTH => 8,
        din97_WIDTH => 8,
        din98_WIDTH => 8,
        din99_WIDTH => 8,
        din100_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => p_read10,
        din11 => p_read11,
        din12 => p_read12,
        din13 => p_read13,
        din14 => p_read14,
        din15 => p_read15,
        din16 => p_read16,
        din17 => p_read17,
        din18 => p_read18,
        din19 => p_read19,
        din20 => p_read20,
        din21 => p_read21,
        din22 => p_read22,
        din23 => p_read23,
        din24 => p_read24,
        din25 => p_read25,
        din26 => p_read26,
        din27 => p_read27,
        din28 => p_read28,
        din29 => p_read29,
        din30 => p_read30,
        din31 => p_read31,
        din32 => p_read32,
        din33 => p_read33,
        din34 => p_read34,
        din35 => p_read35,
        din36 => p_read36,
        din37 => p_read37,
        din38 => p_read38,
        din39 => p_read39,
        din40 => p_read40,
        din41 => p_read41,
        din42 => p_read42,
        din43 => p_read43,
        din44 => p_read44,
        din45 => p_read45,
        din46 => p_read46,
        din47 => p_read47,
        din48 => p_read48,
        din49 => p_read49,
        din50 => p_read50,
        din51 => p_read51,
        din52 => p_read52,
        din53 => p_read53,
        din54 => p_read54,
        din55 => p_read55,
        din56 => p_read56,
        din57 => p_read57,
        din58 => p_read58,
        din59 => p_read59,
        din60 => p_read60,
        din61 => p_read61,
        din62 => p_read62,
        din63 => p_read63,
        din64 => p_read64,
        din65 => p_read65,
        din66 => p_read66,
        din67 => p_read67,
        din68 => p_read68,
        din69 => p_read69,
        din70 => p_read70,
        din71 => p_read71,
        din72 => p_read72,
        din73 => p_read73,
        din74 => p_read74,
        din75 => p_read75,
        din76 => p_read76,
        din77 => p_read77,
        din78 => p_read78,
        din79 => p_read79,
        din80 => p_read80,
        din81 => p_read81,
        din82 => p_read82,
        din83 => p_read83,
        din84 => p_read84,
        din85 => p_read85,
        din86 => p_read86,
        din87 => p_read87,
        din88 => p_read88,
        din89 => p_read89,
        din90 => p_read90,
        din91 => p_read91,
        din92 => p_read92,
        din93 => p_read93,
        din94 => p_read94,
        din95 => p_read95,
        din96 => p_read96,
        din97 => p_read97,
        din98 => p_read98,
        din99 => p_read99,
        din100 => tmp_43_fu_3249_p101,
        dout => tmp_43_fu_3249_p102);

    batch_align2D_mux_1007_8_1_1_U151 : component batch_align2D_mux_1007_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 8,
        din65_WIDTH => 8,
        din66_WIDTH => 8,
        din67_WIDTH => 8,
        din68_WIDTH => 8,
        din69_WIDTH => 8,
        din70_WIDTH => 8,
        din71_WIDTH => 8,
        din72_WIDTH => 8,
        din73_WIDTH => 8,
        din74_WIDTH => 8,
        din75_WIDTH => 8,
        din76_WIDTH => 8,
        din77_WIDTH => 8,
        din78_WIDTH => 8,
        din79_WIDTH => 8,
        din80_WIDTH => 8,
        din81_WIDTH => 8,
        din82_WIDTH => 8,
        din83_WIDTH => 8,
        din84_WIDTH => 8,
        din85_WIDTH => 8,
        din86_WIDTH => 8,
        din87_WIDTH => 8,
        din88_WIDTH => 8,
        din89_WIDTH => 8,
        din90_WIDTH => 8,
        din91_WIDTH => 8,
        din92_WIDTH => 8,
        din93_WIDTH => 8,
        din94_WIDTH => 8,
        din95_WIDTH => 8,
        din96_WIDTH => 8,
        din97_WIDTH => 8,
        din98_WIDTH => 8,
        din99_WIDTH => 8,
        din100_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => p_read10,
        din11 => p_read11,
        din12 => p_read12,
        din13 => p_read13,
        din14 => p_read14,
        din15 => p_read15,
        din16 => p_read16,
        din17 => p_read17,
        din18 => p_read18,
        din19 => p_read19,
        din20 => p_read20,
        din21 => p_read21,
        din22 => p_read22,
        din23 => p_read23,
        din24 => p_read24,
        din25 => p_read25,
        din26 => p_read26,
        din27 => p_read27,
        din28 => p_read28,
        din29 => p_read29,
        din30 => p_read30,
        din31 => p_read31,
        din32 => p_read32,
        din33 => p_read33,
        din34 => p_read34,
        din35 => p_read35,
        din36 => p_read36,
        din37 => p_read37,
        din38 => p_read38,
        din39 => p_read39,
        din40 => p_read40,
        din41 => p_read41,
        din42 => p_read42,
        din43 => p_read43,
        din44 => p_read44,
        din45 => p_read45,
        din46 => p_read46,
        din47 => p_read47,
        din48 => p_read48,
        din49 => p_read49,
        din50 => p_read50,
        din51 => p_read51,
        din52 => p_read52,
        din53 => p_read53,
        din54 => p_read54,
        din55 => p_read55,
        din56 => p_read56,
        din57 => p_read57,
        din58 => p_read58,
        din59 => p_read59,
        din60 => p_read60,
        din61 => p_read61,
        din62 => p_read62,
        din63 => p_read63,
        din64 => p_read64,
        din65 => p_read65,
        din66 => p_read66,
        din67 => p_read67,
        din68 => p_read68,
        din69 => p_read69,
        din70 => p_read70,
        din71 => p_read71,
        din72 => p_read72,
        din73 => p_read73,
        din74 => p_read74,
        din75 => p_read75,
        din76 => p_read76,
        din77 => p_read77,
        din78 => p_read78,
        din79 => p_read79,
        din80 => p_read80,
        din81 => p_read81,
        din82 => p_read82,
        din83 => p_read83,
        din84 => p_read84,
        din85 => p_read85,
        din86 => p_read86,
        din87 => p_read87,
        din88 => p_read88,
        din89 => p_read89,
        din90 => p_read90,
        din91 => p_read91,
        din92 => p_read92,
        din93 => p_read93,
        din94 => p_read94,
        din95 => p_read95,
        din96 => p_read96,
        din97 => p_read97,
        din98 => p_read98,
        din99 => p_read99,
        din100 => tmp_47_fu_3360_p101,
        dout => tmp_47_fu_3360_p102);

    batch_align2D_mux_1007_8_1_1_U152 : component batch_align2D_mux_1007_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 8,
        din65_WIDTH => 8,
        din66_WIDTH => 8,
        din67_WIDTH => 8,
        din68_WIDTH => 8,
        din69_WIDTH => 8,
        din70_WIDTH => 8,
        din71_WIDTH => 8,
        din72_WIDTH => 8,
        din73_WIDTH => 8,
        din74_WIDTH => 8,
        din75_WIDTH => 8,
        din76_WIDTH => 8,
        din77_WIDTH => 8,
        din78_WIDTH => 8,
        din79_WIDTH => 8,
        din80_WIDTH => 8,
        din81_WIDTH => 8,
        din82_WIDTH => 8,
        din83_WIDTH => 8,
        din84_WIDTH => 8,
        din85_WIDTH => 8,
        din86_WIDTH => 8,
        din87_WIDTH => 8,
        din88_WIDTH => 8,
        din89_WIDTH => 8,
        din90_WIDTH => 8,
        din91_WIDTH => 8,
        din92_WIDTH => 8,
        din93_WIDTH => 8,
        din94_WIDTH => 8,
        din95_WIDTH => 8,
        din96_WIDTH => 8,
        din97_WIDTH => 8,
        din98_WIDTH => 8,
        din99_WIDTH => 8,
        din100_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => p_read10,
        din11 => p_read11,
        din12 => p_read12,
        din13 => p_read13,
        din14 => p_read14,
        din15 => p_read15,
        din16 => p_read16,
        din17 => p_read17,
        din18 => p_read18,
        din19 => p_read19,
        din20 => p_read20,
        din21 => p_read21,
        din22 => p_read22,
        din23 => p_read23,
        din24 => p_read24,
        din25 => p_read25,
        din26 => p_read26,
        din27 => p_read27,
        din28 => p_read28,
        din29 => p_read29,
        din30 => p_read30,
        din31 => p_read31,
        din32 => p_read32,
        din33 => p_read33,
        din34 => p_read34,
        din35 => p_read35,
        din36 => p_read36,
        din37 => p_read37,
        din38 => p_read38,
        din39 => p_read39,
        din40 => p_read40,
        din41 => p_read41,
        din42 => p_read42,
        din43 => p_read43,
        din44 => p_read44,
        din45 => p_read45,
        din46 => p_read46,
        din47 => p_read47,
        din48 => p_read48,
        din49 => p_read49,
        din50 => p_read50,
        din51 => p_read51,
        din52 => p_read52,
        din53 => p_read53,
        din54 => p_read54,
        din55 => p_read55,
        din56 => p_read56,
        din57 => p_read57,
        din58 => p_read58,
        din59 => p_read59,
        din60 => p_read60,
        din61 => p_read61,
        din62 => p_read62,
        din63 => p_read63,
        din64 => p_read64,
        din65 => p_read65,
        din66 => p_read66,
        din67 => p_read67,
        din68 => p_read68,
        din69 => p_read69,
        din70 => p_read70,
        din71 => p_read71,
        din72 => p_read72,
        din73 => p_read73,
        din74 => p_read74,
        din75 => p_read75,
        din76 => p_read76,
        din77 => p_read77,
        din78 => p_read78,
        din79 => p_read79,
        din80 => p_read80,
        din81 => p_read81,
        din82 => p_read82,
        din83 => p_read83,
        din84 => p_read84,
        din85 => p_read85,
        din86 => p_read86,
        din87 => p_read87,
        din88 => p_read88,
        din89 => p_read89,
        din90 => p_read90,
        din91 => p_read91,
        din92 => p_read92,
        din93 => p_read93,
        din94 => p_read94,
        din95 => p_read95,
        din96 => p_read96,
        din97 => p_read97,
        din98 => p_read98,
        din99 => p_read99,
        din100 => tmp_52_fu_3485_p101,
        dout => tmp_52_fu_3485_p102);

    batch_align2D_mux_646_32_1_1_U153 : component batch_align2D_mux_646_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 32,
        din61_WIDTH => 32,
        din62_WIDTH => 32,
        din63_WIDTH => 32,
        din64_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => p_read109,
        din1 => p_read110,
        din2 => p_read111,
        din3 => p_read112,
        din4 => p_read113,
        din5 => p_read114,
        din6 => p_read115,
        din7 => p_read116,
        din8 => p_read117,
        din9 => p_read118,
        din10 => p_read119,
        din11 => p_read120,
        din12 => p_read121,
        din13 => p_read122,
        din14 => p_read123,
        din15 => p_read124,
        din16 => p_read125,
        din17 => p_read126,
        din18 => p_read127,
        din19 => p_read128,
        din20 => p_read129,
        din21 => p_read130,
        din22 => p_read131,
        din23 => p_read132,
        din24 => p_read133,
        din25 => p_read134,
        din26 => p_read135,
        din27 => p_read136,
        din28 => p_read137,
        din29 => p_read138,
        din30 => p_read139,
        din31 => p_read140,
        din32 => p_read141,
        din33 => p_read142,
        din34 => p_read143,
        din35 => p_read144,
        din36 => p_read145,
        din37 => p_read146,
        din38 => p_read147,
        din39 => p_read148,
        din40 => p_read149,
        din41 => p_read150,
        din42 => p_read151,
        din43 => p_read152,
        din44 => p_read153,
        din45 => p_read154,
        din46 => p_read155,
        din47 => p_read156,
        din48 => p_read157,
        din49 => p_read158,
        din50 => p_read159,
        din51 => p_read160,
        din52 => p_read161,
        din53 => p_read162,
        din54 => p_read163,
        din55 => p_read164,
        din56 => p_read165,
        din57 => p_read166,
        din58 => p_read167,
        din59 => p_read168,
        din60 => p_read169,
        din61 => p_read170,
        din62 => p_read171,
        din63 => p_read172,
        din64 => tmp_58_fu_3600_p65,
        dout => tmp_58_fu_3600_p66);

    batch_align2D_mux_94_32_1_1_U154 : component batch_align2D_mux_94_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => p_read100,
        din1 => p_read101,
        din2 => p_read102,
        din3 => p_read103,
        din4 => p_read104,
        din5 => p_read105,
        din6 => p_read106,
        din7 => p_read107,
        din8 => p_read108,
        din9 => tmp_64_fu_3751_p10,
        dout => tmp_64_fu_3751_p11);

    batch_align2D_mux_32_32_1_1_U155 : component batch_align2D_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => Jres_0_reg_1669,
        din1 => Jres_1_reg_1657,
        din2 => Jres_2_reg_1645,
        din3 => j_0_i_reg_1910,
        dout => tmp_65_fu_3766_p5);

    batch_align2D_ama_addmuladd_7ns_3s_7s_7ns_7_1_1_U156 : component batch_align2D_ama_addmuladd_7ns_3s_7s_7ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 7)
    port map (
        din0 => tmp_84_reg_5218,
        din1 => tmp45_fu_2961_p2,
        din2 => tmp_3_reg_5127,
        din3 => tmp_85_reg_5223,
        dout => grp_fu_3793_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((exitcond3_fu_2199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_0_preg <= x_assign_reg_1614;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((exitcond3_fu_2199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_1_preg <= x_assign_1_reg_1624;
                end if; 
            end if;
        end if;
    end process;


    Jres_0_reg_1669_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                Jres_0_reg_1669 <= Jres_0_s_reg_1752;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                Jres_0_reg_1669 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    Jres_0_s_reg_1752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                Jres_0_s_reg_1752 <= grp_fu_1966_p2;
            elsif (((exitcond2_fu_2945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                Jres_0_s_reg_1752 <= Jres_0_reg_1669;
            end if; 
        end if;
    end process;

    Jres_1_reg_1657_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                Jres_1_reg_1657 <= Jres_1_s_reg_1740;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                Jres_1_reg_1657 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    Jres_1_s_reg_1740_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                Jres_1_s_reg_1740 <= grp_fu_1971_p2;
            elsif (((exitcond2_fu_2945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                Jres_1_s_reg_1740 <= Jres_1_reg_1657;
            end if; 
        end if;
    end process;

    Jres_2_reg_1645_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                Jres_2_reg_1645 <= Jres_2_s_reg_1728;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                Jres_2_reg_1645 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    Jres_2_s_reg_1728_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                Jres_2_s_reg_1728 <= reg_2084;
            elsif (((exitcond2_fu_2945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                Jres_2_s_reg_1728 <= Jres_2_reg_1645;
            end if; 
        end if;
    end process;

    i_0_i_reg_1811_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_2945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_0_i_reg_1811 <= ap_const_lv2_0;
            elsif (((exitcond_i_fu_3730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                i_0_i_reg_1811 <= i_reg_5445;
            end if; 
        end if;
    end process;

    invdar_reg_1591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_2160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_1591 <= indvarinc_fu_2102_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_1591 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    it_0_rec_reg_1800_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                it_0_rec_reg_1800 <= x_reg_5314;
            elsif (((exitcond2_fu_2945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                it_0_rec_reg_1800 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iter_reg_1634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                iter_reg_1634 <= iter_1_reg_5137;
            elsif (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iter_reg_1634 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_1910_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                j_0_i_reg_1910 <= j_reg_5458;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                j_0_i_reg_1910 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mean_diff_reg_1602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                mean_diff_reg_1602 <= reg_2064;
            elsif (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mean_diff_reg_1602 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_23_reg_1681_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                tmp_23_reg_1681 <= tmp_30_reg_1764;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                tmp_23_reg_1681 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_24_reg_1693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                tmp_24_reg_1693 <= tmp_31_reg_1776;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                tmp_24_reg_1693 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_25_reg_1705_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                tmp_25_reg_1705 <= tmp_32_reg_1788;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                tmp_25_reg_1705 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_30_reg_1764_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                tmp_30_reg_1764 <= reg_2084;
            elsif (((exitcond2_fu_2945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                tmp_30_reg_1764 <= tmp_23_reg_1681;
            end if; 
        end if;
    end process;

    tmp_31_reg_1776_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                tmp_31_reg_1776 <= grp_fu_1971_p2;
            elsif (((exitcond2_fu_2945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                tmp_31_reg_1776 <= tmp_24_reg_1693;
            end if; 
        end if;
    end process;

    tmp_32_reg_1788_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                tmp_32_reg_1788 <= grp_fu_1966_p2;
            elsif (((exitcond2_fu_2945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                tmp_32_reg_1788 <= tmp_25_reg_1705;
            end if; 
        end if;
    end process;

    tmp_61_reg_1898_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                tmp_61_reg_1898 <= update_0_reg_5473;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                tmp_61_reg_1898 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    update_0_4_reg_1851_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_0) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                update_0_4_reg_1851 <= ap_const_lv32_0;
            elsif ((((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_1) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)) or (not((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_0)) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
                update_0_4_reg_1851 <= update_2_15_fu_498;
            end if; 
        end if;
    end process;

    update_0_5_be_reg_1951_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_i_reg_1811 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                update_0_5_be_reg_1951 <= grp_fu_1966_p2;
            elsif ((((i_0_i_reg_1811 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state62)) or (not((i_0_i_reg_1811 = ap_const_lv2_1)) and not((i_0_i_reg_1811 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
                update_0_5_be_reg_1951 <= update_0_5_reg_1887;
            end if; 
        end if;
    end process;

    update_0_5_reg_1887_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                update_0_5_reg_1887 <= update_0_5_be_reg_1951;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                update_0_5_reg_1887 <= update_0_4_reg_1851;
            end if; 
        end if;
    end process;

    update_1_4_reg_1837_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_1) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                update_1_4_reg_1837 <= ap_const_lv32_0;
            elsif (((not((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_0)) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_0) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
                update_1_4_reg_1837 <= update_2_1_16_fu_502;
            end if; 
        end if;
    end process;

    update_1_5_be_reg_1936_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_i_reg_1811 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                update_1_5_be_reg_1936 <= grp_fu_1966_p2;
            elsif (((not((i_0_i_reg_1811 = ap_const_lv2_1)) and not((i_0_i_reg_1811 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((i_0_i_reg_1811 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
                update_1_5_be_reg_1936 <= update_1_5_reg_1876;
            end if; 
        end if;
    end process;

    update_1_5_reg_1876_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                update_1_5_reg_1876 <= update_1_5_be_reg_1936;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                update_1_5_reg_1876 <= update_1_4_reg_1837;
            end if; 
        end if;
    end process;

    update_2_15_fu_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_3730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                update_2_15_fu_498 <= update_0_5_reg_1887;
            elsif (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                update_2_15_fu_498 <= update_0_1_fu_2128_p3;
            end if; 
        end if;
    end process;

    update_2_1_16_fu_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_3730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                update_2_1_16_fu_502 <= update_1_5_reg_1876;
            elsif (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                update_2_1_16_fu_502 <= update_1_1_fu_2136_p3;
            end if; 
        end if;
    end process;

    update_2_2_fu_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_3730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                update_2_2_fu_506 <= update_2_5_reg_1865;
            elsif (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                update_2_2_fu_506 <= update_2_1_fu_2152_p3;
            end if; 
        end if;
    end process;

    update_2_4_reg_1823_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_1) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_0) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
                update_2_4_reg_1823 <= update_2_2_fu_506;
            elsif ((not((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_0_i_phi_fu_1815_p4 = ap_const_lv2_0)) and (exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                update_2_4_reg_1823 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    update_2_5_be_reg_1921_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((i_0_i_reg_1811 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((i_0_i_reg_1811 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
                update_2_5_be_reg_1921 <= update_2_5_reg_1865;
            elsif ((not((i_0_i_reg_1811 = ap_const_lv2_1)) and not((i_0_i_reg_1811 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                update_2_5_be_reg_1921 <= grp_fu_1966_p2;
            end if; 
        end if;
    end process;

    update_2_5_reg_1865_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                update_2_5_reg_1865 <= update_2_5_be_reg_1921;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                update_2_5_reg_1865 <= update_2_4_reg_1823;
            end if; 
        end if;
    end process;

    x_assign_1_reg_1624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                x_assign_1_reg_1624 <= grp_fu_1971_p2;
            elsif (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_assign_1_reg_1624 <= cur_px_estimate_1_r;
            end if; 
        end if;
    end process;

    x_assign_reg_1614_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                x_assign_reg_1614 <= grp_fu_1966_p2;
            elsif (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_assign_reg_1614 <= cur_px_estimate_0_r;
            end if; 
        end if;
    end process;

    y_reg_1717_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                y_reg_1717 <= y_1_reg_5291;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                y_reg_1717 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                    i_0_i_cast_reg_5437(1 downto 0) <= i_0_i_cast_fu_3701_p1(1 downto 0);
                i_reg_5445 <= i_fu_3711_p2;
                update_2_2_load_reg_5430 <= update_2_2_fu_506;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                iter_1_reg_5137 <= iter_1_fu_2205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                j_reg_5458 <= j_fu_3736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_2199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_Result_14_reg_5175 <= p_Val2_15_fu_2256_p1(31 downto 31);
                p_Result_s_reg_5142 <= p_Val2_s_fu_2211_p1(31 downto 31);
                tmp_15_reg_5170 <= tmp_15_fu_2252_p1;
                tmp_77_reg_5203 <= tmp_77_fu_2297_p1;
                tmp_V_1_reg_5159 <= tmp_V_1_fu_2233_p1;
                tmp_V_6_reg_5184 <= p_Val2_15_fu_2256_p1(30 downto 23);
                tmp_V_7_reg_5192 <= tmp_V_7_fu_2278_p1;
                tmp_V_reg_5151 <= p_Val2_s_fu_2211_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_30_reg_5208 <= p_Val2_30_fu_2617_p3;
                p_Val2_32_reg_5213 <= p_Val2_32_fu_2929_p3;
                tmp_84_reg_5218 <= tmp_84_fu_2937_p1;
                tmp_85_reg_5223 <= tmp_85_fu_2941_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_2945_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    p_shl_reg_5296(5 downto 3) <= p_shl_fu_2971_p3(5 downto 3);
                tmp46_reg_5301 <= grp_fu_3793_p4;
                    tmp62_reg_5306(6 downto 1) <= tmp62_fu_2993_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_2052 <= grp_fu_2001_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_2058 <= grp_fu_2004_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_2064 <= grp_fu_1966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_2071 <= grp_fu_1983_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_2078 <= grp_fu_1987_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
                reg_2084 <= grp_fu_1966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                subpix_y_reg_5228 <= grp_fu_1971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp59_reg_5384 <= grp_fu_1995_p2;
                tmp_46_reg_5379 <= grp_fu_1991_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp61_reg_5394 <= grp_fu_1966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_10_reg_5246 <= grp_fu_2028_p2;
                tmp_17_reg_5252 <= grp_fu_2034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_16_reg_5240 <= tmp_16_fu_2025_p1;
                tmp_8_reg_5234 <= tmp_8_fu_2022_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_18_reg_5258 <= grp_fu_2040_p2;
                tmp_19_reg_5263 <= grp_fu_2044_p2;
                tmp_20_reg_5268 <= grp_fu_2048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3014_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                tmp_35_reg_5319 <= tmp_35_fu_3026_p102;
                tmp_39_reg_5324 <= tmp_39_fu_3138_p102;
                tmp_43_reg_5329 <= tmp_43_fu_3249_p102;
                tmp_47_reg_5334 <= tmp_47_fu_3360_p102;
                tmp_52_reg_5339 <= tmp_52_fu_3485_p102;
                tmp_58_reg_5344 <= tmp_58_fu_3600_p66;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_3_reg_5127 <= tmp_3_fu_2181_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_45_reg_5369 <= grp_fu_2007_p1;
                tmp_49_reg_5374 <= grp_fu_2010_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_50_reg_5389 <= grp_fu_1983_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                tmp_60_reg_5450 <= tmp_60_fu_3725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_3730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                tmp_64_reg_5463 <= tmp_64_fu_3751_p11;
                tmp_65_reg_5468 <= tmp_65_fu_3766_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                update_0_reg_5473 <= grp_fu_1966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                update_1_fu_490 <= update_1_1_fu_2136_p3;
                update_2_fu_494 <= update_2_1_fu_2152_p3;
                update_fu_486 <= update_0_1_fu_2128_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                wBL_reg_5283 <= wBL_fu_2019_p1;
                wTL_reg_5273 <= wTL_fu_2013_p1;
                wTR_reg_5278 <= wTR_fu_2016_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                x_reg_5314 <= x_fu_3020_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                y_1_reg_5291 <= y_1_fu_2951_p2;
            end if;
        end if;
    end process;
    p_shl_reg_5296(2 downto 0) <= "000";
    tmp62_reg_5306(0) <= '0';
    i_0_i_cast_reg_5437(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_2160_p2, ap_CS_fsm_state3, exitcond3_fu_2199_p2, ap_CS_fsm_state23, exitcond2_fu_2945_p2, ap_CS_fsm_state24, exitcond4_fu_3014_p2, ap_CS_fsm_state54, ap_CS_fsm_state56, exitcond_i_fu_3730_p2, exitcond1_i_fu_3705_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_2160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_2199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((exitcond2_fu_2945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((exitcond4_fu_3014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state54 => 
                if (((exitcond1_i_fu_3705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((exitcond_i_fu_3730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond3_fu_2199_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond3_fu_2199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_i_phi_fu_1815_p4 <= i_0_i_reg_1811;

    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_2199_p2)
    begin
        if (((exitcond3_fu_2199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_2199_p2, x_assign_reg_1614, ap_return_0_preg)
    begin
        if (((exitcond3_fu_2199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_0 <= x_assign_reg_1614;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_2199_p2, x_assign_1_reg_1624, ap_return_1_preg)
    begin
        if (((exitcond3_fu_2199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_1 <= x_assign_1_reg_1624;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    exitcond1_i_fu_3705_p2 <= "1" when (i_0_i_reg_1811 = ap_const_lv2_3) else "0";
    exitcond2_fu_2945_p2 <= "1" when (y_reg_1717 = ap_const_lv4_8) else "0";
    exitcond3_fu_2199_p2 <= "1" when (iter_reg_1634 = ap_const_lv4_A) else "0";
    exitcond4_fu_3014_p2 <= "1" when (it_0_rec_reg_1800 = ap_const_lv4_8) else "0";
    exitcond_i_fu_3730_p2 <= "1" when (j_0_i_reg_1910 = ap_const_lv2_3) else "0";

    grp_fu_1966_opcode_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state8, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_1966_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_1966_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1966_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1966_p0_assign_proc : process(reg_2071, ap_CS_fsm_state64, reg_2084, tmp_46_reg_5379, tmp61_reg_5394, update_2_2_load_reg_5430, x_assign_reg_1614, tmp_30_reg_1764, tmp_32_reg_1788, ap_CS_fsm_state8, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_1966_p0 <= update_2_2_load_reg_5430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1966_p0 <= tmp_32_reg_1788;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1966_p0 <= tmp_30_reg_1764;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_1966_p0 <= reg_2084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_1966_p0 <= tmp61_reg_5394;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_1966_p0 <= tmp_46_reg_5379;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_1966_p0 <= reg_2071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_1966_p0 <= x_assign_reg_1614;
        else 
            grp_fu_1966_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1966_p1_assign_proc : process(reg_2052, reg_2071, ap_CS_fsm_state64, reg_2078, reg_2084, tmp_50_reg_5389, mean_diff_reg_1602, x_assign_reg_1614, tmp_61_reg_1898, ap_CS_fsm_state8, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_1966_p1 <= x_assign_reg_1614;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_1966_p1 <= tmp_61_reg_1898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1966_p1 <= reg_2071;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_fu_1966_p1 <= mean_diff_reg_1602;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_1966_p1 <= reg_2084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_1966_p1 <= tmp_50_reg_5389;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_1966_p1 <= reg_2078;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_1966_p1 <= reg_2052;
        else 
            grp_fu_1966_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1971_opcode_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state50, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_1971_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_1971_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1971_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1971_p0_assign_proc : process(reg_2078, x_assign_1_reg_1624, tmp_31_reg_1776, ap_CS_fsm_state8, ap_CS_fsm_state50, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_1971_p0 <= reg_2078;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1971_p0 <= tmp_31_reg_1776;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_1971_p0 <= x_assign_1_reg_1624;
        else 
            grp_fu_1971_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1971_p1_assign_proc : process(reg_2058, reg_2071, x_assign_1_reg_1624, ap_CS_fsm_state8, ap_CS_fsm_state50, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_1971_p1 <= x_assign_1_reg_1624;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1971_p1 <= reg_2071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_1971_p1 <= reg_2058;
        else 
            grp_fu_1971_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1983_p0_assign_proc : process(reg_2084, wTL_reg_5273, tmp59_reg_5384, ap_CS_fsm_state54, tmp_64_reg_5463, update_2_15_fu_498, ap_CS_fsm_state30, ap_CS_fsm_state48, ap_CS_fsm_state28, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_1983_p0 <= tmp_64_reg_5463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1983_p0 <= update_2_15_fu_498;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1983_p0 <= reg_2084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_1983_p0 <= tmp59_reg_5384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_1983_p0 <= wTL_reg_5273;
        else 
            grp_fu_1983_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1983_p1_assign_proc : process(reg_2052, reg_2064, tmp_58_reg_5344, ap_CS_fsm_state54, tmp_65_reg_5468, ap_CS_fsm_state30, ap_CS_fsm_state48, ap_CS_fsm_state28, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_1983_p1 <= tmp_65_reg_5468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1983_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1983_p1 <= tmp_58_reg_5344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_1983_p1 <= reg_2064;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_1983_p1 <= reg_2052;
        else 
            grp_fu_1983_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1987_p0_assign_proc : process(wTR_reg_5278, ap_CS_fsm_state54, update_2_1_16_fu_502, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1987_p0 <= update_2_1_16_fu_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_1987_p0 <= wTR_reg_5278;
        else 
            grp_fu_1987_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1987_p1_assign_proc : process(reg_2058, ap_CS_fsm_state54, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1987_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_1987_p1 <= reg_2058;
        else 
            grp_fu_1987_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_2001_p0_assign_proc : process(p_Val2_30_reg_5208, tmp_36_fu_3670_p1, ap_CS_fsm_state25, tmp_53_fu_3686_p1, ap_CS_fsm_state37, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_2001_p0 <= tmp_53_fu_3686_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_2001_p0 <= tmp_36_fu_3670_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_2001_p0 <= p_Val2_30_reg_5208;
        else 
            grp_fu_2001_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_2004_p0_assign_proc : process(p_Val2_32_reg_5213, ap_CS_fsm_state25, tmp_40_fu_3674_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_2004_p0 <= tmp_40_fu_3674_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_2004_p0 <= p_Val2_32_reg_5213;
        else 
            grp_fu_2004_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_2007_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_5329),32));
    grp_fu_2010_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_reg_5334),32));
    i_0_i_cast_fu_3701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_1811),4));
    i_fu_3711_p2 <= std_logic_vector(unsigned(i_0_i_reg_1811) + unsigned(ap_const_lv2_1));
    index_V_1_fu_2282_p4 <= p_Val2_15_fu_2256_p1(27 downto 23);
    index_V_fu_2237_p4 <= p_Val2_s_fu_2211_p1(27 downto 23);
    indvarinc_fu_2102_p2 <= std_logic_vector(unsigned(invdar_reg_1591) + unsigned(ap_const_lv2_1));
    isNeg_1_fu_2843_p3 <= sh_assign_3_fu_2837_p2(8 downto 8);
    isNeg_fu_2531_p3 <= sh_assign_fu_2525_p2(8 downto 8);
    iter_1_fu_2205_p2 <= std_logic_vector(unsigned(iter_reg_1634) + unsigned(ap_const_lv4_1));
    j_fu_3736_p2 <= std_logic_vector(unsigned(j_0_i_reg_1910) + unsigned(ap_const_lv2_1));
    mantissa_V_1_cast1_fu_2517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_2507_p4),79));
    mantissa_V_1_fu_2819_p4 <= ((ap_const_lv1_1 & tmp_V_11_fu_2815_p1) & ap_const_lv1_0);
    mantissa_V_3_cast1_fu_2829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_2819_p4),79));
    mantissa_V_fu_2507_p4 <= ((ap_const_lv1_1 & tmp_V_5_fu_2503_p1) & ap_const_lv1_0);
    mask_i186_cast_fu_2642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table2_q1),32));
    mask_i_cast_fu_2330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table2_q0),32));
    mask_table2_address0 <= tmp_8_i_fu_2247_p1(5 - 1 downto 0);
    mask_table2_address1 <= tmp_8_i1_fu_2292_p1(5 - 1 downto 0);

    mask_table2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mask_table2_ce0 <= ap_const_logic_1;
        else 
            mask_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mask_table2_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mask_table2_ce1 <= ap_const_logic_1;
        else 
            mask_table2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs_i1_fu_2758_p2 <= "0" when (tmp_V_7_reg_5192 = ap_const_lv23_0) else "1";
    notlhs_i_fu_2446_p2 <= "0" when (tmp_V_1_reg_5159 = ap_const_lv23_0) else "1";
    notrhs_i1_fu_2763_p2 <= "0" when (tmp_V_6_reg_5184 = ap_const_lv8_0) else "1";
    notrhs_i_fu_2451_p2 <= "0" when (tmp_V_reg_5151 = ap_const_lv8_0) else "1";
    p_Result_10_fu_2334_p3 <= (ap_const_lv1_1 & tmp_15_reg_5170);
    p_Result_11_fu_2347_p3 <= p_Val2_5_fu_2341_p2(31 downto 31);
    p_Result_12_fu_2398_p4 <= ((xs_sign_V_9_fu_2381_p2 & xs_exp_V_7_fu_2375_p3) & xs_sig_V_fu_2392_p2);
    p_Result_13_fu_2485_p3 <= p_Val2_9_fu_2477_p3(31 downto 31);
    p_Result_15_fu_2635_p3 <= (p_Result_14_reg_5175 & ap_const_lv31_0);
    p_Result_16_fu_2646_p3 <= (ap_const_lv1_1 & tmp_77_reg_5203);
    p_Result_17_fu_2659_p3 <= p_Val2_20_fu_2653_p2(31 downto 31);
    p_Result_18_fu_2710_p4 <= ((xs_sign_V_10_fu_2693_p2 & xs_exp_V_8_fu_2687_p3) & xs_sig_V_9_fu_2704_p2);
    p_Result_19_fu_2797_p3 <= p_Val2_24_fu_2789_p3(31 downto 31);
    p_Result_9_fu_2323_p3 <= (p_Result_s_reg_5142 & ap_const_lv31_0);
    p_Val2_15_fu_2256_p1 <= x_assign_1_reg_1624;
    p_Val2_20_fu_2653_p2 <= std_logic_vector(unsigned(p_Result_16_fu_2646_p3) + unsigned(mask_i186_cast_fu_2642_p1));
    p_Val2_24_fu_2789_p3 <= 
        ap_const_lv32_BF800000 when (sel_tmp9_i1_fu_2779_p2(0) = '1') else 
        tmp_22_fu_2785_p1;
    p_Val2_29_fu_2603_p3 <= 
        tmp_13_fu_2589_p1 when (isNeg_fu_2531_p3(0) = '1') else 
        tmp_21_fu_2593_p4;
    p_Val2_30_fu_2617_p3 <= 
        result_V_1_fu_2611_p2 when (p_Result_13_fu_2485_p3(0) = '1') else 
        p_Val2_29_fu_2603_p3;
    p_Val2_31_fu_2915_p3 <= 
        tmp_26_fu_2901_p1 when (isNeg_1_fu_2843_p3(0) = '1') else 
        tmp_28_fu_2905_p4;
    p_Val2_32_fu_2929_p3 <= 
        result_V_3_fu_2923_p2 when (p_Result_19_fu_2797_p3(0) = '1') else 
        p_Val2_31_fu_2915_p3;
    p_Val2_5_fu_2341_p2 <= std_logic_vector(unsigned(p_Result_10_fu_2334_p3) + unsigned(mask_i_cast_fu_2330_p1));
    p_Val2_9_fu_2477_p3 <= 
        ap_const_lv32_BF800000 when (sel_tmp9_i_fu_2467_p2(0) = '1') else 
        tmp_9_fu_2473_p1;
    p_Val2_s_fu_2211_p1 <= x_assign_reg_1614;
    p_shl2_fu_3717_p3 <= (i_0_i_reg_1811 & ap_const_lv2_0);
    p_shl_fu_2971_p3 <= (tmp_86_fu_2957_p1 & ap_const_lv3_0);
    r_V_1_fu_2575_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast1_fu_2517_p1),to_integer(unsigned('0' & tmp_i_i_i_19_fu_2565_p1(31-1 downto 0)))));
    r_V_2_fu_2881_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_2819_p4),to_integer(unsigned('0' & sh_assign_5_cast_cas_fu_2873_p1(25-1 downto 0)))));
    r_V_3_fu_2887_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_3_cast1_fu_2829_p1),to_integer(unsigned('0' & tmp_i_i_i1_21_fu_2877_p1(31-1 downto 0)))));
    r_V_fu_2569_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_2507_p4),to_integer(unsigned('0' & sh_assign_2_cast_cas_fu_2561_p1(25-1 downto 0)))));
    result_V_1_fu_2611_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_29_fu_2603_p3));
    result_V_3_fu_2923_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_31_fu_2915_p3));
    sel_tmp2_demorgan_i1_fu_2720_p2 <= (tmp_i1_fu_2625_p2 or tmp_5_i1_fu_2630_p2);
    sel_tmp2_demorgan_i_fu_2408_p2 <= (tmp_i_fu_2313_p2 or tmp_5_i_fu_2318_p2);
    sel_tmp3_i1_fu_2734_p1 <= sel_tmp3_v_i1_fu_2726_p3;
    sel_tmp3_i_fu_2422_p1 <= sel_tmp3_v_i_fu_2414_p3;
    sel_tmp3_v_i1_fu_2726_p3 <= 
        p_Result_15_fu_2635_p3 when (sel_tmp2_demorgan_i1_fu_2720_p2(0) = '1') else 
        p_Result_18_fu_2710_p4;
    sel_tmp3_v_i_fu_2414_p3 <= 
        p_Result_9_fu_2323_p3 when (sel_tmp2_demorgan_i_fu_2408_p2(0) = '1') else 
        p_Result_12_fu_2398_p4;
    sel_tmp4_i1_fu_2738_p2 <= (tmp_i1_fu_2625_p2 xor ap_const_lv1_1);
    sel_tmp4_i_fu_2426_p2 <= (tmp_i_fu_2313_p2 xor ap_const_lv1_1);
    sel_tmp5_i1_fu_2744_p2 <= (tmp_5_i1_fu_2630_p2 and sel_tmp4_i1_fu_2738_p2);
    sel_tmp5_i_fu_2432_p2 <= (tmp_5_i_fu_2318_p2 and sel_tmp4_i_fu_2426_p2);
    sel_tmp6_i1_fu_2750_p3 <= 
        x_assign_1_reg_1624 when (sel_tmp5_i1_fu_2744_p2(0) = '1') else 
        sel_tmp3_i1_fu_2734_p1;
    sel_tmp6_i_fu_2438_p3 <= 
        x_assign_reg_1614 when (sel_tmp5_i_fu_2432_p2(0) = '1') else 
        sel_tmp3_i_fu_2422_p1;
    sel_tmp8_i1_fu_2768_p2 <= (notrhs_i1_fu_2763_p2 or notlhs_i1_fu_2758_p2);
    sel_tmp8_i_fu_2456_p2 <= (notrhs_i_fu_2451_p2 or notlhs_i_fu_2446_p2);
    sel_tmp9_i1_fu_2779_p2 <= (tmp_i1_fu_2625_p2 and tmp31_fu_2774_p2);
    sel_tmp9_i_fu_2467_p2 <= (tmp_i_fu_2313_p2 and tmp4_fu_2462_p2);
        sh_assign_2_cast_cas_fu_2561_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_2549_p3),25));

        sh_assign_2_cast_fu_2557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_2549_p3),32));

    sh_assign_3_fu_2837_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i1_cast_fu_2833_p1));
        sh_assign_5_cast_cas_fu_2873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_2861_p3),25));

        sh_assign_5_cast_fu_2869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_2861_p3),32));

    sh_assign_fu_2525_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_2521_p1));
    sum6_t_fu_3132_p2 <= std_logic_vector(unsigned(sum_t_fu_3009_p2) + unsigned(ap_const_lv7_1));
    sum_t_fu_3009_p2 <= std_logic_vector(signed(tmp217_cast_fu_3005_p1) + signed(tmp46_reg_5301));
        tmp217_cast_fu_3005_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp47_fu_2999_p2),7));

    tmp223_cast_fu_3476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp63_fu_3470_p2),7));
    tmp31_fu_2774_p2 <= (sel_tmp8_i1_fu_2768_p2 and p_Result_14_reg_5175);
    tmp45_fu_2961_p2 <= (tmp_86_fu_2957_p1 xor ap_const_lv3_4);
    tmp47_fu_2999_p2 <= std_logic_vector(unsigned(it_0_rec_reg_1800) + unsigned(ap_const_lv4_C));
    tmp4_fu_2462_p2 <= (sel_tmp8_i_fu_2456_p2 and p_Result_s_reg_5142);
    tmp62_fu_2993_p2 <= std_logic_vector(unsigned(tmp_12_fu_2979_p1) + unsigned(tmp_13_cast_fu_2989_p1));
    tmp63_fu_3470_p2 <= std_logic_vector(unsigned(tmp_58_cast_fu_3466_p1) + unsigned(ap_const_lv5_B));
    tmp_12_fu_2979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_2971_p3),7));
    tmp_13_cast_fu_2989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_2983_p2),7));
    tmp_13_fu_2589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_fu_2581_p3),32));
    tmp_15_fu_2252_p1 <= p_Val2_s_fu_2211_p1(31 - 1 downto 0);
    tmp_1_fu_2114_p3 <= 
        ap_const_lv32_0 when (tmp_fu_2108_p2(0) = '1') else 
        update_fu_486;
    tmp_21_fu_2593_p4 <= r_V_1_fu_2575_p2(55 downto 24);
    tmp_22_fu_2785_p1 <= sel_tmp6_i1_fu_2750_p3;
    tmp_26_fu_2901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_2893_p3),32));
    tmp_28_fu_2905_p4 <= r_V_3_fu_2887_p2(55 downto 24);
    tmp_2_fu_2122_p2 <= "1" when (invdar_reg_1591 = ap_const_lv2_1) else "0";
    tmp_36_fu_3670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_reg_5319),32));
    tmp_3_fu_2181_p1 <= img_w(7 - 1 downto 0);
    tmp_40_fu_3674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_reg_5324),32));
    tmp_43_fu_3249_p101 <= std_logic_vector(unsigned(sum_t_fu_3009_p2) + unsigned(tmp_3_reg_5127));
    tmp_47_fu_3360_p101 <= std_logic_vector(unsigned(sum6_t_fu_3132_p2) + unsigned(tmp_3_reg_5127));
    tmp_52_fu_3485_p101 <= std_logic_vector(unsigned(tmp223_cast_fu_3476_p1) + unsigned(tmp62_reg_5306));
    tmp_53_fu_3686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_reg_5339),32));
    tmp_56_fu_3591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_0_rec_reg_1800),6));
    tmp_58_cast_fu_3466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_0_rec_reg_1800),5));
    tmp_58_fu_3600_p65 <= std_logic_vector(unsigned(p_shl_reg_5296) + unsigned(tmp_56_fu_3591_p1));
    tmp_5_i1_fu_2630_p2 <= "1" when (unsigned(tmp_V_6_reg_5184) > unsigned(ap_const_lv8_96)) else "0";
    tmp_5_i_fu_2318_p2 <= "1" when (unsigned(tmp_V_reg_5151) > unsigned(ap_const_lv8_96)) else "0";
    tmp_60_fu_3725_p2 <= std_logic_vector(unsigned(p_shl2_fu_3717_p3) - unsigned(i_0_i_cast_reg_5437));
    tmp_62_fu_3742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_1910),4));
    tmp_64_fu_3751_p10 <= std_logic_vector(unsigned(tmp_60_reg_5450) + unsigned(tmp_62_fu_3742_p1));
    tmp_74_fu_2581_p3 <= r_V_fu_2569_p2(24 downto 24);
    tmp_77_fu_2297_p1 <= p_Val2_15_fu_2256_p1(31 - 1 downto 0);
    tmp_7_fu_2144_p3 <= 
        update_2_fu_494 when (tmp_fu_2108_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_83_fu_2893_p3 <= r_V_2_fu_2881_p2(24 downto 24);
    tmp_84_fu_2937_p1 <= p_Val2_32_fu_2929_p3(7 - 1 downto 0);
    tmp_85_fu_2941_p1 <= p_Val2_30_fu_2617_p3(7 - 1 downto 0);
    tmp_86_fu_2957_p1 <= y_reg_1717(3 - 1 downto 0);
    tmp_87_fu_2983_p2 <= std_logic_vector(shift_left(unsigned(y_reg_1717),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    tmp_8_i1_fu_2292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_1_fu_2282_p4),64));
    tmp_8_i_fu_2247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_2237_p4),64));
    tmp_9_fu_2473_p1 <= sel_tmp6_i_fu_2438_p3;
    tmp_V_10_fu_2805_p4 <= p_Val2_24_fu_2789_p3(30 downto 23);
    tmp_V_11_fu_2815_p1 <= p_Val2_24_fu_2789_p3(23 - 1 downto 0);
    tmp_V_1_fu_2233_p1 <= p_Val2_s_fu_2211_p1(23 - 1 downto 0);
    tmp_V_2_fu_2355_p4 <= p_Val2_5_fu_2341_p2(30 downto 23);
    tmp_V_3_fu_2365_p1 <= p_Val2_5_fu_2341_p2(23 - 1 downto 0);
    tmp_V_4_fu_2493_p4 <= p_Val2_9_fu_2477_p3(30 downto 23);
    tmp_V_5_fu_2503_p1 <= p_Val2_9_fu_2477_p3(23 - 1 downto 0);
    tmp_V_7_fu_2278_p1 <= p_Val2_15_fu_2256_p1(23 - 1 downto 0);
    tmp_V_8_fu_2667_p4 <= p_Val2_20_fu_2653_p2(30 downto 23);
    tmp_V_9_fu_2677_p1 <= p_Val2_20_fu_2653_p2(23 - 1 downto 0);
    tmp_fu_2108_p2 <= "1" when (invdar_reg_1591 = ap_const_lv2_0) else "0";
    tmp_i1_20_fu_2698_p2 <= (mask_table2_q1 xor ap_const_lv23_7FFFFF);
    tmp_i1_fu_2625_p2 <= "1" when (unsigned(tmp_V_6_reg_5184) < unsigned(ap_const_lv8_7F)) else "0";
    tmp_i_18_fu_2386_p2 <= (mask_table2_q0 xor ap_const_lv23_7FFFFF);
    tmp_i_fu_2313_p2 <= "1" when (unsigned(tmp_V_reg_5151) < unsigned(ap_const_lv8_7F)) else "0";
    tmp_i_i_i1_21_fu_2877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_2869_p1),79));
        tmp_i_i_i1_cast_fu_2857_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i1_fu_2851_p2),9));

    tmp_i_i_i1_fu_2851_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_10_fu_2805_p4));
    tmp_i_i_i_19_fu_2565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_2557_p1),79));
        tmp_i_i_i_cast_fu_2545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_2539_p2),9));

    tmp_i_i_i_fu_2539_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_4_fu_2493_p4));
    tmp_i_i_i_i1_cast_fu_2833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_10_fu_2805_p4),9));
    tmp_i_i_i_i_cast_fu_2521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_fu_2493_p4),9));
    tmp_s_fu_2160_p2 <= "1" when (invdar_reg_1591 = ap_const_lv2_2) else "0";
    update_0_1_fu_2128_p3 <= 
        update_fu_486 when (tmp_2_fu_2122_p2(0) = '1') else 
        tmp_1_fu_2114_p3;
    update_1_1_fu_2136_p3 <= 
        ap_const_lv32_0 when (tmp_2_fu_2122_p2(0) = '1') else 
        update_1_fu_490;
    update_2_1_fu_2152_p3 <= 
        update_2_fu_494 when (tmp_2_fu_2122_p2(0) = '1') else 
        tmp_7_fu_2144_p3;
    ush_1_fu_2861_p3 <= 
        tmp_i_i_i1_cast_fu_2857_p1 when (isNeg_1_fu_2843_p3(0) = '1') else 
        sh_assign_3_fu_2837_p2;
    ush_fu_2549_p3 <= 
        tmp_i_i_i_cast_fu_2545_p1 when (isNeg_fu_2531_p3(0) = '1') else 
        sh_assign_fu_2525_p2;
    x_fu_3020_p2 <= std_logic_vector(unsigned(it_0_rec_reg_1800) + unsigned(ap_const_lv4_1));
    xs_exp_V_7_fu_2375_p3 <= 
        tmp_V_2_fu_2355_p4 when (p_Result_s_reg_5142(0) = '1') else 
        tmp_V_reg_5151;
    xs_exp_V_8_fu_2687_p3 <= 
        tmp_V_8_fu_2667_p4 when (p_Result_14_reg_5175(0) = '1') else 
        tmp_V_6_reg_5184;
    xs_sig_V_1_fu_2369_p3 <= 
        tmp_V_3_fu_2365_p1 when (p_Result_s_reg_5142(0) = '1') else 
        tmp_V_1_reg_5159;
    xs_sig_V_4_fu_2681_p3 <= 
        tmp_V_9_fu_2677_p1 when (p_Result_14_reg_5175(0) = '1') else 
        tmp_V_7_reg_5192;
    xs_sig_V_9_fu_2704_p2 <= (xs_sig_V_4_fu_2681_p3 and tmp_i1_20_fu_2698_p2);
    xs_sig_V_fu_2392_p2 <= (xs_sig_V_1_fu_2369_p3 and tmp_i_18_fu_2386_p2);
    xs_sign_V_10_fu_2693_p2 <= (p_Result_17_fu_2659_p3 and p_Result_14_reg_5175);
    xs_sign_V_9_fu_2381_p2 <= (p_Result_s_reg_5142 and p_Result_11_fu_2347_p3);
    y_1_fu_2951_p2 <= std_logic_vector(unsigned(y_reg_1717) + unsigned(ap_const_lv4_1));
end behav;
