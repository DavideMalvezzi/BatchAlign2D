// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="batch_align2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=236975,HLS_SYN_TPT=none,HLS_SYN_MEM=238,HLS_SYN_DSP=2,HLS_SYN_FF=3605,HLS_SYN_LUT=4822,HLS_VERSION=2018_3}" *)

module batch_align2D (
        ap_clk,
        ap_rst_n,
        m_axi_pyr_AWVALID,
        m_axi_pyr_AWREADY,
        m_axi_pyr_AWADDR,
        m_axi_pyr_AWID,
        m_axi_pyr_AWLEN,
        m_axi_pyr_AWSIZE,
        m_axi_pyr_AWBURST,
        m_axi_pyr_AWLOCK,
        m_axi_pyr_AWCACHE,
        m_axi_pyr_AWPROT,
        m_axi_pyr_AWQOS,
        m_axi_pyr_AWREGION,
        m_axi_pyr_AWUSER,
        m_axi_pyr_WVALID,
        m_axi_pyr_WREADY,
        m_axi_pyr_WDATA,
        m_axi_pyr_WSTRB,
        m_axi_pyr_WLAST,
        m_axi_pyr_WID,
        m_axi_pyr_WUSER,
        m_axi_pyr_ARVALID,
        m_axi_pyr_ARREADY,
        m_axi_pyr_ARADDR,
        m_axi_pyr_ARID,
        m_axi_pyr_ARLEN,
        m_axi_pyr_ARSIZE,
        m_axi_pyr_ARBURST,
        m_axi_pyr_ARLOCK,
        m_axi_pyr_ARCACHE,
        m_axi_pyr_ARPROT,
        m_axi_pyr_ARQOS,
        m_axi_pyr_ARREGION,
        m_axi_pyr_ARUSER,
        m_axi_pyr_RVALID,
        m_axi_pyr_RREADY,
        m_axi_pyr_RDATA,
        m_axi_pyr_RLAST,
        m_axi_pyr_RID,
        m_axi_pyr_RUSER,
        m_axi_pyr_RRESP,
        m_axi_pyr_BVALID,
        m_axi_pyr_BREADY,
        m_axi_pyr_BRESP,
        m_axi_pyr_BID,
        m_axi_pyr_BUSER,
        m_axi_patches_AWVALID,
        m_axi_patches_AWREADY,
        m_axi_patches_AWADDR,
        m_axi_patches_AWID,
        m_axi_patches_AWLEN,
        m_axi_patches_AWSIZE,
        m_axi_patches_AWBURST,
        m_axi_patches_AWLOCK,
        m_axi_patches_AWCACHE,
        m_axi_patches_AWPROT,
        m_axi_patches_AWQOS,
        m_axi_patches_AWREGION,
        m_axi_patches_AWUSER,
        m_axi_patches_WVALID,
        m_axi_patches_WREADY,
        m_axi_patches_WDATA,
        m_axi_patches_WSTRB,
        m_axi_patches_WLAST,
        m_axi_patches_WID,
        m_axi_patches_WUSER,
        m_axi_patches_ARVALID,
        m_axi_patches_ARREADY,
        m_axi_patches_ARADDR,
        m_axi_patches_ARID,
        m_axi_patches_ARLEN,
        m_axi_patches_ARSIZE,
        m_axi_patches_ARBURST,
        m_axi_patches_ARLOCK,
        m_axi_patches_ARCACHE,
        m_axi_patches_ARPROT,
        m_axi_patches_ARQOS,
        m_axi_patches_ARREGION,
        m_axi_patches_ARUSER,
        m_axi_patches_RVALID,
        m_axi_patches_RREADY,
        m_axi_patches_RDATA,
        m_axi_patches_RLAST,
        m_axi_patches_RID,
        m_axi_patches_RUSER,
        m_axi_patches_RRESP,
        m_axi_patches_BVALID,
        m_axi_patches_BREADY,
        m_axi_patches_BRESP,
        m_axi_patches_BID,
        m_axi_patches_BUSER,
        m_axi_pos_r_AWVALID,
        m_axi_pos_r_AWREADY,
        m_axi_pos_r_AWADDR,
        m_axi_pos_r_AWID,
        m_axi_pos_r_AWLEN,
        m_axi_pos_r_AWSIZE,
        m_axi_pos_r_AWBURST,
        m_axi_pos_r_AWLOCK,
        m_axi_pos_r_AWCACHE,
        m_axi_pos_r_AWPROT,
        m_axi_pos_r_AWQOS,
        m_axi_pos_r_AWREGION,
        m_axi_pos_r_AWUSER,
        m_axi_pos_r_WVALID,
        m_axi_pos_r_WREADY,
        m_axi_pos_r_WDATA,
        m_axi_pos_r_WSTRB,
        m_axi_pos_r_WLAST,
        m_axi_pos_r_WID,
        m_axi_pos_r_WUSER,
        m_axi_pos_r_ARVALID,
        m_axi_pos_r_ARREADY,
        m_axi_pos_r_ARADDR,
        m_axi_pos_r_ARID,
        m_axi_pos_r_ARLEN,
        m_axi_pos_r_ARSIZE,
        m_axi_pos_r_ARBURST,
        m_axi_pos_r_ARLOCK,
        m_axi_pos_r_ARCACHE,
        m_axi_pos_r_ARPROT,
        m_axi_pos_r_ARQOS,
        m_axi_pos_r_ARREGION,
        m_axi_pos_r_ARUSER,
        m_axi_pos_r_RVALID,
        m_axi_pos_r_RREADY,
        m_axi_pos_r_RDATA,
        m_axi_pos_r_RLAST,
        m_axi_pos_r_RID,
        m_axi_pos_r_RUSER,
        m_axi_pos_r_RRESP,
        m_axi_pos_r_BVALID,
        m_axi_pos_r_BREADY,
        m_axi_pos_r_BRESP,
        m_axi_pos_r_BID,
        m_axi_pos_r_BUSER,
        m_axi_debug_AWVALID,
        m_axi_debug_AWREADY,
        m_axi_debug_AWADDR,
        m_axi_debug_AWID,
        m_axi_debug_AWLEN,
        m_axi_debug_AWSIZE,
        m_axi_debug_AWBURST,
        m_axi_debug_AWLOCK,
        m_axi_debug_AWCACHE,
        m_axi_debug_AWPROT,
        m_axi_debug_AWQOS,
        m_axi_debug_AWREGION,
        m_axi_debug_AWUSER,
        m_axi_debug_WVALID,
        m_axi_debug_WREADY,
        m_axi_debug_WDATA,
        m_axi_debug_WSTRB,
        m_axi_debug_WLAST,
        m_axi_debug_WID,
        m_axi_debug_WUSER,
        m_axi_debug_ARVALID,
        m_axi_debug_ARREADY,
        m_axi_debug_ARADDR,
        m_axi_debug_ARID,
        m_axi_debug_ARLEN,
        m_axi_debug_ARSIZE,
        m_axi_debug_ARBURST,
        m_axi_debug_ARLOCK,
        m_axi_debug_ARCACHE,
        m_axi_debug_ARPROT,
        m_axi_debug_ARQOS,
        m_axi_debug_ARREGION,
        m_axi_debug_ARUSER,
        m_axi_debug_RVALID,
        m_axi_debug_RREADY,
        m_axi_debug_RDATA,
        m_axi_debug_RLAST,
        m_axi_debug_RID,
        m_axi_debug_RUSER,
        m_axi_debug_RRESP,
        m_axi_debug_BVALID,
        m_axi_debug_BREADY,
        m_axi_debug_BRESP,
        m_axi_debug_BID,
        m_axi_debug_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt,
        s_axi_param_AWVALID,
        s_axi_param_AWREADY,
        s_axi_param_AWADDR,
        s_axi_param_WVALID,
        s_axi_param_WREADY,
        s_axi_param_WDATA,
        s_axi_param_WSTRB,
        s_axi_param_ARVALID,
        s_axi_param_ARREADY,
        s_axi_param_ARADDR,
        s_axi_param_RVALID,
        s_axi_param_RREADY,
        s_axi_param_RDATA,
        s_axi_param_RRESP,
        s_axi_param_BVALID,
        s_axi_param_BREADY,
        s_axi_param_BRESP
);

parameter    ap_ST_fsm_state1 = 47'd1;
parameter    ap_ST_fsm_state2 = 47'd2;
parameter    ap_ST_fsm_state3 = 47'd4;
parameter    ap_ST_fsm_state4 = 47'd8;
parameter    ap_ST_fsm_state5 = 47'd16;
parameter    ap_ST_fsm_state6 = 47'd32;
parameter    ap_ST_fsm_state7 = 47'd64;
parameter    ap_ST_fsm_state8 = 47'd128;
parameter    ap_ST_fsm_pp0_stage0 = 47'd256;
parameter    ap_ST_fsm_state12 = 47'd512;
parameter    ap_ST_fsm_state13 = 47'd1024;
parameter    ap_ST_fsm_state14 = 47'd2048;
parameter    ap_ST_fsm_state15 = 47'd4096;
parameter    ap_ST_fsm_state16 = 47'd8192;
parameter    ap_ST_fsm_state17 = 47'd16384;
parameter    ap_ST_fsm_state18 = 47'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 47'd65536;
parameter    ap_ST_fsm_state21 = 47'd131072;
parameter    ap_ST_fsm_state22 = 47'd262144;
parameter    ap_ST_fsm_state23 = 47'd524288;
parameter    ap_ST_fsm_state24 = 47'd1048576;
parameter    ap_ST_fsm_state25 = 47'd2097152;
parameter    ap_ST_fsm_state26 = 47'd4194304;
parameter    ap_ST_fsm_state27 = 47'd8388608;
parameter    ap_ST_fsm_state28 = 47'd16777216;
parameter    ap_ST_fsm_state29 = 47'd33554432;
parameter    ap_ST_fsm_state30 = 47'd67108864;
parameter    ap_ST_fsm_state31 = 47'd134217728;
parameter    ap_ST_fsm_state32 = 47'd268435456;
parameter    ap_ST_fsm_state33 = 47'd536870912;
parameter    ap_ST_fsm_state34 = 47'd1073741824;
parameter    ap_ST_fsm_state35 = 47'd2147483648;
parameter    ap_ST_fsm_state36 = 47'd4294967296;
parameter    ap_ST_fsm_state37 = 47'd8589934592;
parameter    ap_ST_fsm_state38 = 47'd17179869184;
parameter    ap_ST_fsm_pp2_stage0 = 47'd34359738368;
parameter    ap_ST_fsm_state41 = 47'd68719476736;
parameter    ap_ST_fsm_state42 = 47'd137438953472;
parameter    ap_ST_fsm_state43 = 47'd274877906944;
parameter    ap_ST_fsm_state44 = 47'd549755813888;
parameter    ap_ST_fsm_state45 = 47'd1099511627776;
parameter    ap_ST_fsm_pp3_stage0 = 47'd2199023255552;
parameter    ap_ST_fsm_state48 = 47'd4398046511104;
parameter    ap_ST_fsm_state49 = 47'd8796093022208;
parameter    ap_ST_fsm_state50 = 47'd17592186044416;
parameter    ap_ST_fsm_state51 = 47'd35184372088832;
parameter    ap_ST_fsm_state52 = 47'd70368744177664;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_PARAM_DATA_WIDTH = 32;
parameter    C_S_AXI_PARAM_ADDR_WIDTH = 7;
parameter    C_M_AXI_PYR_ID_WIDTH = 1;
parameter    C_M_AXI_PYR_ADDR_WIDTH = 64;
parameter    C_M_AXI_PYR_DATA_WIDTH = 32;
parameter    C_M_AXI_PYR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PYR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PYR_WUSER_WIDTH = 1;
parameter    C_M_AXI_PYR_RUSER_WIDTH = 1;
parameter    C_M_AXI_PYR_BUSER_WIDTH = 1;
parameter    C_M_AXI_PYR_USER_VALUE = 0;
parameter    C_M_AXI_PYR_PROT_VALUE = 0;
parameter    C_M_AXI_PYR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_PATCHES_ID_WIDTH = 1;
parameter    C_M_AXI_PATCHES_ADDR_WIDTH = 64;
parameter    C_M_AXI_PATCHES_DATA_WIDTH = 32;
parameter    C_M_AXI_PATCHES_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PATCHES_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PATCHES_WUSER_WIDTH = 1;
parameter    C_M_AXI_PATCHES_RUSER_WIDTH = 1;
parameter    C_M_AXI_PATCHES_BUSER_WIDTH = 1;
parameter    C_M_AXI_PATCHES_USER_VALUE = 0;
parameter    C_M_AXI_PATCHES_PROT_VALUE = 0;
parameter    C_M_AXI_PATCHES_CACHE_VALUE = 3;
parameter    C_M_AXI_POS_R_ID_WIDTH = 1;
parameter    C_M_AXI_POS_R_ADDR_WIDTH = 64;
parameter    C_M_AXI_POS_R_DATA_WIDTH = 32;
parameter    C_M_AXI_POS_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_POS_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_POS_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_POS_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_POS_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_POS_R_USER_VALUE = 0;
parameter    C_M_AXI_POS_R_PROT_VALUE = 0;
parameter    C_M_AXI_POS_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DEBUG_ID_WIDTH = 1;
parameter    C_M_AXI_DEBUG_ADDR_WIDTH = 64;
parameter    C_M_AXI_DEBUG_DATA_WIDTH = 32;
parameter    C_M_AXI_DEBUG_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DEBUG_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DEBUG_WUSER_WIDTH = 1;
parameter    C_M_AXI_DEBUG_RUSER_WIDTH = 1;
parameter    C_M_AXI_DEBUG_BUSER_WIDTH = 1;
parameter    C_M_AXI_DEBUG_USER_VALUE = 0;
parameter    C_M_AXI_DEBUG_PROT_VALUE = 0;
parameter    C_M_AXI_DEBUG_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_PARAM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_PYR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_PATCHES_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_POS_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DEBUG_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_pyr_AWVALID;
input   m_axi_pyr_AWREADY;
output  [C_M_AXI_PYR_ADDR_WIDTH - 1:0] m_axi_pyr_AWADDR;
output  [C_M_AXI_PYR_ID_WIDTH - 1:0] m_axi_pyr_AWID;
output  [7:0] m_axi_pyr_AWLEN;
output  [2:0] m_axi_pyr_AWSIZE;
output  [1:0] m_axi_pyr_AWBURST;
output  [1:0] m_axi_pyr_AWLOCK;
output  [3:0] m_axi_pyr_AWCACHE;
output  [2:0] m_axi_pyr_AWPROT;
output  [3:0] m_axi_pyr_AWQOS;
output  [3:0] m_axi_pyr_AWREGION;
output  [C_M_AXI_PYR_AWUSER_WIDTH - 1:0] m_axi_pyr_AWUSER;
output   m_axi_pyr_WVALID;
input   m_axi_pyr_WREADY;
output  [C_M_AXI_PYR_DATA_WIDTH - 1:0] m_axi_pyr_WDATA;
output  [C_M_AXI_PYR_WSTRB_WIDTH - 1:0] m_axi_pyr_WSTRB;
output   m_axi_pyr_WLAST;
output  [C_M_AXI_PYR_ID_WIDTH - 1:0] m_axi_pyr_WID;
output  [C_M_AXI_PYR_WUSER_WIDTH - 1:0] m_axi_pyr_WUSER;
output   m_axi_pyr_ARVALID;
input   m_axi_pyr_ARREADY;
output  [C_M_AXI_PYR_ADDR_WIDTH - 1:0] m_axi_pyr_ARADDR;
output  [C_M_AXI_PYR_ID_WIDTH - 1:0] m_axi_pyr_ARID;
output  [7:0] m_axi_pyr_ARLEN;
output  [2:0] m_axi_pyr_ARSIZE;
output  [1:0] m_axi_pyr_ARBURST;
output  [1:0] m_axi_pyr_ARLOCK;
output  [3:0] m_axi_pyr_ARCACHE;
output  [2:0] m_axi_pyr_ARPROT;
output  [3:0] m_axi_pyr_ARQOS;
output  [3:0] m_axi_pyr_ARREGION;
output  [C_M_AXI_PYR_ARUSER_WIDTH - 1:0] m_axi_pyr_ARUSER;
input   m_axi_pyr_RVALID;
output   m_axi_pyr_RREADY;
input  [C_M_AXI_PYR_DATA_WIDTH - 1:0] m_axi_pyr_RDATA;
input   m_axi_pyr_RLAST;
input  [C_M_AXI_PYR_ID_WIDTH - 1:0] m_axi_pyr_RID;
input  [C_M_AXI_PYR_RUSER_WIDTH - 1:0] m_axi_pyr_RUSER;
input  [1:0] m_axi_pyr_RRESP;
input   m_axi_pyr_BVALID;
output   m_axi_pyr_BREADY;
input  [1:0] m_axi_pyr_BRESP;
input  [C_M_AXI_PYR_ID_WIDTH - 1:0] m_axi_pyr_BID;
input  [C_M_AXI_PYR_BUSER_WIDTH - 1:0] m_axi_pyr_BUSER;
output   m_axi_patches_AWVALID;
input   m_axi_patches_AWREADY;
output  [C_M_AXI_PATCHES_ADDR_WIDTH - 1:0] m_axi_patches_AWADDR;
output  [C_M_AXI_PATCHES_ID_WIDTH - 1:0] m_axi_patches_AWID;
output  [7:0] m_axi_patches_AWLEN;
output  [2:0] m_axi_patches_AWSIZE;
output  [1:0] m_axi_patches_AWBURST;
output  [1:0] m_axi_patches_AWLOCK;
output  [3:0] m_axi_patches_AWCACHE;
output  [2:0] m_axi_patches_AWPROT;
output  [3:0] m_axi_patches_AWQOS;
output  [3:0] m_axi_patches_AWREGION;
output  [C_M_AXI_PATCHES_AWUSER_WIDTH - 1:0] m_axi_patches_AWUSER;
output   m_axi_patches_WVALID;
input   m_axi_patches_WREADY;
output  [C_M_AXI_PATCHES_DATA_WIDTH - 1:0] m_axi_patches_WDATA;
output  [C_M_AXI_PATCHES_WSTRB_WIDTH - 1:0] m_axi_patches_WSTRB;
output   m_axi_patches_WLAST;
output  [C_M_AXI_PATCHES_ID_WIDTH - 1:0] m_axi_patches_WID;
output  [C_M_AXI_PATCHES_WUSER_WIDTH - 1:0] m_axi_patches_WUSER;
output   m_axi_patches_ARVALID;
input   m_axi_patches_ARREADY;
output  [C_M_AXI_PATCHES_ADDR_WIDTH - 1:0] m_axi_patches_ARADDR;
output  [C_M_AXI_PATCHES_ID_WIDTH - 1:0] m_axi_patches_ARID;
output  [7:0] m_axi_patches_ARLEN;
output  [2:0] m_axi_patches_ARSIZE;
output  [1:0] m_axi_patches_ARBURST;
output  [1:0] m_axi_patches_ARLOCK;
output  [3:0] m_axi_patches_ARCACHE;
output  [2:0] m_axi_patches_ARPROT;
output  [3:0] m_axi_patches_ARQOS;
output  [3:0] m_axi_patches_ARREGION;
output  [C_M_AXI_PATCHES_ARUSER_WIDTH - 1:0] m_axi_patches_ARUSER;
input   m_axi_patches_RVALID;
output   m_axi_patches_RREADY;
input  [C_M_AXI_PATCHES_DATA_WIDTH - 1:0] m_axi_patches_RDATA;
input   m_axi_patches_RLAST;
input  [C_M_AXI_PATCHES_ID_WIDTH - 1:0] m_axi_patches_RID;
input  [C_M_AXI_PATCHES_RUSER_WIDTH - 1:0] m_axi_patches_RUSER;
input  [1:0] m_axi_patches_RRESP;
input   m_axi_patches_BVALID;
output   m_axi_patches_BREADY;
input  [1:0] m_axi_patches_BRESP;
input  [C_M_AXI_PATCHES_ID_WIDTH - 1:0] m_axi_patches_BID;
input  [C_M_AXI_PATCHES_BUSER_WIDTH - 1:0] m_axi_patches_BUSER;
output   m_axi_pos_r_AWVALID;
input   m_axi_pos_r_AWREADY;
output  [C_M_AXI_POS_R_ADDR_WIDTH - 1:0] m_axi_pos_r_AWADDR;
output  [C_M_AXI_POS_R_ID_WIDTH - 1:0] m_axi_pos_r_AWID;
output  [7:0] m_axi_pos_r_AWLEN;
output  [2:0] m_axi_pos_r_AWSIZE;
output  [1:0] m_axi_pos_r_AWBURST;
output  [1:0] m_axi_pos_r_AWLOCK;
output  [3:0] m_axi_pos_r_AWCACHE;
output  [2:0] m_axi_pos_r_AWPROT;
output  [3:0] m_axi_pos_r_AWQOS;
output  [3:0] m_axi_pos_r_AWREGION;
output  [C_M_AXI_POS_R_AWUSER_WIDTH - 1:0] m_axi_pos_r_AWUSER;
output   m_axi_pos_r_WVALID;
input   m_axi_pos_r_WREADY;
output  [C_M_AXI_POS_R_DATA_WIDTH - 1:0] m_axi_pos_r_WDATA;
output  [C_M_AXI_POS_R_WSTRB_WIDTH - 1:0] m_axi_pos_r_WSTRB;
output   m_axi_pos_r_WLAST;
output  [C_M_AXI_POS_R_ID_WIDTH - 1:0] m_axi_pos_r_WID;
output  [C_M_AXI_POS_R_WUSER_WIDTH - 1:0] m_axi_pos_r_WUSER;
output   m_axi_pos_r_ARVALID;
input   m_axi_pos_r_ARREADY;
output  [C_M_AXI_POS_R_ADDR_WIDTH - 1:0] m_axi_pos_r_ARADDR;
output  [C_M_AXI_POS_R_ID_WIDTH - 1:0] m_axi_pos_r_ARID;
output  [7:0] m_axi_pos_r_ARLEN;
output  [2:0] m_axi_pos_r_ARSIZE;
output  [1:0] m_axi_pos_r_ARBURST;
output  [1:0] m_axi_pos_r_ARLOCK;
output  [3:0] m_axi_pos_r_ARCACHE;
output  [2:0] m_axi_pos_r_ARPROT;
output  [3:0] m_axi_pos_r_ARQOS;
output  [3:0] m_axi_pos_r_ARREGION;
output  [C_M_AXI_POS_R_ARUSER_WIDTH - 1:0] m_axi_pos_r_ARUSER;
input   m_axi_pos_r_RVALID;
output   m_axi_pos_r_RREADY;
input  [C_M_AXI_POS_R_DATA_WIDTH - 1:0] m_axi_pos_r_RDATA;
input   m_axi_pos_r_RLAST;
input  [C_M_AXI_POS_R_ID_WIDTH - 1:0] m_axi_pos_r_RID;
input  [C_M_AXI_POS_R_RUSER_WIDTH - 1:0] m_axi_pos_r_RUSER;
input  [1:0] m_axi_pos_r_RRESP;
input   m_axi_pos_r_BVALID;
output   m_axi_pos_r_BREADY;
input  [1:0] m_axi_pos_r_BRESP;
input  [C_M_AXI_POS_R_ID_WIDTH - 1:0] m_axi_pos_r_BID;
input  [C_M_AXI_POS_R_BUSER_WIDTH - 1:0] m_axi_pos_r_BUSER;
output   m_axi_debug_AWVALID;
input   m_axi_debug_AWREADY;
output  [C_M_AXI_DEBUG_ADDR_WIDTH - 1:0] m_axi_debug_AWADDR;
output  [C_M_AXI_DEBUG_ID_WIDTH - 1:0] m_axi_debug_AWID;
output  [7:0] m_axi_debug_AWLEN;
output  [2:0] m_axi_debug_AWSIZE;
output  [1:0] m_axi_debug_AWBURST;
output  [1:0] m_axi_debug_AWLOCK;
output  [3:0] m_axi_debug_AWCACHE;
output  [2:0] m_axi_debug_AWPROT;
output  [3:0] m_axi_debug_AWQOS;
output  [3:0] m_axi_debug_AWREGION;
output  [C_M_AXI_DEBUG_AWUSER_WIDTH - 1:0] m_axi_debug_AWUSER;
output   m_axi_debug_WVALID;
input   m_axi_debug_WREADY;
output  [C_M_AXI_DEBUG_DATA_WIDTH - 1:0] m_axi_debug_WDATA;
output  [C_M_AXI_DEBUG_WSTRB_WIDTH - 1:0] m_axi_debug_WSTRB;
output   m_axi_debug_WLAST;
output  [C_M_AXI_DEBUG_ID_WIDTH - 1:0] m_axi_debug_WID;
output  [C_M_AXI_DEBUG_WUSER_WIDTH - 1:0] m_axi_debug_WUSER;
output   m_axi_debug_ARVALID;
input   m_axi_debug_ARREADY;
output  [C_M_AXI_DEBUG_ADDR_WIDTH - 1:0] m_axi_debug_ARADDR;
output  [C_M_AXI_DEBUG_ID_WIDTH - 1:0] m_axi_debug_ARID;
output  [7:0] m_axi_debug_ARLEN;
output  [2:0] m_axi_debug_ARSIZE;
output  [1:0] m_axi_debug_ARBURST;
output  [1:0] m_axi_debug_ARLOCK;
output  [3:0] m_axi_debug_ARCACHE;
output  [2:0] m_axi_debug_ARPROT;
output  [3:0] m_axi_debug_ARQOS;
output  [3:0] m_axi_debug_ARREGION;
output  [C_M_AXI_DEBUG_ARUSER_WIDTH - 1:0] m_axi_debug_ARUSER;
input   m_axi_debug_RVALID;
output   m_axi_debug_RREADY;
input  [C_M_AXI_DEBUG_DATA_WIDTH - 1:0] m_axi_debug_RDATA;
input   m_axi_debug_RLAST;
input  [C_M_AXI_DEBUG_ID_WIDTH - 1:0] m_axi_debug_RID;
input  [C_M_AXI_DEBUG_RUSER_WIDTH - 1:0] m_axi_debug_RUSER;
input  [1:0] m_axi_debug_RRESP;
input   m_axi_debug_BVALID;
output   m_axi_debug_BREADY;
input  [1:0] m_axi_debug_BRESP;
input  [C_M_AXI_DEBUG_ID_WIDTH - 1:0] m_axi_debug_BID;
input  [C_M_AXI_DEBUG_BUSER_WIDTH - 1:0] m_axi_debug_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;
input   s_axi_param_AWVALID;
output   s_axi_param_AWREADY;
input  [C_S_AXI_PARAM_ADDR_WIDTH - 1:0] s_axi_param_AWADDR;
input   s_axi_param_WVALID;
output   s_axi_param_WREADY;
input  [C_S_AXI_PARAM_DATA_WIDTH - 1:0] s_axi_param_WDATA;
input  [C_S_AXI_PARAM_WSTRB_WIDTH - 1:0] s_axi_param_WSTRB;
input   s_axi_param_ARVALID;
output   s_axi_param_ARREADY;
input  [C_S_AXI_PARAM_ADDR_WIDTH - 1:0] s_axi_param_ARADDR;
output   s_axi_param_RVALID;
input   s_axi_param_RREADY;
output  [C_S_AXI_PARAM_DATA_WIDTH - 1:0] s_axi_param_RDATA;
output  [1:0] s_axi_param_RRESP;
output   s_axi_param_BVALID;
input   s_axi_param_BREADY;
output  [1:0] s_axi_param_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [46:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] pyr_data_ptr;
wire   [15:0] img_w;
wire   [15:0] img_h;
wire   [63:0] ref_patch_with_border_ptr;
wire   [63:0] cur_px_estimate_ptr;
wire   [127:0] levels;
reg    converged_ap_vld;
wire   [31:0] n_iter;
wire   [0:0] transfer_pyr;
wire   [63:0] inv_out;
reg   [18:0] pyr_data_address0;
reg    pyr_data_ce0;
reg    pyr_data_we0;
wire   [7:0] pyr_data_q0;
reg   [31:0] cur_px_estimate_3_1;
reg   [31:0] cur_px_estimate_0_0;
reg   [31:0] cur_px_estimate_0_1;
reg   [31:0] cur_px_estimate_1_0;
reg   [31:0] cur_px_estimate_1_1;
reg   [31:0] cur_px_estimate_2_0;
reg   [31:0] cur_px_estimate_2_1;
reg   [31:0] cur_px_estimate_3_0;
reg    pyr_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    pyr_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond3_reg_916;
reg    pos_r_blk_n_AR;
wire    ap_CS_fsm_state12;
reg    pos_r_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg    pos_r_blk_n_AW;
wire    ap_CS_fsm_state27;
reg    pos_r_blk_n_W;
wire    ap_CS_fsm_state30;
reg    pos_r_blk_n_B;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond5_reg_1019;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
reg    debug_blk_n_AW;
reg    debug_blk_n_B;
reg    debug_blk_n_W;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond4_reg_1005;
wire    pyr_AWREADY;
wire    pyr_WREADY;
reg    pyr_ARVALID;
wire    pyr_ARREADY;
wire    pyr_RVALID;
reg    pyr_RREADY;
wire   [7:0] pyr_RDATA;
wire    pyr_RLAST;
wire   [0:0] pyr_RID;
wire   [0:0] pyr_RUSER;
wire   [1:0] pyr_RRESP;
wire    pyr_BVALID;
wire   [1:0] pyr_BRESP;
wire   [0:0] pyr_BID;
wire   [0:0] pyr_BUSER;
reg    pos_r_AWVALID;
wire    pos_r_AWREADY;
reg   [63:0] pos_r_AWADDR;
reg   [31:0] pos_r_AWLEN;
reg    pos_r_WVALID;
wire    pos_r_WREADY;
reg   [31:0] pos_r_WDATA;
reg    pos_r_ARVALID;
wire    pos_r_ARREADY;
wire    pos_r_RVALID;
reg    pos_r_RREADY;
wire   [31:0] pos_r_RDATA;
wire    pos_r_RLAST;
wire   [0:0] pos_r_RID;
wire   [0:0] pos_r_RUSER;
wire   [1:0] pos_r_RRESP;
wire    pos_r_BVALID;
reg    pos_r_BREADY;
wire   [1:0] pos_r_BRESP;
wire   [0:0] pos_r_BID;
wire   [0:0] pos_r_BUSER;
reg    debug_AWVALID;
wire    debug_AWREADY;
reg    debug_WVALID;
wire    debug_WREADY;
wire    debug_ARREADY;
wire    debug_RVALID;
wire   [31:0] debug_RDATA;
wire    debug_RLAST;
wire   [0:0] debug_RID;
wire   [0:0] debug_RUSER;
wire   [1:0] debug_RRESP;
wire    debug_BVALID;
reg    debug_BREADY;
wire   [1:0] debug_BRESP;
wire   [0:0] debug_BID;
wire   [0:0] debug_BUSER;
reg   [18:0] indvar_reg_378;
reg   [18:0] indvar_reg_378_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] indvar3_reg_390;
reg   [5:0] indvar6_reg_401;
reg   [3:0] indvar8_reg_412;
reg   [7:0] reg_431;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_423_p2;
reg   [31:0] reg_435;
reg    ap_sig_ioackin_pos_r_AWREADY;
reg    ap_sig_ioackin_pos_r_WREADY;
reg    ap_block_state30_io;
wire   [0:0] transfer_pyr_read_read_fu_228_p2;
reg   [63:0] debug_addr_reg_889;
wire   [62:0] tmp_2_cast_fu_477_p1;
reg   [62:0] tmp_2_cast_reg_895;
reg   [63:0] pos_addr_reg_902;
reg   [63:0] pyr_addr_reg_910;
wire   [0:0] exitcond3_fu_493_p2;
reg   [0:0] exitcond3_reg_916_pp0_iter1_reg;
wire   [18:0] indvar_next_fu_499_p2;
reg   [18:0] indvar_next_reg_920;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] pyr_addr_read_reg_925;
wire   [0:0] exitcond2_fu_510_p2;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] indvar_next2_fu_516_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [1:0] p_t1_reg_939;
wire   [0:0] tmp_3_fu_532_p1;
reg   [0:0] tmp_3_reg_943;
wire   [31:0] tmp_8_fu_584_p1;
wire   [31:0] tmp_8_1_fu_589_p1;
wire   [31:0] grp_fu_428_p1;
reg   [31:0] tmp_9_reg_957;
wire   [31:0] tmp_8_2_fu_594_p1;
reg   [31:0] tmp_9_1_reg_967;
wire    ap_CS_fsm_state26;
wire   [31:0] tmp_8_3_fu_599_p1;
reg   [63:0] pos_addr_1_reg_977;
reg    ap_sig_ioackin_debug_AWREADY;
reg    ap_block_state27_io;
reg   [31:0] tmp_9_2_reg_983;
reg   [63:0] pos_addr_2_reg_988;
reg   [31:0] tmp_9_3_reg_994;
reg   [63:0] pos_addr_3_reg_999;
wire   [0:0] exitcond4_fu_649_p2;
wire    ap_block_state39_pp2_stage0_iter0;
wire    ap_block_state40_pp2_stage0_iter1;
reg    ap_sig_ioackin_debug_WREADY;
reg    ap_block_state40_io;
reg    ap_block_pp2_stage0_11001;
wire   [5:0] indvar_next3_fu_655_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [31:0] tmp_1_13_fu_661_p38;
reg   [31:0] tmp_1_13_reg_1014;
wire   [0:0] exitcond5_fu_739_p2;
wire    ap_block_state46_pp3_stage0_iter0;
wire    ap_block_state47_pp3_stage0_iter1;
reg    ap_block_state47_io;
reg    ap_block_pp3_stage0_11001;
wire   [3:0] indvar_next4_fu_745_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] UnifiedRetVal_i_fu_877_p3;
reg   [31:0] UnifiedRetVal_i_reg_1028;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state39;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state46;
reg   [18:0] ap_phi_mux_indvar_phi_fu_382_p4;
wire   [63:0] indvar4_fu_505_p1;
wire   [63:0] tmp_fu_453_p1;
wire   [63:0] tmp_2_fu_473_p1;
wire   [63:0] cur_px_estimate_ptr6_fu_609_p1;
wire   [63:0] cur_px_estimate_ptr6_4_fu_624_p1;
wire   [63:0] cur_px_estimate_ptr6_5_fu_639_p1;
reg    ap_reg_ioackin_pyr_ARREADY;
reg    ap_sig_ioackin_pyr_ARREADY;
reg    ap_reg_ioackin_pos_r_ARREADY;
reg    ap_sig_ioackin_pos_r_ARREADY;
reg    ap_reg_ioackin_pos_r_AWREADY;
reg    ap_reg_ioackin_debug_AWREADY;
reg    ap_reg_ioackin_pos_r_WREADY;
reg    ap_reg_ioackin_debug_WREADY;
wire    ap_block_pp2_stage0_01001;
wire    ap_block_pp3_stage0_01001;
wire    ap_CS_fsm_state21;
reg   [31:0] grp_fu_423_p0;
reg   [31:0] grp_fu_428_p0;
wire   [61:0] inv_out7_fu_443_p4;
wire   [61:0] cur_px_estimate_ptr5_fu_463_p4;
wire   [62:0] cur_px_estimate_ptr6_1_fu_604_p2;
wire   [62:0] cur_px_estimate_ptr6_2_fu_619_p2;
wire   [62:0] cur_px_estimate_ptr6_3_fu_634_p2;
wire   [2:0] tmp_4_fu_751_p1;
wire   [0:0] sel_tmp_i_fu_787_p2;
wire   [0:0] sel_tmp2_i_fu_801_p2;
wire   [31:0] sel_tmp1_i_fu_793_p3;
wire   [0:0] sel_tmp4_i_fu_815_p2;
wire   [31:0] sel_tmp3_i_fu_807_p3;
wire   [0:0] sel_tmp6_i_fu_829_p2;
wire   [31:0] sel_tmp5_i_fu_821_p3;
wire   [0:0] sel_tmp8_i_fu_843_p2;
wire   [31:0] sel_tmp7_i_fu_835_p3;
wire   [0:0] sel_tmp10_i_fu_857_p2;
wire   [31:0] sel_tmp9_i_fu_849_p3;
wire   [0:0] sel_tmp12_i_fu_871_p2;
wire   [31:0] sel_tmp11_i_fu_863_p3;
reg    grp_fu_423_ce;
reg    grp_fu_428_ce;
reg   [46:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_condition_1615;

// power-on initialization
initial begin
#0 ap_CS_fsm = 47'd1;
#0 cur_px_estimate_3_1 = 32'd0;
#0 cur_px_estimate_0_0 = 32'd0;
#0 cur_px_estimate_0_1 = 32'd0;
#0 cur_px_estimate_1_0 = 32'd0;
#0 cur_px_estimate_1_1 = 32'd0;
#0 cur_px_estimate_2_0 = 32'd0;
#0 cur_px_estimate_2_1 = 32'd0;
#0 cur_px_estimate_3_0 = 32'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_pyr_ARREADY = 1'b0;
#0 ap_reg_ioackin_pos_r_ARREADY = 1'b0;
#0 ap_reg_ioackin_pos_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_debug_AWREADY = 1'b0;
#0 ap_reg_ioackin_pos_r_WREADY = 1'b0;
#0 ap_reg_ioackin_debug_WREADY = 1'b0;
end

batch_align2D_pyr_data #(
    .DataWidth( 8 ),
    .AddressRange( 473760 ),
    .AddressWidth( 19 ))
pyr_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pyr_data_address0),
    .ce0(pyr_data_ce0),
    .we0(pyr_data_we0),
    .d0(pyr_addr_read_reg_925),
    .q0(pyr_data_q0)
);

batch_align2D_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
batch_align2D_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .pyr_data_ptr(pyr_data_ptr),
    .ref_patch_with_border_ptr(ref_patch_with_border_ptr),
    .cur_px_estimate_ptr(cur_px_estimate_ptr),
    .inv_out(inv_out)
);

batch_align2D_param_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PARAM_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PARAM_DATA_WIDTH ))
batch_align2D_param_s_axi_U(
    .AWVALID(s_axi_param_AWVALID),
    .AWREADY(s_axi_param_AWREADY),
    .AWADDR(s_axi_param_AWADDR),
    .WVALID(s_axi_param_WVALID),
    .WREADY(s_axi_param_WREADY),
    .WDATA(s_axi_param_WDATA),
    .WSTRB(s_axi_param_WSTRB),
    .ARVALID(s_axi_param_ARVALID),
    .ARREADY(s_axi_param_ARREADY),
    .ARADDR(s_axi_param_ARADDR),
    .RVALID(s_axi_param_RVALID),
    .RREADY(s_axi_param_RREADY),
    .RDATA(s_axi_param_RDATA),
    .RRESP(s_axi_param_RRESP),
    .BVALID(s_axi_param_BVALID),
    .BREADY(s_axi_param_BREADY),
    .BRESP(s_axi_param_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .img_w(img_w),
    .img_h(img_h),
    .levels(levels),
    .converged(64'd0),
    .converged_ap_vld(converged_ap_vld),
    .n_iter(n_iter),
    .transfer_pyr(transfer_pyr)
);

batch_align2D_pyr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PYR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PYR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PYR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PYR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PYR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PYR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PYR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PYR_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_PYR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PYR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PYR_CACHE_VALUE ))
batch_align2D_pyr_m_axi_U(
    .AWVALID(m_axi_pyr_AWVALID),
    .AWREADY(m_axi_pyr_AWREADY),
    .AWADDR(m_axi_pyr_AWADDR),
    .AWID(m_axi_pyr_AWID),
    .AWLEN(m_axi_pyr_AWLEN),
    .AWSIZE(m_axi_pyr_AWSIZE),
    .AWBURST(m_axi_pyr_AWBURST),
    .AWLOCK(m_axi_pyr_AWLOCK),
    .AWCACHE(m_axi_pyr_AWCACHE),
    .AWPROT(m_axi_pyr_AWPROT),
    .AWQOS(m_axi_pyr_AWQOS),
    .AWREGION(m_axi_pyr_AWREGION),
    .AWUSER(m_axi_pyr_AWUSER),
    .WVALID(m_axi_pyr_WVALID),
    .WREADY(m_axi_pyr_WREADY),
    .WDATA(m_axi_pyr_WDATA),
    .WSTRB(m_axi_pyr_WSTRB),
    .WLAST(m_axi_pyr_WLAST),
    .WID(m_axi_pyr_WID),
    .WUSER(m_axi_pyr_WUSER),
    .ARVALID(m_axi_pyr_ARVALID),
    .ARREADY(m_axi_pyr_ARREADY),
    .ARADDR(m_axi_pyr_ARADDR),
    .ARID(m_axi_pyr_ARID),
    .ARLEN(m_axi_pyr_ARLEN),
    .ARSIZE(m_axi_pyr_ARSIZE),
    .ARBURST(m_axi_pyr_ARBURST),
    .ARLOCK(m_axi_pyr_ARLOCK),
    .ARCACHE(m_axi_pyr_ARCACHE),
    .ARPROT(m_axi_pyr_ARPROT),
    .ARQOS(m_axi_pyr_ARQOS),
    .ARREGION(m_axi_pyr_ARREGION),
    .ARUSER(m_axi_pyr_ARUSER),
    .RVALID(m_axi_pyr_RVALID),
    .RREADY(m_axi_pyr_RREADY),
    .RDATA(m_axi_pyr_RDATA),
    .RLAST(m_axi_pyr_RLAST),
    .RID(m_axi_pyr_RID),
    .RUSER(m_axi_pyr_RUSER),
    .RRESP(m_axi_pyr_RRESP),
    .BVALID(m_axi_pyr_BVALID),
    .BREADY(m_axi_pyr_BREADY),
    .BRESP(m_axi_pyr_BRESP),
    .BID(m_axi_pyr_BID),
    .BUSER(m_axi_pyr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(pyr_ARVALID),
    .I_ARREADY(pyr_ARREADY),
    .I_ARADDR(pyr_addr_reg_910),
    .I_ARID(1'd0),
    .I_ARLEN(32'd473760),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(pyr_RVALID),
    .I_RREADY(pyr_RREADY),
    .I_RDATA(pyr_RDATA),
    .I_RID(pyr_RID),
    .I_RUSER(pyr_RUSER),
    .I_RRESP(pyr_RRESP),
    .I_RLAST(pyr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(pyr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(pyr_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(pyr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(pyr_BRESP),
    .I_BID(pyr_BID),
    .I_BUSER(pyr_BUSER)
);

batch_align2D_pos_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_POS_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_POS_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_POS_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_POS_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_POS_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_POS_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_POS_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_POS_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_POS_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_POS_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_POS_R_CACHE_VALUE ))
batch_align2D_pos_r_m_axi_U(
    .AWVALID(m_axi_pos_r_AWVALID),
    .AWREADY(m_axi_pos_r_AWREADY),
    .AWADDR(m_axi_pos_r_AWADDR),
    .AWID(m_axi_pos_r_AWID),
    .AWLEN(m_axi_pos_r_AWLEN),
    .AWSIZE(m_axi_pos_r_AWSIZE),
    .AWBURST(m_axi_pos_r_AWBURST),
    .AWLOCK(m_axi_pos_r_AWLOCK),
    .AWCACHE(m_axi_pos_r_AWCACHE),
    .AWPROT(m_axi_pos_r_AWPROT),
    .AWQOS(m_axi_pos_r_AWQOS),
    .AWREGION(m_axi_pos_r_AWREGION),
    .AWUSER(m_axi_pos_r_AWUSER),
    .WVALID(m_axi_pos_r_WVALID),
    .WREADY(m_axi_pos_r_WREADY),
    .WDATA(m_axi_pos_r_WDATA),
    .WSTRB(m_axi_pos_r_WSTRB),
    .WLAST(m_axi_pos_r_WLAST),
    .WID(m_axi_pos_r_WID),
    .WUSER(m_axi_pos_r_WUSER),
    .ARVALID(m_axi_pos_r_ARVALID),
    .ARREADY(m_axi_pos_r_ARREADY),
    .ARADDR(m_axi_pos_r_ARADDR),
    .ARID(m_axi_pos_r_ARID),
    .ARLEN(m_axi_pos_r_ARLEN),
    .ARSIZE(m_axi_pos_r_ARSIZE),
    .ARBURST(m_axi_pos_r_ARBURST),
    .ARLOCK(m_axi_pos_r_ARLOCK),
    .ARCACHE(m_axi_pos_r_ARCACHE),
    .ARPROT(m_axi_pos_r_ARPROT),
    .ARQOS(m_axi_pos_r_ARQOS),
    .ARREGION(m_axi_pos_r_ARREGION),
    .ARUSER(m_axi_pos_r_ARUSER),
    .RVALID(m_axi_pos_r_RVALID),
    .RREADY(m_axi_pos_r_RREADY),
    .RDATA(m_axi_pos_r_RDATA),
    .RLAST(m_axi_pos_r_RLAST),
    .RID(m_axi_pos_r_RID),
    .RUSER(m_axi_pos_r_RUSER),
    .RRESP(m_axi_pos_r_RRESP),
    .BVALID(m_axi_pos_r_BVALID),
    .BREADY(m_axi_pos_r_BREADY),
    .BRESP(m_axi_pos_r_BRESP),
    .BID(m_axi_pos_r_BID),
    .BUSER(m_axi_pos_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(pos_r_ARVALID),
    .I_ARREADY(pos_r_ARREADY),
    .I_ARADDR(pos_addr_reg_902),
    .I_ARID(1'd0),
    .I_ARLEN(32'd8),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(pos_r_RVALID),
    .I_RREADY(pos_r_RREADY),
    .I_RDATA(pos_r_RDATA),
    .I_RID(pos_r_RID),
    .I_RUSER(pos_r_RUSER),
    .I_RRESP(pos_r_RRESP),
    .I_RLAST(pos_r_RLAST),
    .I_AWVALID(pos_r_AWVALID),
    .I_AWREADY(pos_r_AWREADY),
    .I_AWADDR(pos_r_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(pos_r_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(pos_r_WVALID),
    .I_WREADY(pos_r_WREADY),
    .I_WDATA(pos_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(pos_r_BVALID),
    .I_BREADY(pos_r_BREADY),
    .I_BRESP(pos_r_BRESP),
    .I_BID(pos_r_BID),
    .I_BUSER(pos_r_BUSER)
);

batch_align2D_debug_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DEBUG_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DEBUG_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DEBUG_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DEBUG_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DEBUG_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DEBUG_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DEBUG_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DEBUG_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DEBUG_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DEBUG_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DEBUG_CACHE_VALUE ))
batch_align2D_debug_m_axi_U(
    .AWVALID(m_axi_debug_AWVALID),
    .AWREADY(m_axi_debug_AWREADY),
    .AWADDR(m_axi_debug_AWADDR),
    .AWID(m_axi_debug_AWID),
    .AWLEN(m_axi_debug_AWLEN),
    .AWSIZE(m_axi_debug_AWSIZE),
    .AWBURST(m_axi_debug_AWBURST),
    .AWLOCK(m_axi_debug_AWLOCK),
    .AWCACHE(m_axi_debug_AWCACHE),
    .AWPROT(m_axi_debug_AWPROT),
    .AWQOS(m_axi_debug_AWQOS),
    .AWREGION(m_axi_debug_AWREGION),
    .AWUSER(m_axi_debug_AWUSER),
    .WVALID(m_axi_debug_WVALID),
    .WREADY(m_axi_debug_WREADY),
    .WDATA(m_axi_debug_WDATA),
    .WSTRB(m_axi_debug_WSTRB),
    .WLAST(m_axi_debug_WLAST),
    .WID(m_axi_debug_WID),
    .WUSER(m_axi_debug_WUSER),
    .ARVALID(m_axi_debug_ARVALID),
    .ARREADY(m_axi_debug_ARREADY),
    .ARADDR(m_axi_debug_ARADDR),
    .ARID(m_axi_debug_ARID),
    .ARLEN(m_axi_debug_ARLEN),
    .ARSIZE(m_axi_debug_ARSIZE),
    .ARBURST(m_axi_debug_ARBURST),
    .ARLOCK(m_axi_debug_ARLOCK),
    .ARCACHE(m_axi_debug_ARCACHE),
    .ARPROT(m_axi_debug_ARPROT),
    .ARQOS(m_axi_debug_ARQOS),
    .ARREGION(m_axi_debug_ARREGION),
    .ARUSER(m_axi_debug_ARUSER),
    .RVALID(m_axi_debug_RVALID),
    .RREADY(m_axi_debug_RREADY),
    .RDATA(m_axi_debug_RDATA),
    .RLAST(m_axi_debug_RLAST),
    .RID(m_axi_debug_RID),
    .RUSER(m_axi_debug_RUSER),
    .RRESP(m_axi_debug_RRESP),
    .BVALID(m_axi_debug_BVALID),
    .BREADY(m_axi_debug_BREADY),
    .BRESP(m_axi_debug_BRESP),
    .BID(m_axi_debug_BID),
    .BUSER(m_axi_debug_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(debug_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(debug_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(debug_RDATA),
    .I_RID(debug_RID),
    .I_RUSER(debug_RUSER),
    .I_RRESP(debug_RRESP),
    .I_RLAST(debug_RLAST),
    .I_AWVALID(debug_AWVALID),
    .I_AWREADY(debug_AWREADY),
    .I_AWADDR(debug_addr_reg_889),
    .I_AWID(1'd0),
    .I_AWLEN(32'd36),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(debug_WVALID),
    .I_WREADY(debug_WREADY),
    .I_WDATA(tmp_1_13_reg_1014),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(debug_BVALID),
    .I_BREADY(debug_BREADY),
    .I_BRESP(debug_BRESP),
    .I_BID(debug_BID),
    .I_BUSER(debug_BUSER)
);

batch_align2D_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
batch_align2D_fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_423_p0),
    .din1(32'd0),
    .ce(grp_fu_423_ce),
    .dout(grp_fu_423_p2)
);

batch_align2D_sitofp_32ns_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
batch_align2D_sitofp_32ns_32_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_428_p0),
    .ce(grp_fu_428_ce),
    .dout(grp_fu_428_p1)
);

batch_align2D_mux_366_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
batch_align2D_mux_366_32_1_1_U3(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(32'd0),
    .din14(32'd0),
    .din15(32'd0),
    .din16(32'd0),
    .din17(32'd0),
    .din18(32'd0),
    .din19(32'd0),
    .din20(32'd0),
    .din21(32'd0),
    .din22(32'd0),
    .din23(32'd0),
    .din24(32'd0),
    .din25(32'd0),
    .din26(32'd0),
    .din27(32'd0),
    .din28(32'd0),
    .din29(32'd0),
    .din30(32'd0),
    .din31(32'd0),
    .din32(32'd0),
    .din33(32'd0),
    .din34(32'd0),
    .din35(32'd0),
    .din36(indvar6_reg_401),
    .dout(tmp_1_13_fu_661_p38)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state39) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state39))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state39);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state46) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((~((ap_sig_ioackin_pos_r_AWREADY == 1'b0) | (debug_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state45))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state46))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state46);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((~((ap_sig_ioackin_pos_r_AWREADY == 1'b0) | (debug_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state45))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_debug_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            if ((1'b0 == ap_block_state27_io)) begin
                ap_reg_ioackin_debug_AWREADY <= 1'b0;
            end else if ((debug_AWREADY == 1'b1)) begin
                ap_reg_ioackin_debug_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_debug_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_1615)) begin
            if ((1'b0 == ap_block_pp2_stage0_11001)) begin
                ap_reg_ioackin_debug_WREADY <= 1'b0;
            end else if (((debug_WREADY == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001))) begin
                ap_reg_ioackin_debug_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_pos_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            if ((ap_sig_ioackin_pos_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_pos_r_ARREADY <= 1'b0;
            end else if ((pos_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_pos_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_pos_r_AWREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | (~((ap_sig_ioackin_pos_r_AWREADY == 1'b0) | (debug_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state45)) | ((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30)) | ((1'b0 == ap_block_state27_io) & (1'b1 == ap_CS_fsm_state27)))) begin
            ap_reg_ioackin_pos_r_AWREADY <= 1'b0;
        end else if ((((pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((debug_BVALID == 1'b1) & (pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)))) begin
            ap_reg_ioackin_pos_r_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_pos_r_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((1'b0 == ap_block_pp3_stage0_11001) & (exitcond5_reg_1019 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30)))) begin
            ap_reg_ioackin_pos_r_WREADY <= 1'b0;
        end else if ((((pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((exitcond5_reg_1019 == 1'd0) & (pos_r_WREADY == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_01001)) | ((pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30)))) begin
            ap_reg_ioackin_pos_r_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_pyr_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_pyr_ARREADY == 1'b1)) begin
                ap_reg_ioackin_pyr_ARREADY <= 1'b0;
            end else if ((pyr_ARREADY == 1'b1)) begin
                ap_reg_ioackin_pyr_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar3_reg_390 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond2_fu_510_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar3_reg_390 <= indvar_next2_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        indvar6_reg_401 <= 6'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_fu_649_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar6_reg_401 <= indvar_next3_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_pos_r_AWREADY == 1'b0) | (debug_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state45))) begin
        indvar8_reg_412 <= 4'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond5_fu_739_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        indvar8_reg_412 <= indvar_next4_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_378 <= 19'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_916 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_378 <= indvar_next_reg_920;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond5_fu_739_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        UnifiedRetVal_i_reg_1028 <= UnifiedRetVal_i_fu_877_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((p_t1_reg_939 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_3_reg_943 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cur_px_estimate_0_0 <= pos_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_943 == 1'd1) & (p_t1_reg_939 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cur_px_estimate_0_1 <= pos_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((p_t1_reg_939 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_3_reg_943 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cur_px_estimate_1_0 <= pos_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_943 == 1'd1) & (p_t1_reg_939 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cur_px_estimate_1_1 <= pos_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((p_t1_reg_939 == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_3_reg_943 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cur_px_estimate_2_0 <= pos_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_943 == 1'd1) & (p_t1_reg_939 == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cur_px_estimate_2_1 <= pos_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((p_t1_reg_939 == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_3_reg_943 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cur_px_estimate_3_0 <= pos_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_943 == 1'd1) & (p_t1_reg_939 == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cur_px_estimate_3_1 <= pos_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        debug_addr_reg_889[61 : 0] <= tmp_fu_453_p1[61 : 0];
        pos_addr_reg_902[61 : 0] <= tmp_2_fu_473_p1[61 : 0];
        pyr_addr_reg_910 <= pyr_data_ptr;
        tmp_2_cast_reg_895[61 : 0] <= tmp_2_cast_fu_477_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond3_reg_916 <= exitcond3_fu_493_p2;
        exitcond3_reg_916_pp0_iter1_reg <= exitcond3_reg_916;
        indvar_reg_378_pp0_iter1_reg <= indvar_reg_378;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond4_reg_1005 <= exitcond4_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond5_reg_1019 <= exitcond5_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_920 <= indvar_next_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond2_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_t1_reg_939 <= {{indvar3_reg_390[2:1]}};
        tmp_3_reg_943 <= tmp_3_fu_532_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state27_io) & (1'b1 == ap_CS_fsm_state27))) begin
        pos_addr_1_reg_977[62 : 0] <= cur_px_estimate_ptr6_fu_609_p1[62 : 0];
        tmp_9_2_reg_983 <= grp_fu_428_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        pos_addr_2_reg_988[62 : 0] <= cur_px_estimate_ptr6_4_fu_624_p1[62 : 0];
        pos_addr_3_reg_999[62 : 0] <= cur_px_estimate_ptr6_5_fu_639_p1[62 : 0];
        tmp_9_3_reg_994 <= grp_fu_428_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_916 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pyr_addr_read_reg_925 <= pyr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_431 <= pyr_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30)))) begin
        reg_435 <= grp_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_1_13_reg_1014 <= tmp_1_13_fu_661_p38;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_9_1_reg_967 <= grp_fu_428_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_9_reg_957 <= grp_fu_428_p1;
    end
end

always @ (*) begin
    if ((exitcond3_fu_493_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_510_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond4_fu_649_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state39 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state39 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_739_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state46 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state46 = 1'b0;
    end
end

always @ (*) begin
    if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_916 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_382_p4 = indvar_next_reg_920;
    end else begin
        ap_phi_mux_indvar_phi_fu_382_p4 = indvar_reg_378;
    end
end

always @ (*) begin
    if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_debug_AWREADY == 1'b0)) begin
        ap_sig_ioackin_debug_AWREADY = debug_AWREADY;
    end else begin
        ap_sig_ioackin_debug_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_debug_WREADY == 1'b0)) begin
        ap_sig_ioackin_debug_WREADY = debug_WREADY;
    end else begin
        ap_sig_ioackin_debug_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_pos_r_ARREADY == 1'b0)) begin
        ap_sig_ioackin_pos_r_ARREADY = pos_r_ARREADY;
    end else begin
        ap_sig_ioackin_pos_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_pos_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_pos_r_AWREADY = pos_r_AWREADY;
    end else begin
        ap_sig_ioackin_pos_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_pos_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_pos_r_WREADY = pos_r_WREADY;
    end else begin
        ap_sig_ioackin_pos_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_pyr_ARREADY == 1'b0)) begin
        ap_sig_ioackin_pyr_ARREADY = pyr_ARREADY;
    end else begin
        ap_sig_ioackin_pyr_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30))) begin
        converged_ap_vld = 1'b1;
    end else begin
        converged_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_debug_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27))) begin
        debug_AWVALID = 1'b1;
    end else begin
        debug_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_sig_ioackin_pos_r_AWREADY == 1'b0) | (debug_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state45))) begin
        debug_BREADY = 1'b1;
    end else begin
        debug_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1005 == 1'd0) & (ap_reg_ioackin_debug_WREADY == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        debug_WVALID = 1'b1;
    end else begin
        debug_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        debug_blk_n_AW = m_axi_debug_AWREADY;
    end else begin
        debug_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        debug_blk_n_B = m_axi_debug_BVALID;
    end else begin
        debug_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond4_reg_1005 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        debug_blk_n_W = m_axi_debug_WREADY;
    end else begin
        debug_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30)) | ((1'b0 == ap_block_state27_io) & (1'b1 == ap_CS_fsm_state27)))) begin
        grp_fu_423_ce = 1'b1;
    end else begin
        grp_fu_423_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_423_p0 = tmp_9_3_reg_994;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_423_p0 = tmp_9_2_reg_983;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_423_p0 = tmp_9_1_reg_967;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_423_p0 = tmp_9_reg_957;
    end else begin
        grp_fu_423_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | ((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((1'b0 == ap_block_state27_io) & (1'b1 == ap_CS_fsm_state27)))) begin
        grp_fu_428_ce = 1'b1;
    end else begin
        grp_fu_428_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_428_p0 = tmp_8_3_fu_599_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_428_p0 = tmp_8_2_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_428_p0 = tmp_8_1_fu_589_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_428_p0 = tmp_8_fu_584_p1;
    end else begin
        grp_fu_428_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_pos_r_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
        pos_r_ARVALID = 1'b1;
    end else begin
        pos_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30))) begin
        pos_r_AWADDR = pos_addr_3_reg_999;
    end else if (((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29))) begin
        pos_r_AWADDR = pos_addr_2_reg_988;
    end else if (((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28))) begin
        pos_r_AWADDR = pos_addr_1_reg_977;
    end else if ((((debug_BVALID == 1'b1) & (ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45)) | ((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)))) begin
        pos_r_AWADDR = pos_addr_reg_902;
    end else begin
        pos_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((debug_BVALID == 1'b1) & (ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45))) begin
        pos_r_AWLEN = 32'd8;
    end else if ((((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30)) | ((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)))) begin
        pos_r_AWLEN = 32'd1;
    end else begin
        pos_r_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((debug_BVALID == 1'b1) & (ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45)) | ((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30)) | ((ap_reg_ioackin_pos_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)))) begin
        pos_r_AWVALID = 1'b1;
    end else begin
        pos_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)))) begin
        pos_r_BREADY = 1'b1;
    end else begin
        pos_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pos_r_RREADY = 1'b1;
    end else begin
        pos_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_reg_1019 == 1'd0) & (ap_reg_ioackin_pos_r_WREADY == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_01001))) begin
        pos_r_WDATA = UnifiedRetVal_i_reg_1028;
    end else if ((((ap_reg_ioackin_pos_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_pos_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state32)) | ((ap_reg_ioackin_pos_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((ap_reg_ioackin_pos_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30)))) begin
        pos_r_WDATA = reg_435;
    end else begin
        pos_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_pos_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_pos_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state32)) | ((ap_reg_ioackin_pos_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((exitcond5_reg_1019 == 1'd0) & (ap_reg_ioackin_pos_r_WREADY == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_01001)) | ((ap_reg_ioackin_pos_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30)))) begin
        pos_r_WVALID = 1'b1;
    end else begin
        pos_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        pos_r_blk_n_AR = m_axi_pos_r_ARREADY;
    end else begin
        pos_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state27))) begin
        pos_r_blk_n_AW = m_axi_pos_r_AWREADY;
    end else begin
        pos_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state35))) begin
        pos_r_blk_n_B = m_axi_pos_r_BVALID;
    end else begin
        pos_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pos_r_blk_n_R = m_axi_pos_r_RVALID;
    end else begin
        pos_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | ((1'b0 == ap_block_pp3_stage0) & (exitcond5_reg_1019 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        pos_r_blk_n_W = m_axi_pos_r_WREADY;
    end else begin
        pos_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_pyr_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        pyr_ARVALID = 1'b1;
    end else begin
        pyr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_916 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pyr_RREADY = 1'b1;
    end else begin
        pyr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pyr_blk_n_AR = m_axi_pyr_ARREADY;
    end else begin
        pyr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond3_reg_916 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pyr_blk_n_R = m_axi_pyr_RVALID;
    end else begin
        pyr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        pyr_data_address0 = 19'd3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        pyr_data_address0 = 19'd2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        pyr_data_address0 = 19'd1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        pyr_data_address0 = 19'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pyr_data_address0 = indvar4_fu_505_p1;
    end else begin
        pyr_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        pyr_data_ce0 = 1'b1;
    end else begin
        pyr_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_916_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pyr_data_we0 = 1'b1;
    end else begin
        pyr_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (transfer_pyr_read_read_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((transfer_pyr_read_read_fu_228_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_pyr_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_493_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_493_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (ap_sig_ioackin_pos_r_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond2_fu_510_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond2_fu_510_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b0 == ap_block_state27_io) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((ap_sig_ioackin_pos_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((ap_sig_ioackin_pos_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond4_fu_649_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond4_fu_649_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if ((~((ap_sig_ioackin_pos_r_AWREADY == 1'b0) | (debug_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond5_fu_739_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond5_fu_739_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((pos_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign UnifiedRetVal_i_fu_877_p3 = ((sel_tmp12_i_fu_871_p2[0:0] === 1'b1) ? cur_px_estimate_3_0 : sel_tmp11_i_fu_863_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond3_reg_916 == 1'd0) & (pyr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond3_reg_916 == 1'd0) & (pyr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((pos_r_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((pos_r_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state47_io) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state47_io) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((exitcond3_reg_916 == 1'd0) & (pyr_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = (pos_r_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state27_io = ((ap_sig_ioackin_debug_AWREADY == 1'b0) | (ap_sig_ioackin_pos_r_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state30_io = ((ap_sig_ioackin_pos_r_WREADY == 1'b0) | (ap_sig_ioackin_pos_r_AWREADY == 1'b0));
end

assign ap_block_state39_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_io = ((exitcond4_reg_1005 == 1'd0) & (ap_sig_ioackin_debug_WREADY == 1'b0));
end

assign ap_block_state40_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state47_io = ((exitcond5_reg_1019 == 1'd0) & (ap_sig_ioackin_pos_r_WREADY == 1'b0));
end

assign ap_block_state47_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1615 = ((exitcond4_reg_1005 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cur_px_estimate_ptr5_fu_463_p4 = {{cur_px_estimate_ptr[63:2]}};

assign cur_px_estimate_ptr6_1_fu_604_p2 = (tmp_2_cast_reg_895 + 63'd2);

assign cur_px_estimate_ptr6_2_fu_619_p2 = (tmp_2_cast_reg_895 + 63'd4);

assign cur_px_estimate_ptr6_3_fu_634_p2 = (tmp_2_cast_reg_895 + 63'd6);

assign cur_px_estimate_ptr6_4_fu_624_p1 = cur_px_estimate_ptr6_2_fu_619_p2;

assign cur_px_estimate_ptr6_5_fu_639_p1 = cur_px_estimate_ptr6_3_fu_634_p2;

assign cur_px_estimate_ptr6_fu_609_p1 = cur_px_estimate_ptr6_1_fu_604_p2;

assign exitcond2_fu_510_p2 = ((indvar3_reg_390 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond3_fu_493_p2 = ((ap_phi_mux_indvar_phi_fu_382_p4 == 19'd473760) ? 1'b1 : 1'b0);

assign exitcond4_fu_649_p2 = ((indvar6_reg_401 == 6'd36) ? 1'b1 : 1'b0);

assign exitcond5_fu_739_p2 = ((indvar8_reg_412 == 4'd8) ? 1'b1 : 1'b0);

assign indvar4_fu_505_p1 = indvar_reg_378_pp0_iter1_reg;

assign indvar_next2_fu_516_p2 = (indvar3_reg_390 + 4'd1);

assign indvar_next3_fu_655_p2 = (indvar6_reg_401 + 6'd1);

assign indvar_next4_fu_745_p2 = (indvar8_reg_412 + 4'd1);

assign indvar_next_fu_499_p2 = (ap_phi_mux_indvar_phi_fu_382_p4 + 19'd1);

assign inv_out7_fu_443_p4 = {{inv_out[63:2]}};

assign m_axi_patches_ARADDR = 64'd0;

assign m_axi_patches_ARBURST = 2'd0;

assign m_axi_patches_ARCACHE = 4'd0;

assign m_axi_patches_ARID = 1'd0;

assign m_axi_patches_ARLEN = 8'd0;

assign m_axi_patches_ARLOCK = 2'd0;

assign m_axi_patches_ARPROT = 3'd0;

assign m_axi_patches_ARQOS = 4'd0;

assign m_axi_patches_ARREGION = 4'd0;

assign m_axi_patches_ARSIZE = 3'd0;

assign m_axi_patches_ARUSER = 1'd0;

assign m_axi_patches_ARVALID = 1'b0;

assign m_axi_patches_AWADDR = 64'd0;

assign m_axi_patches_AWBURST = 2'd0;

assign m_axi_patches_AWCACHE = 4'd0;

assign m_axi_patches_AWID = 1'd0;

assign m_axi_patches_AWLEN = 8'd0;

assign m_axi_patches_AWLOCK = 2'd0;

assign m_axi_patches_AWPROT = 3'd0;

assign m_axi_patches_AWQOS = 4'd0;

assign m_axi_patches_AWREGION = 4'd0;

assign m_axi_patches_AWSIZE = 3'd0;

assign m_axi_patches_AWUSER = 1'd0;

assign m_axi_patches_AWVALID = 1'b0;

assign m_axi_patches_BREADY = 1'b0;

assign m_axi_patches_RREADY = 1'b0;

assign m_axi_patches_WDATA = 32'd0;

assign m_axi_patches_WID = 1'd0;

assign m_axi_patches_WLAST = 1'b0;

assign m_axi_patches_WSTRB = 4'd0;

assign m_axi_patches_WUSER = 1'd0;

assign m_axi_patches_WVALID = 1'b0;

assign sel_tmp10_i_fu_857_p2 = ((tmp_4_fu_751_p1 == 3'd5) ? 1'b1 : 1'b0);

assign sel_tmp11_i_fu_863_p3 = ((sel_tmp10_i_fu_857_p2[0:0] === 1'b1) ? cur_px_estimate_2_1 : sel_tmp9_i_fu_849_p3);

assign sel_tmp12_i_fu_871_p2 = ((tmp_4_fu_751_p1 == 3'd6) ? 1'b1 : 1'b0);

assign sel_tmp1_i_fu_793_p3 = ((sel_tmp_i_fu_787_p2[0:0] === 1'b1) ? cur_px_estimate_0_0 : cur_px_estimate_3_1);

assign sel_tmp2_i_fu_801_p2 = ((tmp_4_fu_751_p1 == 3'd1) ? 1'b1 : 1'b0);

assign sel_tmp3_i_fu_807_p3 = ((sel_tmp2_i_fu_801_p2[0:0] === 1'b1) ? cur_px_estimate_0_1 : sel_tmp1_i_fu_793_p3);

assign sel_tmp4_i_fu_815_p2 = ((tmp_4_fu_751_p1 == 3'd2) ? 1'b1 : 1'b0);

assign sel_tmp5_i_fu_821_p3 = ((sel_tmp4_i_fu_815_p2[0:0] === 1'b1) ? cur_px_estimate_1_0 : sel_tmp3_i_fu_807_p3);

assign sel_tmp6_i_fu_829_p2 = ((tmp_4_fu_751_p1 == 3'd3) ? 1'b1 : 1'b0);

assign sel_tmp7_i_fu_835_p3 = ((sel_tmp6_i_fu_829_p2[0:0] === 1'b1) ? cur_px_estimate_1_1 : sel_tmp5_i_fu_821_p3);

assign sel_tmp8_i_fu_843_p2 = ((tmp_4_fu_751_p1 == 3'd4) ? 1'b1 : 1'b0);

assign sel_tmp9_i_fu_849_p3 = ((sel_tmp8_i_fu_843_p2[0:0] === 1'b1) ? cur_px_estimate_2_0 : sel_tmp7_i_fu_835_p3);

assign sel_tmp_i_fu_787_p2 = ((tmp_4_fu_751_p1 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_2_cast_fu_477_p1 = cur_px_estimate_ptr5_fu_463_p4;

assign tmp_2_fu_473_p1 = cur_px_estimate_ptr5_fu_463_p4;

assign tmp_3_fu_532_p1 = indvar3_reg_390[0:0];

assign tmp_4_fu_751_p1 = indvar8_reg_412[2:0];

assign tmp_8_1_fu_589_p1 = reg_431;

assign tmp_8_2_fu_594_p1 = reg_431;

assign tmp_8_3_fu_599_p1 = reg_431;

assign tmp_8_fu_584_p1 = reg_431;

assign tmp_fu_453_p1 = inv_out7_fu_443_p4;

assign transfer_pyr_read_read_fu_228_p2 = transfer_pyr;

always @ (posedge ap_clk) begin
    debug_addr_reg_889[63:62] <= 2'b00;
    tmp_2_cast_reg_895[62] <= 1'b0;
    pos_addr_reg_902[63:62] <= 2'b00;
    pos_addr_1_reg_977[63] <= 1'b0;
    pos_addr_2_reg_988[63] <= 1'b0;
    pos_addr_3_reg_999[63] <= 1'b0;
end

endmodule //batch_align2D
