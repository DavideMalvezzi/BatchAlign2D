// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _generic_floor_float_s_HH_
#define _generic_floor_float_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "generic_floor_float_s_mask_table1.h"

namespace ap_rtl {

struct generic_floor_float_s : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > x;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    generic_floor_float_s(sc_module_name name);
    SC_HAS_PROCESS(generic_floor_float_s);

    ~generic_floor_float_s();

    sc_trace_file* mVcdFile;

    generic_floor_float_s_mask_table1* mask_table1_U;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > mask_table1_address0;
    sc_signal< sc_logic > mask_table1_ce0;
    sc_signal< sc_lv<23> > mask_table1_q0;
    sc_signal< sc_lv<1> > p_Result_s_reg_278;
    sc_signal< sc_lv<8> > tmp_V_reg_287;
    sc_signal< sc_lv<23> > tmp_V_1_fu_83_p1;
    sc_signal< sc_lv<23> > tmp_V_1_reg_295;
    sc_signal< sc_lv<31> > tmp_3_fu_102_p1;
    sc_signal< sc_lv<31> > tmp_3_reg_306;
    sc_signal< sc_lv<64> > tmp_8_fu_97_p1;
    sc_signal< sc_lv<32> > p_Val2_s_fu_61_p1;
    sc_signal< sc_lv<5> > index_V_fu_87_p4;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > p_Result_6_fu_127_p3;
    sc_signal< sc_lv<32> > mask_cast_fu_123_p1;
    sc_signal< sc_lv<32> > p_Val2_1_fu_134_p2;
    sc_signal< sc_lv<23> > tmp_V_3_fu_158_p1;
    sc_signal< sc_lv<8> > tmp_V_2_fu_148_p4;
    sc_signal< sc_lv<1> > p_Result_7_fu_140_p3;
    sc_signal< sc_lv<23> > xs_sig_V_3_fu_162_p3;
    sc_signal< sc_lv<23> > tmp_s_fu_179_p2;
    sc_signal< sc_lv<1> > xs_sign_V_fu_174_p2;
    sc_signal< sc_lv<8> > xs_exp_V_fu_168_p3;
    sc_signal< sc_lv<23> > xs_sig_V_fu_185_p2;
    sc_signal< sc_lv<1> > tmp_fu_106_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_111_p2;
    sc_signal< sc_lv<1> > sel_tmp2_demorgan_fu_201_p2;
    sc_signal< sc_lv<32> > p_Result_5_fu_116_p3;
    sc_signal< sc_lv<32> > p_Result_8_fu_191_p4;
    sc_signal< sc_lv<32> > sel_tmp3_v_fu_207_p3;
    sc_signal< sc_lv<1> > sel_tmp4_fu_219_p2;
    sc_signal< sc_lv<1> > sel_tmp5_fu_225_p2;
    sc_signal< sc_lv<32> > sel_tmp3_fu_215_p1;
    sc_signal< sc_lv<1> > notrhs_fu_243_p2;
    sc_signal< sc_lv<1> > notlhs_fu_238_p2;
    sc_signal< sc_lv<1> > sel_tmp8_fu_248_p2;
    sc_signal< sc_lv<1> > tmp2_fu_254_p2;
    sc_signal< sc_lv<1> > sel_tmp9_fu_259_p2;
    sc_signal< sc_lv<32> > sel_tmp6_fu_231_p3;
    sc_signal< sc_lv<32> > p_s_fu_265_p3;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_96;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<23> ap_const_lv23_7FFFFF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_BF800000;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_index_V_fu_87_p4();
    void thread_mask_cast_fu_123_p1();
    void thread_mask_table1_address0();
    void thread_mask_table1_ce0();
    void thread_notlhs_fu_238_p2();
    void thread_notrhs_fu_243_p2();
    void thread_p_Result_5_fu_116_p3();
    void thread_p_Result_6_fu_127_p3();
    void thread_p_Result_7_fu_140_p3();
    void thread_p_Result_8_fu_191_p4();
    void thread_p_Val2_1_fu_134_p2();
    void thread_p_Val2_s_fu_61_p1();
    void thread_p_s_fu_265_p3();
    void thread_sel_tmp2_demorgan_fu_201_p2();
    void thread_sel_tmp3_fu_215_p1();
    void thread_sel_tmp3_v_fu_207_p3();
    void thread_sel_tmp4_fu_219_p2();
    void thread_sel_tmp5_fu_225_p2();
    void thread_sel_tmp6_fu_231_p3();
    void thread_sel_tmp8_fu_248_p2();
    void thread_sel_tmp9_fu_259_p2();
    void thread_tmp2_fu_254_p2();
    void thread_tmp_3_fu_102_p1();
    void thread_tmp_5_fu_111_p2();
    void thread_tmp_8_fu_97_p1();
    void thread_tmp_V_1_fu_83_p1();
    void thread_tmp_V_2_fu_148_p4();
    void thread_tmp_V_3_fu_158_p1();
    void thread_tmp_fu_106_p2();
    void thread_tmp_s_fu_179_p2();
    void thread_xs_exp_V_fu_168_p3();
    void thread_xs_sig_V_3_fu_162_p3();
    void thread_xs_sig_V_fu_185_p2();
    void thread_xs_sign_V_fu_174_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
