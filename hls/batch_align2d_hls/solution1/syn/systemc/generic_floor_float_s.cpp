// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "generic_floor_float_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic generic_floor_float_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic generic_floor_float_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> generic_floor_float_s::ap_ST_fsm_state1 = "1";
const sc_lv<2> generic_floor_float_s::ap_ST_fsm_state2 = "10";
const sc_lv<32> generic_floor_float_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> generic_floor_float_s::ap_const_lv32_1F = "11111";
const sc_lv<32> generic_floor_float_s::ap_const_lv32_17 = "10111";
const sc_lv<32> generic_floor_float_s::ap_const_lv32_1E = "11110";
const sc_lv<32> generic_floor_float_s::ap_const_lv32_1B = "11011";
const sc_lv<8> generic_floor_float_s::ap_const_lv8_7F = "1111111";
const sc_lv<32> generic_floor_float_s::ap_const_lv32_1 = "1";
const sc_lv<8> generic_floor_float_s::ap_const_lv8_96 = "10010110";
const sc_lv<31> generic_floor_float_s::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<1> generic_floor_float_s::ap_const_lv1_1 = "1";
const sc_lv<23> generic_floor_float_s::ap_const_lv23_7FFFFF = "11111111111111111111111";
const sc_lv<23> generic_floor_float_s::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<8> generic_floor_float_s::ap_const_lv8_0 = "00000000";
const sc_lv<32> generic_floor_float_s::ap_const_lv32_BF800000 = "10111111100000000000000000000000";
const bool generic_floor_float_s::ap_const_boolean_1 = true;

generic_floor_float_s::generic_floor_float_s(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mask_table1_U = new generic_floor_float_s_mask_table1("mask_table1_U");
    mask_table1_U->clk(ap_clk);
    mask_table1_U->reset(ap_rst);
    mask_table1_U->address0(mask_table1_address0);
    mask_table1_U->ce0(mask_table1_ce0);
    mask_table1_U->q0(mask_table1_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_s_fu_265_p3 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_index_V_fu_87_p4);
    sensitive << ( p_Val2_s_fu_61_p1 );

    SC_METHOD(thread_mask_cast_fu_123_p1);
    sensitive << ( mask_table1_q0 );

    SC_METHOD(thread_mask_table1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_8_fu_97_p1 );

    SC_METHOD(thread_mask_table1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_notlhs_fu_238_p2);
    sensitive << ( tmp_V_1_reg_295 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_notrhs_fu_243_p2);
    sensitive << ( tmp_V_reg_287 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_p_Result_5_fu_116_p3);
    sensitive << ( p_Result_s_reg_278 );

    SC_METHOD(thread_p_Result_6_fu_127_p3);
    sensitive << ( tmp_3_reg_306 );

    SC_METHOD(thread_p_Result_7_fu_140_p3);
    sensitive << ( p_Val2_1_fu_134_p2 );

    SC_METHOD(thread_p_Result_8_fu_191_p4);
    sensitive << ( xs_sign_V_fu_174_p2 );
    sensitive << ( xs_exp_V_fu_168_p3 );
    sensitive << ( xs_sig_V_fu_185_p2 );

    SC_METHOD(thread_p_Val2_1_fu_134_p2);
    sensitive << ( p_Result_6_fu_127_p3 );
    sensitive << ( mask_cast_fu_123_p1 );

    SC_METHOD(thread_p_Val2_s_fu_61_p1);
    sensitive << ( x );

    SC_METHOD(thread_p_s_fu_265_p3);
    sensitive << ( sel_tmp9_fu_259_p2 );
    sensitive << ( sel_tmp6_fu_231_p3 );

    SC_METHOD(thread_sel_tmp2_demorgan_fu_201_p2);
    sensitive << ( tmp_fu_106_p2 );
    sensitive << ( tmp_5_fu_111_p2 );

    SC_METHOD(thread_sel_tmp3_fu_215_p1);
    sensitive << ( sel_tmp3_v_fu_207_p3 );

    SC_METHOD(thread_sel_tmp3_v_fu_207_p3);
    sensitive << ( sel_tmp2_demorgan_fu_201_p2 );
    sensitive << ( p_Result_5_fu_116_p3 );
    sensitive << ( p_Result_8_fu_191_p4 );

    SC_METHOD(thread_sel_tmp4_fu_219_p2);
    sensitive << ( tmp_fu_106_p2 );

    SC_METHOD(thread_sel_tmp5_fu_225_p2);
    sensitive << ( tmp_5_fu_111_p2 );
    sensitive << ( sel_tmp4_fu_219_p2 );

    SC_METHOD(thread_sel_tmp6_fu_231_p3);
    sensitive << ( x );
    sensitive << ( sel_tmp5_fu_225_p2 );
    sensitive << ( sel_tmp3_fu_215_p1 );

    SC_METHOD(thread_sel_tmp8_fu_248_p2);
    sensitive << ( notrhs_fu_243_p2 );
    sensitive << ( notlhs_fu_238_p2 );

    SC_METHOD(thread_sel_tmp9_fu_259_p2);
    sensitive << ( tmp_fu_106_p2 );
    sensitive << ( tmp2_fu_254_p2 );

    SC_METHOD(thread_tmp2_fu_254_p2);
    sensitive << ( p_Result_s_reg_278 );
    sensitive << ( sel_tmp8_fu_248_p2 );

    SC_METHOD(thread_tmp_3_fu_102_p1);
    sensitive << ( p_Val2_s_fu_61_p1 );

    SC_METHOD(thread_tmp_5_fu_111_p2);
    sensitive << ( tmp_V_reg_287 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_8_fu_97_p1);
    sensitive << ( index_V_fu_87_p4 );

    SC_METHOD(thread_tmp_V_1_fu_83_p1);
    sensitive << ( p_Val2_s_fu_61_p1 );

    SC_METHOD(thread_tmp_V_2_fu_148_p4);
    sensitive << ( p_Val2_1_fu_134_p2 );

    SC_METHOD(thread_tmp_V_3_fu_158_p1);
    sensitive << ( p_Val2_1_fu_134_p2 );

    SC_METHOD(thread_tmp_fu_106_p2);
    sensitive << ( tmp_V_reg_287 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_s_fu_179_p2);
    sensitive << ( mask_table1_q0 );

    SC_METHOD(thread_xs_exp_V_fu_168_p3);
    sensitive << ( p_Result_s_reg_278 );
    sensitive << ( tmp_V_reg_287 );
    sensitive << ( tmp_V_2_fu_148_p4 );

    SC_METHOD(thread_xs_sig_V_3_fu_162_p3);
    sensitive << ( p_Result_s_reg_278 );
    sensitive << ( tmp_V_1_reg_295 );
    sensitive << ( tmp_V_3_fu_158_p1 );

    SC_METHOD(thread_xs_sig_V_fu_185_p2);
    sensitive << ( xs_sig_V_3_fu_162_p3 );
    sensitive << ( tmp_s_fu_179_p2 );

    SC_METHOD(thread_xs_sign_V_fu_174_p2);
    sensitive << ( p_Result_s_reg_278 );
    sensitive << ( p_Result_7_fu_140_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "01";
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "generic_floor_float_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, mask_table1_address0, "mask_table1_address0");
    sc_trace(mVcdFile, mask_table1_ce0, "mask_table1_ce0");
    sc_trace(mVcdFile, mask_table1_q0, "mask_table1_q0");
    sc_trace(mVcdFile, p_Result_s_reg_278, "p_Result_s_reg_278");
    sc_trace(mVcdFile, tmp_V_reg_287, "tmp_V_reg_287");
    sc_trace(mVcdFile, tmp_V_1_fu_83_p1, "tmp_V_1_fu_83_p1");
    sc_trace(mVcdFile, tmp_V_1_reg_295, "tmp_V_1_reg_295");
    sc_trace(mVcdFile, tmp_3_fu_102_p1, "tmp_3_fu_102_p1");
    sc_trace(mVcdFile, tmp_3_reg_306, "tmp_3_reg_306");
    sc_trace(mVcdFile, tmp_8_fu_97_p1, "tmp_8_fu_97_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_61_p1, "p_Val2_s_fu_61_p1");
    sc_trace(mVcdFile, index_V_fu_87_p4, "index_V_fu_87_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_Result_6_fu_127_p3, "p_Result_6_fu_127_p3");
    sc_trace(mVcdFile, mask_cast_fu_123_p1, "mask_cast_fu_123_p1");
    sc_trace(mVcdFile, p_Val2_1_fu_134_p2, "p_Val2_1_fu_134_p2");
    sc_trace(mVcdFile, tmp_V_3_fu_158_p1, "tmp_V_3_fu_158_p1");
    sc_trace(mVcdFile, tmp_V_2_fu_148_p4, "tmp_V_2_fu_148_p4");
    sc_trace(mVcdFile, p_Result_7_fu_140_p3, "p_Result_7_fu_140_p3");
    sc_trace(mVcdFile, xs_sig_V_3_fu_162_p3, "xs_sig_V_3_fu_162_p3");
    sc_trace(mVcdFile, tmp_s_fu_179_p2, "tmp_s_fu_179_p2");
    sc_trace(mVcdFile, xs_sign_V_fu_174_p2, "xs_sign_V_fu_174_p2");
    sc_trace(mVcdFile, xs_exp_V_fu_168_p3, "xs_exp_V_fu_168_p3");
    sc_trace(mVcdFile, xs_sig_V_fu_185_p2, "xs_sig_V_fu_185_p2");
    sc_trace(mVcdFile, tmp_fu_106_p2, "tmp_fu_106_p2");
    sc_trace(mVcdFile, tmp_5_fu_111_p2, "tmp_5_fu_111_p2");
    sc_trace(mVcdFile, sel_tmp2_demorgan_fu_201_p2, "sel_tmp2_demorgan_fu_201_p2");
    sc_trace(mVcdFile, p_Result_5_fu_116_p3, "p_Result_5_fu_116_p3");
    sc_trace(mVcdFile, p_Result_8_fu_191_p4, "p_Result_8_fu_191_p4");
    sc_trace(mVcdFile, sel_tmp3_v_fu_207_p3, "sel_tmp3_v_fu_207_p3");
    sc_trace(mVcdFile, sel_tmp4_fu_219_p2, "sel_tmp4_fu_219_p2");
    sc_trace(mVcdFile, sel_tmp5_fu_225_p2, "sel_tmp5_fu_225_p2");
    sc_trace(mVcdFile, sel_tmp3_fu_215_p1, "sel_tmp3_fu_215_p1");
    sc_trace(mVcdFile, notrhs_fu_243_p2, "notrhs_fu_243_p2");
    sc_trace(mVcdFile, notlhs_fu_238_p2, "notlhs_fu_238_p2");
    sc_trace(mVcdFile, sel_tmp8_fu_248_p2, "sel_tmp8_fu_248_p2");
    sc_trace(mVcdFile, tmp2_fu_254_p2, "tmp2_fu_254_p2");
    sc_trace(mVcdFile, sel_tmp9_fu_259_p2, "sel_tmp9_fu_259_p2");
    sc_trace(mVcdFile, sel_tmp6_fu_231_p3, "sel_tmp6_fu_231_p3");
    sc_trace(mVcdFile, p_s_fu_265_p3, "p_s_fu_265_p3");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

generic_floor_float_s::~generic_floor_float_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete mask_table1_U;
}

void generic_floor_float_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_preg = p_s_fu_265_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Result_s_reg_278 = p_Val2_s_fu_61_p1.read().range(31, 31);
        tmp_3_reg_306 = tmp_3_fu_102_p1.read();
        tmp_V_1_reg_295 = tmp_V_1_fu_83_p1.read();
        tmp_V_reg_287 = p_Val2_s_fu_61_p1.read().range(30, 23);
    }
}

void generic_floor_float_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void generic_floor_float_s::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void generic_floor_float_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void generic_floor_float_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void generic_floor_float_s::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void generic_floor_float_s::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return = p_s_fu_265_p3.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void generic_floor_float_s::thread_index_V_fu_87_p4() {
    index_V_fu_87_p4 = p_Val2_s_fu_61_p1.read().range(27, 23);
}

void generic_floor_float_s::thread_mask_cast_fu_123_p1() {
    mask_cast_fu_123_p1 = esl_zext<32,23>(mask_table1_q0.read());
}

void generic_floor_float_s::thread_mask_table1_address0() {
    mask_table1_address0 =  (sc_lv<5>) (tmp_8_fu_97_p1.read());
}

void generic_floor_float_s::thread_mask_table1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        mask_table1_ce0 = ap_const_logic_1;
    } else {
        mask_table1_ce0 = ap_const_logic_0;
    }
}

void generic_floor_float_s::thread_notlhs_fu_238_p2() {
    notlhs_fu_238_p2 = (!tmp_V_1_reg_295.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_V_1_reg_295.read() != ap_const_lv23_0);
}

void generic_floor_float_s::thread_notrhs_fu_243_p2() {
    notrhs_fu_243_p2 = (!tmp_V_reg_287.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_V_reg_287.read() != ap_const_lv8_0);
}

void generic_floor_float_s::thread_p_Result_5_fu_116_p3() {
    p_Result_5_fu_116_p3 = esl_concat<1,31>(p_Result_s_reg_278.read(), ap_const_lv31_0);
}

void generic_floor_float_s::thread_p_Result_6_fu_127_p3() {
    p_Result_6_fu_127_p3 = esl_concat<1,31>(ap_const_lv1_1, tmp_3_reg_306.read());
}

void generic_floor_float_s::thread_p_Result_7_fu_140_p3() {
    p_Result_7_fu_140_p3 = p_Val2_1_fu_134_p2.read().range(31, 31);
}

void generic_floor_float_s::thread_p_Result_8_fu_191_p4() {
    p_Result_8_fu_191_p4 = esl_concat<9,23>(esl_concat<1,8>(xs_sign_V_fu_174_p2.read(), xs_exp_V_fu_168_p3.read()), xs_sig_V_fu_185_p2.read());
}

void generic_floor_float_s::thread_p_Val2_1_fu_134_p2() {
    p_Val2_1_fu_134_p2 = (!p_Result_6_fu_127_p3.read().is_01() || !mask_cast_fu_123_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_Result_6_fu_127_p3.read()) + sc_biguint<32>(mask_cast_fu_123_p1.read()));
}

void generic_floor_float_s::thread_p_Val2_s_fu_61_p1() {
    p_Val2_s_fu_61_p1 = x.read();
}

void generic_floor_float_s::thread_p_s_fu_265_p3() {
    p_s_fu_265_p3 = (!sel_tmp9_fu_259_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp9_fu_259_p2.read()[0].to_bool())? ap_const_lv32_BF800000: sel_tmp6_fu_231_p3.read());
}

void generic_floor_float_s::thread_sel_tmp2_demorgan_fu_201_p2() {
    sel_tmp2_demorgan_fu_201_p2 = (tmp_fu_106_p2.read() | tmp_5_fu_111_p2.read());
}

void generic_floor_float_s::thread_sel_tmp3_fu_215_p1() {
    sel_tmp3_fu_215_p1 = sel_tmp3_v_fu_207_p3.read();
}

void generic_floor_float_s::thread_sel_tmp3_v_fu_207_p3() {
    sel_tmp3_v_fu_207_p3 = (!sel_tmp2_demorgan_fu_201_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_demorgan_fu_201_p2.read()[0].to_bool())? p_Result_5_fu_116_p3.read(): p_Result_8_fu_191_p4.read());
}

void generic_floor_float_s::thread_sel_tmp4_fu_219_p2() {
    sel_tmp4_fu_219_p2 = (tmp_fu_106_p2.read() ^ ap_const_lv1_1);
}

void generic_floor_float_s::thread_sel_tmp5_fu_225_p2() {
    sel_tmp5_fu_225_p2 = (tmp_5_fu_111_p2.read() & sel_tmp4_fu_219_p2.read());
}

void generic_floor_float_s::thread_sel_tmp6_fu_231_p3() {
    sel_tmp6_fu_231_p3 = (!sel_tmp5_fu_225_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_fu_225_p2.read()[0].to_bool())? x.read(): sel_tmp3_fu_215_p1.read());
}

void generic_floor_float_s::thread_sel_tmp8_fu_248_p2() {
    sel_tmp8_fu_248_p2 = (notrhs_fu_243_p2.read() | notlhs_fu_238_p2.read());
}

void generic_floor_float_s::thread_sel_tmp9_fu_259_p2() {
    sel_tmp9_fu_259_p2 = (tmp2_fu_254_p2.read() & tmp_fu_106_p2.read());
}

void generic_floor_float_s::thread_tmp2_fu_254_p2() {
    tmp2_fu_254_p2 = (p_Result_s_reg_278.read() & sel_tmp8_fu_248_p2.read());
}

void generic_floor_float_s::thread_tmp_3_fu_102_p1() {
    tmp_3_fu_102_p1 = p_Val2_s_fu_61_p1.read().range(31-1, 0);
}

void generic_floor_float_s::thread_tmp_5_fu_111_p2() {
    tmp_5_fu_111_p2 = (!tmp_V_reg_287.read().is_01() || !ap_const_lv8_96.is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_V_reg_287.read()) > sc_biguint<8>(ap_const_lv8_96));
}

void generic_floor_float_s::thread_tmp_8_fu_97_p1() {
    tmp_8_fu_97_p1 = esl_zext<64,5>(index_V_fu_87_p4.read());
}

void generic_floor_float_s::thread_tmp_V_1_fu_83_p1() {
    tmp_V_1_fu_83_p1 = p_Val2_s_fu_61_p1.read().range(23-1, 0);
}

void generic_floor_float_s::thread_tmp_V_2_fu_148_p4() {
    tmp_V_2_fu_148_p4 = p_Val2_1_fu_134_p2.read().range(30, 23);
}

void generic_floor_float_s::thread_tmp_V_3_fu_158_p1() {
    tmp_V_3_fu_158_p1 = p_Val2_1_fu_134_p2.read().range(23-1, 0);
}

void generic_floor_float_s::thread_tmp_fu_106_p2() {
    tmp_fu_106_p2 = (!tmp_V_reg_287.read().is_01() || !ap_const_lv8_7F.is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_V_reg_287.read()) < sc_biguint<8>(ap_const_lv8_7F));
}

void generic_floor_float_s::thread_tmp_s_fu_179_p2() {
    tmp_s_fu_179_p2 = (mask_table1_q0.read() ^ ap_const_lv23_7FFFFF);
}

void generic_floor_float_s::thread_xs_exp_V_fu_168_p3() {
    xs_exp_V_fu_168_p3 = (!p_Result_s_reg_278.read()[0].is_01())? sc_lv<8>(): ((p_Result_s_reg_278.read()[0].to_bool())? tmp_V_2_fu_148_p4.read(): tmp_V_reg_287.read());
}

void generic_floor_float_s::thread_xs_sig_V_3_fu_162_p3() {
    xs_sig_V_3_fu_162_p3 = (!p_Result_s_reg_278.read()[0].is_01())? sc_lv<23>(): ((p_Result_s_reg_278.read()[0].to_bool())? tmp_V_3_fu_158_p1.read(): tmp_V_1_reg_295.read());
}

void generic_floor_float_s::thread_xs_sig_V_fu_185_p2() {
    xs_sig_V_fu_185_p2 = (xs_sig_V_3_fu_162_p3.read() & tmp_s_fu_179_p2.read());
}

void generic_floor_float_s::thread_xs_sign_V_fu_174_p2() {
    xs_sign_V_fu_174_p2 = (p_Result_s_reg_278.read() & p_Result_7_fu_140_p3.read());
}

void generic_floor_float_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

