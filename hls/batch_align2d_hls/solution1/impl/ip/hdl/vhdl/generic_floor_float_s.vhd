-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generic_floor_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of generic_floor_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_reg_287 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_83_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_295 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_fu_102_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_reg_306 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_97_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_61_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_V_fu_87_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Result_6_fu_127_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_cast_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_3_fu_158_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_2_fu_148_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_fu_140_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sig_V_3_fu_162_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_179_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_V_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_fu_168_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sig_V_fu_185_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_demorgan_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_116_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_191_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_v_fu_207_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_231_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component generic_floor_float_s_mask_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    mask_table1_U : component generic_floor_float_s_mask_table1
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= p_s_fu_265_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Result_s_reg_278 <= p_Val2_s_fu_61_p1(31 downto 31);
                tmp_3_reg_306 <= tmp_3_fu_102_p1;
                tmp_V_1_reg_295 <= tmp_V_1_fu_83_p1;
                tmp_V_reg_287 <= p_Val2_s_fu_61_p1(30 downto 23);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, p_s_fu_265_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= p_s_fu_265_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    index_V_fu_87_p4 <= p_Val2_s_fu_61_p1(27 downto 23);
    mask_cast_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table1_q0),32));
    mask_table1_address0 <= tmp_8_fu_97_p1(5 - 1 downto 0);

    mask_table1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs_fu_238_p2 <= "0" when (tmp_V_1_reg_295 = ap_const_lv23_0) else "1";
    notrhs_fu_243_p2 <= "0" when (tmp_V_reg_287 = ap_const_lv8_0) else "1";
    p_Result_5_fu_116_p3 <= (p_Result_s_reg_278 & ap_const_lv31_0);
    p_Result_6_fu_127_p3 <= (ap_const_lv1_1 & tmp_3_reg_306);
    p_Result_7_fu_140_p3 <= p_Val2_1_fu_134_p2(31 downto 31);
    p_Result_8_fu_191_p4 <= ((xs_sign_V_fu_174_p2 & xs_exp_V_fu_168_p3) & xs_sig_V_fu_185_p2);
    p_Val2_1_fu_134_p2 <= std_logic_vector(unsigned(p_Result_6_fu_127_p3) + unsigned(mask_cast_fu_123_p1));
    p_Val2_s_fu_61_p1 <= x;
    p_s_fu_265_p3 <= 
        ap_const_lv32_BF800000 when (sel_tmp9_fu_259_p2(0) = '1') else 
        sel_tmp6_fu_231_p3;
    sel_tmp2_demorgan_fu_201_p2 <= (tmp_fu_106_p2 or tmp_5_fu_111_p2);
    sel_tmp3_fu_215_p1 <= sel_tmp3_v_fu_207_p3;
    sel_tmp3_v_fu_207_p3 <= 
        p_Result_5_fu_116_p3 when (sel_tmp2_demorgan_fu_201_p2(0) = '1') else 
        p_Result_8_fu_191_p4;
    sel_tmp4_fu_219_p2 <= (tmp_fu_106_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_225_p2 <= (tmp_5_fu_111_p2 and sel_tmp4_fu_219_p2);
    sel_tmp6_fu_231_p3 <= 
        x when (sel_tmp5_fu_225_p2(0) = '1') else 
        sel_tmp3_fu_215_p1;
    sel_tmp8_fu_248_p2 <= (notrhs_fu_243_p2 or notlhs_fu_238_p2);
    sel_tmp9_fu_259_p2 <= (tmp_fu_106_p2 and tmp2_fu_254_p2);
    tmp2_fu_254_p2 <= (sel_tmp8_fu_248_p2 and p_Result_s_reg_278);
    tmp_3_fu_102_p1 <= p_Val2_s_fu_61_p1(31 - 1 downto 0);
    tmp_5_fu_111_p2 <= "1" when (unsigned(tmp_V_reg_287) > unsigned(ap_const_lv8_96)) else "0";
    tmp_8_fu_97_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_87_p4),64));
    tmp_V_1_fu_83_p1 <= p_Val2_s_fu_61_p1(23 - 1 downto 0);
    tmp_V_2_fu_148_p4 <= p_Val2_1_fu_134_p2(30 downto 23);
    tmp_V_3_fu_158_p1 <= p_Val2_1_fu_134_p2(23 - 1 downto 0);
    tmp_fu_106_p2 <= "1" when (unsigned(tmp_V_reg_287) < unsigned(ap_const_lv8_7F)) else "0";
    tmp_s_fu_179_p2 <= (mask_table1_q0 xor ap_const_lv23_7FFFFF);
    xs_exp_V_fu_168_p3 <= 
        tmp_V_2_fu_148_p4 when (p_Result_s_reg_278(0) = '1') else 
        tmp_V_reg_287;
    xs_sig_V_3_fu_162_p3 <= 
        tmp_V_3_fu_158_p1 when (p_Result_s_reg_278(0) = '1') else 
        tmp_V_1_reg_295;
    xs_sig_V_fu_185_p2 <= (xs_sig_V_3_fu_162_p3 and tmp_s_fu_179_p2);
    xs_sign_V_fu_174_p2 <= (p_Result_s_reg_278 and p_Result_7_fu_140_p3);
end behav;
