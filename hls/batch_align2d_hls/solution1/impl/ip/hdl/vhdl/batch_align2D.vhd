-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity batch_align2D is
generic (
    C_M_AXI_PYR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_PYR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PYR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PYR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PYR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PYR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PYR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PYR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PATCHES_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_PATCHES_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PATCHES_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PATCHES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PATCHES_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PATCHES_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PATCHES_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PATCHES_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POS_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_POS_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_POS_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POS_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_POS_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POS_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POS_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POS_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DEBUG_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DEBUG_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DEBUG_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DEBUG_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DEBUG_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DEBUG_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DEBUG_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DEBUG_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_PARAM_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_PARAM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PYR_USER_VALUE : INTEGER := 0;
    C_M_AXI_PYR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PYR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_POS_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_POS_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_POS_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DEBUG_USER_VALUE : INTEGER := 0;
    C_M_AXI_DEBUG_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DEBUG_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_pyr_AWVALID : OUT STD_LOGIC;
    m_axi_pyr_AWREADY : IN STD_LOGIC;
    m_axi_pyr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_ADDR_WIDTH-1 downto 0);
    m_axi_pyr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_ID_WIDTH-1 downto 0);
    m_axi_pyr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_pyr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pyr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pyr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pyr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pyr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pyr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pyr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pyr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_AWUSER_WIDTH-1 downto 0);
    m_axi_pyr_WVALID : OUT STD_LOGIC;
    m_axi_pyr_WREADY : IN STD_LOGIC;
    m_axi_pyr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_DATA_WIDTH-1 downto 0);
    m_axi_pyr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_DATA_WIDTH/8-1 downto 0);
    m_axi_pyr_WLAST : OUT STD_LOGIC;
    m_axi_pyr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_ID_WIDTH-1 downto 0);
    m_axi_pyr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_WUSER_WIDTH-1 downto 0);
    m_axi_pyr_ARVALID : OUT STD_LOGIC;
    m_axi_pyr_ARREADY : IN STD_LOGIC;
    m_axi_pyr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_ADDR_WIDTH-1 downto 0);
    m_axi_pyr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_ID_WIDTH-1 downto 0);
    m_axi_pyr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_pyr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pyr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pyr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pyr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pyr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pyr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pyr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pyr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PYR_ARUSER_WIDTH-1 downto 0);
    m_axi_pyr_RVALID : IN STD_LOGIC;
    m_axi_pyr_RREADY : OUT STD_LOGIC;
    m_axi_pyr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PYR_DATA_WIDTH-1 downto 0);
    m_axi_pyr_RLAST : IN STD_LOGIC;
    m_axi_pyr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PYR_ID_WIDTH-1 downto 0);
    m_axi_pyr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PYR_RUSER_WIDTH-1 downto 0);
    m_axi_pyr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pyr_BVALID : IN STD_LOGIC;
    m_axi_pyr_BREADY : OUT STD_LOGIC;
    m_axi_pyr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pyr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PYR_ID_WIDTH-1 downto 0);
    m_axi_pyr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PYR_BUSER_WIDTH-1 downto 0);
    m_axi_patches_AWVALID : OUT STD_LOGIC;
    m_axi_patches_AWREADY : IN STD_LOGIC;
    m_axi_patches_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_ADDR_WIDTH-1 downto 0);
    m_axi_patches_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_ID_WIDTH-1 downto 0);
    m_axi_patches_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_patches_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_patches_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_patches_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_patches_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_patches_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_patches_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_patches_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_patches_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_AWUSER_WIDTH-1 downto 0);
    m_axi_patches_WVALID : OUT STD_LOGIC;
    m_axi_patches_WREADY : IN STD_LOGIC;
    m_axi_patches_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_DATA_WIDTH-1 downto 0);
    m_axi_patches_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_DATA_WIDTH/8-1 downto 0);
    m_axi_patches_WLAST : OUT STD_LOGIC;
    m_axi_patches_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_ID_WIDTH-1 downto 0);
    m_axi_patches_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_WUSER_WIDTH-1 downto 0);
    m_axi_patches_ARVALID : OUT STD_LOGIC;
    m_axi_patches_ARREADY : IN STD_LOGIC;
    m_axi_patches_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_ADDR_WIDTH-1 downto 0);
    m_axi_patches_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_ID_WIDTH-1 downto 0);
    m_axi_patches_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_patches_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_patches_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_patches_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_patches_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_patches_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_patches_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_patches_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_patches_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PATCHES_ARUSER_WIDTH-1 downto 0);
    m_axi_patches_RVALID : IN STD_LOGIC;
    m_axi_patches_RREADY : OUT STD_LOGIC;
    m_axi_patches_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PATCHES_DATA_WIDTH-1 downto 0);
    m_axi_patches_RLAST : IN STD_LOGIC;
    m_axi_patches_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PATCHES_ID_WIDTH-1 downto 0);
    m_axi_patches_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PATCHES_RUSER_WIDTH-1 downto 0);
    m_axi_patches_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_patches_BVALID : IN STD_LOGIC;
    m_axi_patches_BREADY : OUT STD_LOGIC;
    m_axi_patches_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_patches_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PATCHES_ID_WIDTH-1 downto 0);
    m_axi_patches_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PATCHES_BUSER_WIDTH-1 downto 0);
    m_axi_pos_r_AWVALID : OUT STD_LOGIC;
    m_axi_pos_r_AWREADY : IN STD_LOGIC;
    m_axi_pos_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_ADDR_WIDTH-1 downto 0);
    m_axi_pos_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_ID_WIDTH-1 downto 0);
    m_axi_pos_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_pos_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pos_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pos_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pos_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pos_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pos_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pos_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pos_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_AWUSER_WIDTH-1 downto 0);
    m_axi_pos_r_WVALID : OUT STD_LOGIC;
    m_axi_pos_r_WREADY : IN STD_LOGIC;
    m_axi_pos_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_DATA_WIDTH-1 downto 0);
    m_axi_pos_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_DATA_WIDTH/8-1 downto 0);
    m_axi_pos_r_WLAST : OUT STD_LOGIC;
    m_axi_pos_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_ID_WIDTH-1 downto 0);
    m_axi_pos_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_WUSER_WIDTH-1 downto 0);
    m_axi_pos_r_ARVALID : OUT STD_LOGIC;
    m_axi_pos_r_ARREADY : IN STD_LOGIC;
    m_axi_pos_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_ADDR_WIDTH-1 downto 0);
    m_axi_pos_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_ID_WIDTH-1 downto 0);
    m_axi_pos_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_pos_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pos_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pos_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pos_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pos_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pos_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pos_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pos_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POS_R_ARUSER_WIDTH-1 downto 0);
    m_axi_pos_r_RVALID : IN STD_LOGIC;
    m_axi_pos_r_RREADY : OUT STD_LOGIC;
    m_axi_pos_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_POS_R_DATA_WIDTH-1 downto 0);
    m_axi_pos_r_RLAST : IN STD_LOGIC;
    m_axi_pos_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_POS_R_ID_WIDTH-1 downto 0);
    m_axi_pos_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_POS_R_RUSER_WIDTH-1 downto 0);
    m_axi_pos_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pos_r_BVALID : IN STD_LOGIC;
    m_axi_pos_r_BREADY : OUT STD_LOGIC;
    m_axi_pos_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pos_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_POS_R_ID_WIDTH-1 downto 0);
    m_axi_pos_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_POS_R_BUSER_WIDTH-1 downto 0);
    m_axi_debug_AWVALID : OUT STD_LOGIC;
    m_axi_debug_AWREADY : IN STD_LOGIC;
    m_axi_debug_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_ADDR_WIDTH-1 downto 0);
    m_axi_debug_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_ID_WIDTH-1 downto 0);
    m_axi_debug_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_debug_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_debug_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_debug_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_debug_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_debug_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_debug_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_debug_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_debug_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_AWUSER_WIDTH-1 downto 0);
    m_axi_debug_WVALID : OUT STD_LOGIC;
    m_axi_debug_WREADY : IN STD_LOGIC;
    m_axi_debug_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_DATA_WIDTH-1 downto 0);
    m_axi_debug_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_DATA_WIDTH/8-1 downto 0);
    m_axi_debug_WLAST : OUT STD_LOGIC;
    m_axi_debug_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_ID_WIDTH-1 downto 0);
    m_axi_debug_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_WUSER_WIDTH-1 downto 0);
    m_axi_debug_ARVALID : OUT STD_LOGIC;
    m_axi_debug_ARREADY : IN STD_LOGIC;
    m_axi_debug_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_ADDR_WIDTH-1 downto 0);
    m_axi_debug_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_ID_WIDTH-1 downto 0);
    m_axi_debug_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_debug_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_debug_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_debug_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_debug_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_debug_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_debug_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_debug_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_debug_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DEBUG_ARUSER_WIDTH-1 downto 0);
    m_axi_debug_RVALID : IN STD_LOGIC;
    m_axi_debug_RREADY : OUT STD_LOGIC;
    m_axi_debug_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DEBUG_DATA_WIDTH-1 downto 0);
    m_axi_debug_RLAST : IN STD_LOGIC;
    m_axi_debug_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DEBUG_ID_WIDTH-1 downto 0);
    m_axi_debug_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DEBUG_RUSER_WIDTH-1 downto 0);
    m_axi_debug_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_debug_BVALID : IN STD_LOGIC;
    m_axi_debug_BREADY : OUT STD_LOGIC;
    m_axi_debug_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_debug_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DEBUG_ID_WIDTH-1 downto 0);
    m_axi_debug_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DEBUG_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_param_AWVALID : IN STD_LOGIC;
    s_axi_param_AWREADY : OUT STD_LOGIC;
    s_axi_param_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PARAM_ADDR_WIDTH-1 downto 0);
    s_axi_param_WVALID : IN STD_LOGIC;
    s_axi_param_WREADY : OUT STD_LOGIC;
    s_axi_param_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PARAM_DATA_WIDTH-1 downto 0);
    s_axi_param_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PARAM_DATA_WIDTH/8-1 downto 0);
    s_axi_param_ARVALID : IN STD_LOGIC;
    s_axi_param_ARREADY : OUT STD_LOGIC;
    s_axi_param_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PARAM_ADDR_WIDTH-1 downto 0);
    s_axi_param_RVALID : OUT STD_LOGIC;
    s_axi_param_RREADY : IN STD_LOGIC;
    s_axi_param_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PARAM_DATA_WIDTH-1 downto 0);
    s_axi_param_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_param_BVALID : OUT STD_LOGIC;
    s_axi_param_BREADY : IN STD_LOGIC;
    s_axi_param_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of batch_align2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "batch_align2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=236975,HLS_SYN_TPT=none,HLS_SYN_MEM=238,HLS_SYN_DSP=2,HLS_SYN_FF=3605,HLS_SYN_LUT=4822,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_PATCHES_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_PATCHES_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_PATCHES_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_73AA0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001110011101010100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_const_lv19_3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv19_73AA0 : STD_LOGIC_VECTOR (18 downto 0) := "1110011101010100000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv63_2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv63_4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv63_6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal pyr_data_ptr : STD_LOGIC_VECTOR (63 downto 0);
    signal img_w : STD_LOGIC_VECTOR (15 downto 0);
    signal img_h : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_patch_with_border_ptr : STD_LOGIC_VECTOR (63 downto 0);
    signal cur_px_estimate_ptr : STD_LOGIC_VECTOR (63 downto 0);
    signal levels : STD_LOGIC_VECTOR (127 downto 0);
    signal converged_ap_vld : STD_LOGIC;
    signal n_iter : STD_LOGIC_VECTOR (31 downto 0);
    signal transfer_pyr : STD_LOGIC_VECTOR (0 downto 0);
    signal inv_out : STD_LOGIC_VECTOR (63 downto 0);
    signal pyr_data_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal pyr_data_ce0 : STD_LOGIC;
    signal pyr_data_we0 : STD_LOGIC;
    signal pyr_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cur_px_estimate_3_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cur_px_estimate_0_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cur_px_estimate_0_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cur_px_estimate_1_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cur_px_estimate_1_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cur_px_estimate_2_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cur_px_estimate_2_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cur_px_estimate_3_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pyr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal pyr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond3_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal pos_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal pos_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal pos_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal pos_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond5_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal debug_blk_n_AW : STD_LOGIC;
    signal debug_blk_n_B : STD_LOGIC;
    signal debug_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond4_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal pyr_AWREADY : STD_LOGIC;
    signal pyr_WREADY : STD_LOGIC;
    signal pyr_ARVALID : STD_LOGIC;
    signal pyr_ARREADY : STD_LOGIC;
    signal pyr_RVALID : STD_LOGIC;
    signal pyr_RREADY : STD_LOGIC;
    signal pyr_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal pyr_RLAST : STD_LOGIC;
    signal pyr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal pyr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pyr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal pyr_BVALID : STD_LOGIC;
    signal pyr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal pyr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal pyr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_r_AWVALID : STD_LOGIC;
    signal pos_r_AWREADY : STD_LOGIC;
    signal pos_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_r_WVALID : STD_LOGIC;
    signal pos_r_WREADY : STD_LOGIC;
    signal pos_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_r_ARVALID : STD_LOGIC;
    signal pos_r_ARREADY : STD_LOGIC;
    signal pos_r_RVALID : STD_LOGIC;
    signal pos_r_RREADY : STD_LOGIC;
    signal pos_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_r_RLAST : STD_LOGIC;
    signal pos_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal pos_r_BVALID : STD_LOGIC;
    signal pos_r_BREADY : STD_LOGIC;
    signal pos_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal pos_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal debug_AWVALID : STD_LOGIC;
    signal debug_AWREADY : STD_LOGIC;
    signal debug_WVALID : STD_LOGIC;
    signal debug_WREADY : STD_LOGIC;
    signal debug_ARREADY : STD_LOGIC;
    signal debug_RVALID : STD_LOGIC;
    signal debug_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_RLAST : STD_LOGIC;
    signal debug_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal debug_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal debug_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal debug_BVALID : STD_LOGIC;
    signal debug_BREADY : STD_LOGIC;
    signal debug_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal debug_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal debug_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_378 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_reg_378_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar3_reg_390 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar6_reg_401 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar8_reg_412 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_431 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_pos_r_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_pos_r_WREADY : STD_LOGIC;
    signal ap_block_state30_io : BOOLEAN;
    signal transfer_pyr_read_read_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal debug_addr_reg_889 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_cast_fu_477_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2_cast_reg_895 : STD_LOGIC_VECTOR (62 downto 0);
    signal pos_addr_reg_902 : STD_LOGIC_VECTOR (63 downto 0);
    signal pyr_addr_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_916_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_499_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_next_reg_920 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal pyr_addr_read_reg_925 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_next2_fu_516_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal p_t1_reg_939 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_532_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_1_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_2_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_1_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_8_3_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_addr_1_reg_977 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_ioackin_debug_AWREADY : STD_LOGIC;
    signal ap_block_state27_io : BOOLEAN;
    signal tmp_9_2_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_addr_2_reg_988 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_3_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_addr_3_reg_999 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state39_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_debug_WREADY : STD_LOGIC;
    signal ap_block_state40_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal indvar_next3_fu_655_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_1_13_fu_661_p38 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_13_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state46_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state47_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state47_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal indvar_next4_fu_745_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal UnifiedRetVal_i_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal UnifiedRetVal_i_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state39 : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state46 : STD_LOGIC;
    signal ap_phi_mux_indvar_phi_fu_382_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar4_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cur_px_estimate_ptr6_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cur_px_estimate_ptr6_4_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cur_px_estimate_ptr6_5_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_pyr_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_pyr_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_pos_r_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_pos_r_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_pos_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_debug_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_pos_r_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_debug_WREADY : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_out7_fu_443_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal cur_px_estimate_ptr5_fu_463_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal cur_px_estimate_ptr6_1_fu_604_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal cur_px_estimate_ptr6_2_fu_619_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal cur_px_estimate_ptr6_3_fu_634_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_4_fu_751_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp_i_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_fu_793_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_i_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_807_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_i_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_i_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp8_i_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_i_fu_835_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp10_i_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_i_fu_849_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp12_i_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_i_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_ce : STD_LOGIC;
    signal grp_fu_428_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_condition_1615 : BOOLEAN;

    component batch_align2D_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_sitofp_32ns_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_mux_366_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component batch_align2D_pyr_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component batch_align2D_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        pyr_data_ptr : OUT STD_LOGIC_VECTOR (63 downto 0);
        ref_patch_with_border_ptr : OUT STD_LOGIC_VECTOR (63 downto 0);
        cur_px_estimate_ptr : OUT STD_LOGIC_VECTOR (63 downto 0);
        inv_out : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component batch_align2D_param_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        img_w : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_h : OUT STD_LOGIC_VECTOR (15 downto 0);
        levels : OUT STD_LOGIC_VECTOR (127 downto 0);
        converged : IN STD_LOGIC_VECTOR (63 downto 0);
        converged_ap_vld : IN STD_LOGIC;
        n_iter : OUT STD_LOGIC_VECTOR (31 downto 0);
        transfer_pyr : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component batch_align2D_pyr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component batch_align2D_pos_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component batch_align2D_debug_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pyr_data_U : component batch_align2D_pyr_data
    generic map (
        DataWidth => 8,
        AddressRange => 473760,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pyr_data_address0,
        ce0 => pyr_data_ce0,
        we0 => pyr_data_we0,
        d0 => pyr_addr_read_reg_925,
        q0 => pyr_data_q0);

    batch_align2D_ctrl_s_axi_U : component batch_align2D_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        pyr_data_ptr => pyr_data_ptr,
        ref_patch_with_border_ptr => ref_patch_with_border_ptr,
        cur_px_estimate_ptr => cur_px_estimate_ptr,
        inv_out => inv_out);

    batch_align2D_param_s_axi_U : component batch_align2D_param_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PARAM_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PARAM_DATA_WIDTH)
    port map (
        AWVALID => s_axi_param_AWVALID,
        AWREADY => s_axi_param_AWREADY,
        AWADDR => s_axi_param_AWADDR,
        WVALID => s_axi_param_WVALID,
        WREADY => s_axi_param_WREADY,
        WDATA => s_axi_param_WDATA,
        WSTRB => s_axi_param_WSTRB,
        ARVALID => s_axi_param_ARVALID,
        ARREADY => s_axi_param_ARREADY,
        ARADDR => s_axi_param_ARADDR,
        RVALID => s_axi_param_RVALID,
        RREADY => s_axi_param_RREADY,
        RDATA => s_axi_param_RDATA,
        RRESP => s_axi_param_RRESP,
        BVALID => s_axi_param_BVALID,
        BREADY => s_axi_param_BREADY,
        BRESP => s_axi_param_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        img_w => img_w,
        img_h => img_h,
        levels => levels,
        converged => ap_const_lv64_0,
        converged_ap_vld => converged_ap_vld,
        n_iter => n_iter,
        transfer_pyr => transfer_pyr);

    batch_align2D_pyr_m_axi_U : component batch_align2D_pyr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PYR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PYR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PYR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PYR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PYR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PYR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PYR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PYR_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_PYR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PYR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PYR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_pyr_AWVALID,
        AWREADY => m_axi_pyr_AWREADY,
        AWADDR => m_axi_pyr_AWADDR,
        AWID => m_axi_pyr_AWID,
        AWLEN => m_axi_pyr_AWLEN,
        AWSIZE => m_axi_pyr_AWSIZE,
        AWBURST => m_axi_pyr_AWBURST,
        AWLOCK => m_axi_pyr_AWLOCK,
        AWCACHE => m_axi_pyr_AWCACHE,
        AWPROT => m_axi_pyr_AWPROT,
        AWQOS => m_axi_pyr_AWQOS,
        AWREGION => m_axi_pyr_AWREGION,
        AWUSER => m_axi_pyr_AWUSER,
        WVALID => m_axi_pyr_WVALID,
        WREADY => m_axi_pyr_WREADY,
        WDATA => m_axi_pyr_WDATA,
        WSTRB => m_axi_pyr_WSTRB,
        WLAST => m_axi_pyr_WLAST,
        WID => m_axi_pyr_WID,
        WUSER => m_axi_pyr_WUSER,
        ARVALID => m_axi_pyr_ARVALID,
        ARREADY => m_axi_pyr_ARREADY,
        ARADDR => m_axi_pyr_ARADDR,
        ARID => m_axi_pyr_ARID,
        ARLEN => m_axi_pyr_ARLEN,
        ARSIZE => m_axi_pyr_ARSIZE,
        ARBURST => m_axi_pyr_ARBURST,
        ARLOCK => m_axi_pyr_ARLOCK,
        ARCACHE => m_axi_pyr_ARCACHE,
        ARPROT => m_axi_pyr_ARPROT,
        ARQOS => m_axi_pyr_ARQOS,
        ARREGION => m_axi_pyr_ARREGION,
        ARUSER => m_axi_pyr_ARUSER,
        RVALID => m_axi_pyr_RVALID,
        RREADY => m_axi_pyr_RREADY,
        RDATA => m_axi_pyr_RDATA,
        RLAST => m_axi_pyr_RLAST,
        RID => m_axi_pyr_RID,
        RUSER => m_axi_pyr_RUSER,
        RRESP => m_axi_pyr_RRESP,
        BVALID => m_axi_pyr_BVALID,
        BREADY => m_axi_pyr_BREADY,
        BRESP => m_axi_pyr_BRESP,
        BID => m_axi_pyr_BID,
        BUSER => m_axi_pyr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => pyr_ARVALID,
        I_ARREADY => pyr_ARREADY,
        I_ARADDR => pyr_addr_reg_910,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_73AA0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => pyr_RVALID,
        I_RREADY => pyr_RREADY,
        I_RDATA => pyr_RDATA,
        I_RID => pyr_RID,
        I_RUSER => pyr_RUSER,
        I_RRESP => pyr_RRESP,
        I_RLAST => pyr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => pyr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => pyr_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => pyr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => pyr_BRESP,
        I_BID => pyr_BID,
        I_BUSER => pyr_BUSER);

    batch_align2D_pos_r_m_axi_U : component batch_align2D_pos_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_POS_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_POS_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_POS_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_POS_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_POS_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_POS_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_POS_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_POS_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_POS_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_POS_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_POS_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_pos_r_AWVALID,
        AWREADY => m_axi_pos_r_AWREADY,
        AWADDR => m_axi_pos_r_AWADDR,
        AWID => m_axi_pos_r_AWID,
        AWLEN => m_axi_pos_r_AWLEN,
        AWSIZE => m_axi_pos_r_AWSIZE,
        AWBURST => m_axi_pos_r_AWBURST,
        AWLOCK => m_axi_pos_r_AWLOCK,
        AWCACHE => m_axi_pos_r_AWCACHE,
        AWPROT => m_axi_pos_r_AWPROT,
        AWQOS => m_axi_pos_r_AWQOS,
        AWREGION => m_axi_pos_r_AWREGION,
        AWUSER => m_axi_pos_r_AWUSER,
        WVALID => m_axi_pos_r_WVALID,
        WREADY => m_axi_pos_r_WREADY,
        WDATA => m_axi_pos_r_WDATA,
        WSTRB => m_axi_pos_r_WSTRB,
        WLAST => m_axi_pos_r_WLAST,
        WID => m_axi_pos_r_WID,
        WUSER => m_axi_pos_r_WUSER,
        ARVALID => m_axi_pos_r_ARVALID,
        ARREADY => m_axi_pos_r_ARREADY,
        ARADDR => m_axi_pos_r_ARADDR,
        ARID => m_axi_pos_r_ARID,
        ARLEN => m_axi_pos_r_ARLEN,
        ARSIZE => m_axi_pos_r_ARSIZE,
        ARBURST => m_axi_pos_r_ARBURST,
        ARLOCK => m_axi_pos_r_ARLOCK,
        ARCACHE => m_axi_pos_r_ARCACHE,
        ARPROT => m_axi_pos_r_ARPROT,
        ARQOS => m_axi_pos_r_ARQOS,
        ARREGION => m_axi_pos_r_ARREGION,
        ARUSER => m_axi_pos_r_ARUSER,
        RVALID => m_axi_pos_r_RVALID,
        RREADY => m_axi_pos_r_RREADY,
        RDATA => m_axi_pos_r_RDATA,
        RLAST => m_axi_pos_r_RLAST,
        RID => m_axi_pos_r_RID,
        RUSER => m_axi_pos_r_RUSER,
        RRESP => m_axi_pos_r_RRESP,
        BVALID => m_axi_pos_r_BVALID,
        BREADY => m_axi_pos_r_BREADY,
        BRESP => m_axi_pos_r_BRESP,
        BID => m_axi_pos_r_BID,
        BUSER => m_axi_pos_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => pos_r_ARVALID,
        I_ARREADY => pos_r_ARREADY,
        I_ARADDR => pos_addr_reg_902,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_8,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => pos_r_RVALID,
        I_RREADY => pos_r_RREADY,
        I_RDATA => pos_r_RDATA,
        I_RID => pos_r_RID,
        I_RUSER => pos_r_RUSER,
        I_RRESP => pos_r_RRESP,
        I_RLAST => pos_r_RLAST,
        I_AWVALID => pos_r_AWVALID,
        I_AWREADY => pos_r_AWREADY,
        I_AWADDR => pos_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => pos_r_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => pos_r_WVALID,
        I_WREADY => pos_r_WREADY,
        I_WDATA => pos_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => pos_r_BVALID,
        I_BREADY => pos_r_BREADY,
        I_BRESP => pos_r_BRESP,
        I_BID => pos_r_BID,
        I_BUSER => pos_r_BUSER);

    batch_align2D_debug_m_axi_U : component batch_align2D_debug_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DEBUG_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DEBUG_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DEBUG_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DEBUG_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DEBUG_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DEBUG_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DEBUG_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DEBUG_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DEBUG_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DEBUG_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DEBUG_CACHE_VALUE)
    port map (
        AWVALID => m_axi_debug_AWVALID,
        AWREADY => m_axi_debug_AWREADY,
        AWADDR => m_axi_debug_AWADDR,
        AWID => m_axi_debug_AWID,
        AWLEN => m_axi_debug_AWLEN,
        AWSIZE => m_axi_debug_AWSIZE,
        AWBURST => m_axi_debug_AWBURST,
        AWLOCK => m_axi_debug_AWLOCK,
        AWCACHE => m_axi_debug_AWCACHE,
        AWPROT => m_axi_debug_AWPROT,
        AWQOS => m_axi_debug_AWQOS,
        AWREGION => m_axi_debug_AWREGION,
        AWUSER => m_axi_debug_AWUSER,
        WVALID => m_axi_debug_WVALID,
        WREADY => m_axi_debug_WREADY,
        WDATA => m_axi_debug_WDATA,
        WSTRB => m_axi_debug_WSTRB,
        WLAST => m_axi_debug_WLAST,
        WID => m_axi_debug_WID,
        WUSER => m_axi_debug_WUSER,
        ARVALID => m_axi_debug_ARVALID,
        ARREADY => m_axi_debug_ARREADY,
        ARADDR => m_axi_debug_ARADDR,
        ARID => m_axi_debug_ARID,
        ARLEN => m_axi_debug_ARLEN,
        ARSIZE => m_axi_debug_ARSIZE,
        ARBURST => m_axi_debug_ARBURST,
        ARLOCK => m_axi_debug_ARLOCK,
        ARCACHE => m_axi_debug_ARCACHE,
        ARPROT => m_axi_debug_ARPROT,
        ARQOS => m_axi_debug_ARQOS,
        ARREGION => m_axi_debug_ARREGION,
        ARUSER => m_axi_debug_ARUSER,
        RVALID => m_axi_debug_RVALID,
        RREADY => m_axi_debug_RREADY,
        RDATA => m_axi_debug_RDATA,
        RLAST => m_axi_debug_RLAST,
        RID => m_axi_debug_RID,
        RUSER => m_axi_debug_RUSER,
        RRESP => m_axi_debug_RRESP,
        BVALID => m_axi_debug_BVALID,
        BREADY => m_axi_debug_BREADY,
        BRESP => m_axi_debug_BRESP,
        BID => m_axi_debug_BID,
        BUSER => m_axi_debug_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => debug_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => debug_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => debug_RDATA,
        I_RID => debug_RID,
        I_RUSER => debug_RUSER,
        I_RRESP => debug_RRESP,
        I_RLAST => debug_RLAST,
        I_AWVALID => debug_AWVALID,
        I_AWREADY => debug_AWREADY,
        I_AWADDR => debug_addr_reg_889,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_24,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => debug_WVALID,
        I_WREADY => debug_WREADY,
        I_WDATA => tmp_1_13_reg_1014,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => debug_BVALID,
        I_BREADY => debug_BREADY,
        I_BRESP => debug_BRESP,
        I_BID => debug_BID,
        I_BUSER => debug_BUSER);

    batch_align2D_fadd_32ns_32ns_32_4_full_dsp_1_U1 : component batch_align2D_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_423_p0,
        din1 => ap_const_lv32_0,
        ce => grp_fu_423_ce,
        dout => grp_fu_423_p2);

    batch_align2D_sitofp_32ns_32_3_1_U2 : component batch_align2D_sitofp_32ns_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_428_p0,
        ce => grp_fu_428_ce,
        dout => grp_fu_428_p1);

    batch_align2D_mux_366_32_1_1_U3 : component batch_align2D_mux_366_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => ap_const_lv32_0,
        din5 => ap_const_lv32_0,
        din6 => ap_const_lv32_0,
        din7 => ap_const_lv32_0,
        din8 => ap_const_lv32_0,
        din9 => ap_const_lv32_0,
        din10 => ap_const_lv32_0,
        din11 => ap_const_lv32_0,
        din12 => ap_const_lv32_0,
        din13 => ap_const_lv32_0,
        din14 => ap_const_lv32_0,
        din15 => ap_const_lv32_0,
        din16 => ap_const_lv32_0,
        din17 => ap_const_lv32_0,
        din18 => ap_const_lv32_0,
        din19 => ap_const_lv32_0,
        din20 => ap_const_lv32_0,
        din21 => ap_const_lv32_0,
        din22 => ap_const_lv32_0,
        din23 => ap_const_lv32_0,
        din24 => ap_const_lv32_0,
        din25 => ap_const_lv32_0,
        din26 => ap_const_lv32_0,
        din27 => ap_const_lv32_0,
        din28 => ap_const_lv32_0,
        din29 => ap_const_lv32_0,
        din30 => ap_const_lv32_0,
        din31 => ap_const_lv32_0,
        din32 => ap_const_lv32_0,
        din33 => ap_const_lv32_0,
        din34 => ap_const_lv32_0,
        din35 => ap_const_lv32_0,
        din36 => indvar6_reg_401,
        dout => tmp_1_13_fu_661_p38);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state39) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state39))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state39);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state46) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_0) or (debug_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state46))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state46);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((not(((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_0) or (debug_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_debug_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_debug_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    if ((ap_const_boolean_0 = ap_block_state27_io)) then 
                        ap_reg_ioackin_debug_AWREADY <= ap_const_logic_0;
                    elsif ((debug_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_debug_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_debug_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_debug_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_1615)) then
                    if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then 
                        ap_reg_ioackin_debug_WREADY <= ap_const_logic_0;
                    elsif (((debug_WREADY = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_01001))) then 
                        ap_reg_ioackin_debug_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_pos_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_pos_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    if ((ap_sig_ioackin_pos_r_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_pos_r_ARREADY <= ap_const_logic_0;
                    elsif ((pos_r_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_pos_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_pos_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_pos_r_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_0) or (debug_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_boolean_0 = ap_block_state30_io) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_boolean_0 = ap_block_state27_io) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
                    ap_reg_ioackin_pos_r_AWREADY <= ap_const_logic_0;
                elsif ((((pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((debug_BVALID = ap_const_logic_1) and (pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
                    ap_reg_ioackin_pos_r_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_pos_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_pos_r_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond5_reg_1019 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_state30_io) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
                    ap_reg_ioackin_pos_r_WREADY <= ap_const_logic_0;
                elsif ((((pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((exitcond5_reg_1019 = ap_const_lv1_0) and (pos_r_WREADY = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001)) or ((pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
                    ap_reg_ioackin_pos_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_pyr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_pyr_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_pyr_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_pyr_ARREADY <= ap_const_logic_0;
                    elsif ((pyr_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_pyr_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar3_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar3_reg_390 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_fu_510_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar3_reg_390 <= indvar_next2_fu_516_p2;
            end if; 
        end if;
    end process;

    indvar6_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                indvar6_reg_401 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond4_fu_649_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar6_reg_401 <= indvar_next3_fu_655_p2;
            end if; 
        end if;
    end process;

    indvar8_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_0) or (debug_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                indvar8_reg_412 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond5_fu_739_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar8_reg_412 <= indvar_next4_fu_745_p2;
            end if; 
        end if;
    end process;

    indvar_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_378 <= ap_const_lv19_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_reg_916 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_reg_378 <= indvar_next_reg_920;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond5_fu_739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                UnifiedRetVal_i_reg_1028 <= UnifiedRetVal_i_fu_877_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_t1_reg_939 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_3_reg_943 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                cur_px_estimate_0_0 <= pos_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_943 = ap_const_lv1_1) and (p_t1_reg_939 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                cur_px_estimate_0_1 <= pos_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_t1_reg_939 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_3_reg_943 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                cur_px_estimate_1_0 <= pos_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_943 = ap_const_lv1_1) and (p_t1_reg_939 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                cur_px_estimate_1_1 <= pos_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_t1_reg_939 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_3_reg_943 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                cur_px_estimate_2_0 <= pos_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_943 = ap_const_lv1_1) and (p_t1_reg_939 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                cur_px_estimate_2_1 <= pos_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_t1_reg_939 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_3_reg_943 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                cur_px_estimate_3_0 <= pos_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_943 = ap_const_lv1_1) and (p_t1_reg_939 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                cur_px_estimate_3_1 <= pos_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    debug_addr_reg_889(61 downto 0) <= tmp_fu_453_p1(61 downto 0);
                    pos_addr_reg_902(61 downto 0) <= tmp_2_fu_473_p1(61 downto 0);
                pyr_addr_reg_910 <= pyr_data_ptr;
                    tmp_2_cast_reg_895(61 downto 0) <= tmp_2_cast_fu_477_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond3_reg_916 <= exitcond3_fu_493_p2;
                exitcond3_reg_916_pp0_iter1_reg <= exitcond3_reg_916;
                indvar_reg_378_pp0_iter1_reg <= indvar_reg_378;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond4_reg_1005 <= exitcond4_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond5_reg_1019 <= exitcond5_fu_739_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_920 <= indvar_next_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_t1_reg_939 <= indvar3_reg_390(2 downto 1);
                tmp_3_reg_943 <= tmp_3_fu_532_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state27_io) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    pos_addr_1_reg_977(62 downto 0) <= cur_px_estimate_ptr6_fu_609_p1(62 downto 0);
                tmp_9_2_reg_983 <= grp_fu_428_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    pos_addr_2_reg_988(62 downto 0) <= cur_px_estimate_ptr6_4_fu_624_p1(62 downto 0);
                    pos_addr_3_reg_999(62 downto 0) <= cur_px_estimate_ptr6_5_fu_639_p1(62 downto 0);
                tmp_9_3_reg_994 <= grp_fu_428_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_reg_916 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pyr_addr_read_reg_925 <= pyr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_431 <= pyr_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_boolean_0 = ap_block_state30_io) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then
                reg_435 <= grp_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond4_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_1_13_reg_1014 <= tmp_1_13_fu_661_p38;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_9_1_reg_967 <= grp_fu_428_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_9_reg_957 <= grp_fu_428_p1;
            end if;
        end if;
    end process;
    debug_addr_reg_889(63 downto 62) <= "00";
    tmp_2_cast_reg_895(62) <= '0';
    pos_addr_reg_902(63 downto 62) <= "00";
    pos_addr_1_reg_977(63) <= '0';
    pos_addr_2_reg_988(63) <= '0';
    pos_addr_3_reg_999(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_CS_fsm_state27, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state36, ap_CS_fsm_state29, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state33, ap_CS_fsm_state38, pos_r_BVALID, debug_BVALID, ap_sig_ioackin_pos_r_AWREADY, ap_sig_ioackin_pos_r_WREADY, ap_block_state30_io, transfer_pyr_read_read_fu_228_p2, exitcond3_fu_493_p2, ap_enable_reg_pp0_iter0, exitcond2_fu_510_p2, ap_enable_reg_pp1_iter0, ap_block_state27_io, exitcond4_fu_649_p2, ap_enable_reg_pp2_iter0, exitcond5_fu_739_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_sig_ioackin_pyr_ARREADY, ap_sig_ioackin_pos_r_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (transfer_pyr_read_read_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((transfer_pyr_read_read_fu_228_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_pyr_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond3_fu_493_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond3_fu_493_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_sig_ioackin_pos_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond2_fu_510_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond2_fu_510_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_boolean_0 = ap_block_state27_io) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_boolean_0 = ap_block_state30_io) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond4_fu_649_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond4_fu_649_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if ((not(((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_0) or (debug_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond5_fu_739_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond5_fu_739_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    UnifiedRetVal_i_fu_877_p3 <= 
        cur_px_estimate_3_0 when (sel_tmp12_i_fu_871_p2(0) = '1') else 
        sel_tmp11_i_fu_863_p3;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(35);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(41);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(17);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(25);
    ap_CS_fsm_state30 <= ap_CS_fsm(26);
    ap_CS_fsm_state31 <= ap_CS_fsm(27);
    ap_CS_fsm_state32 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(29);
    ap_CS_fsm_state35 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(34);
    ap_CS_fsm_state45 <= ap_CS_fsm(40);
    ap_CS_fsm_state52 <= ap_CS_fsm(46);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond3_reg_916, pyr_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond3_reg_916 = ap_const_lv1_0) and (pyr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond3_reg_916, pyr_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond3_reg_916 = ap_const_lv1_0) and (pyr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, pos_r_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((pos_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, pos_r_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((pos_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_state40_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state40_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_state40_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state40_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state47_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state47_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state47_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state47_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond3_reg_916, pyr_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((exitcond3_reg_916 = ap_const_lv1_0) and (pyr_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(pos_r_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= (pos_r_RVALID = ap_const_logic_0);
    end process;


    ap_block_state27_io_assign_proc : process(ap_sig_ioackin_pos_r_AWREADY, ap_sig_ioackin_debug_AWREADY)
    begin
                ap_block_state27_io <= ((ap_sig_ioackin_debug_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state30_io_assign_proc : process(ap_sig_ioackin_pos_r_AWREADY, ap_sig_ioackin_pos_r_WREADY)
    begin
                ap_block_state30_io <= ((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_0) or (ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state39_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state40_io_assign_proc : process(exitcond4_reg_1005, ap_sig_ioackin_debug_WREADY)
    begin
                ap_block_state40_io <= ((exitcond4_reg_1005 = ap_const_lv1_0) and (ap_sig_ioackin_debug_WREADY = ap_const_logic_0));
    end process;

        ap_block_state40_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state47_io_assign_proc : process(exitcond5_reg_1019, ap_sig_ioackin_pos_r_WREADY)
    begin
                ap_block_state47_io <= ((exitcond5_reg_1019 = ap_const_lv1_0) and (ap_sig_ioackin_pos_r_WREADY = ap_const_logic_0));
    end process;

        ap_block_state47_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1615_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1005)
    begin
                ap_condition_1615 <= ((exitcond4_reg_1005 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond3_fu_493_p2)
    begin
        if ((exitcond3_fu_493_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(exitcond2_fu_510_p2)
    begin
        if ((exitcond2_fu_510_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state39_assign_proc : process(exitcond4_fu_649_p2)
    begin
        if ((exitcond4_fu_649_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state39 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state46_assign_proc : process(exitcond5_fu_739_p2)
    begin
        if ((exitcond5_fu_739_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state46 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state52, pos_r_BVALID)
    begin
        if (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_382_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond3_reg_916, indvar_reg_378, indvar_next_reg_920)
    begin
        if (((exitcond3_reg_916 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_382_p4 <= indvar_next_reg_920;
        else 
            ap_phi_mux_indvar_phi_fu_382_p4 <= indvar_reg_378;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state52, pos_r_BVALID)
    begin
        if (((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_debug_AWREADY_assign_proc : process(debug_AWREADY, ap_reg_ioackin_debug_AWREADY)
    begin
        if ((ap_reg_ioackin_debug_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_debug_AWREADY <= debug_AWREADY;
        else 
            ap_sig_ioackin_debug_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_debug_WREADY_assign_proc : process(debug_WREADY, ap_reg_ioackin_debug_WREADY)
    begin
        if ((ap_reg_ioackin_debug_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_debug_WREADY <= debug_WREADY;
        else 
            ap_sig_ioackin_debug_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_pos_r_ARREADY_assign_proc : process(pos_r_ARREADY, ap_reg_ioackin_pos_r_ARREADY)
    begin
        if ((ap_reg_ioackin_pos_r_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_pos_r_ARREADY <= pos_r_ARREADY;
        else 
            ap_sig_ioackin_pos_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_pos_r_AWREADY_assign_proc : process(pos_r_AWREADY, ap_reg_ioackin_pos_r_AWREADY)
    begin
        if ((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_pos_r_AWREADY <= pos_r_AWREADY;
        else 
            ap_sig_ioackin_pos_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_pos_r_WREADY_assign_proc : process(pos_r_WREADY, ap_reg_ioackin_pos_r_WREADY)
    begin
        if ((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_pos_r_WREADY <= pos_r_WREADY;
        else 
            ap_sig_ioackin_pos_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_pyr_ARREADY_assign_proc : process(pyr_ARREADY, ap_reg_ioackin_pyr_ARREADY)
    begin
        if ((ap_reg_ioackin_pyr_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_pyr_ARREADY <= pyr_ARREADY;
        else 
            ap_sig_ioackin_pyr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    converged_ap_vld_assign_proc : process(ap_CS_fsm_state30, ap_block_state30_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state30_io) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            converged_ap_vld <= ap_const_logic_1;
        else 
            converged_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cur_px_estimate_ptr5_fu_463_p4 <= cur_px_estimate_ptr(63 downto 2);
    cur_px_estimate_ptr6_1_fu_604_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_895) + unsigned(ap_const_lv63_2));
    cur_px_estimate_ptr6_2_fu_619_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_895) + unsigned(ap_const_lv63_4));
    cur_px_estimate_ptr6_3_fu_634_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_895) + unsigned(ap_const_lv63_6));
    cur_px_estimate_ptr6_4_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cur_px_estimate_ptr6_2_fu_619_p2),64));
    cur_px_estimate_ptr6_5_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cur_px_estimate_ptr6_3_fu_634_p2),64));
    cur_px_estimate_ptr6_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cur_px_estimate_ptr6_1_fu_604_p2),64));

    debug_AWVALID_assign_proc : process(ap_CS_fsm_state27, ap_reg_ioackin_debug_AWREADY)
    begin
        if (((ap_reg_ioackin_debug_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            debug_AWVALID <= ap_const_logic_1;
        else 
            debug_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    debug_BREADY_assign_proc : process(ap_CS_fsm_state45, debug_BVALID, ap_sig_ioackin_pos_r_AWREADY)
    begin
        if ((not(((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_0) or (debug_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            debug_BREADY <= ap_const_logic_1;
        else 
            debug_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    debug_WVALID_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1005, ap_reg_ioackin_debug_WREADY, ap_block_pp2_stage0_01001)
    begin
        if (((exitcond4_reg_1005 = ap_const_lv1_0) and (ap_reg_ioackin_debug_WREADY = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_01001))) then 
            debug_WVALID <= ap_const_logic_1;
        else 
            debug_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    debug_blk_n_AW_assign_proc : process(m_axi_debug_AWREADY, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            debug_blk_n_AW <= m_axi_debug_AWREADY;
        else 
            debug_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    debug_blk_n_B_assign_proc : process(m_axi_debug_BVALID, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            debug_blk_n_B <= m_axi_debug_BVALID;
        else 
            debug_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    debug_blk_n_W_assign_proc : process(m_axi_debug_WREADY, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond4_reg_1005)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond4_reg_1005 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            debug_blk_n_W <= m_axi_debug_WREADY;
        else 
            debug_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    exitcond2_fu_510_p2 <= "1" when (indvar3_reg_390 = ap_const_lv4_8) else "0";
    exitcond3_fu_493_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_382_p4 = ap_const_lv19_73AA0) else "0";
    exitcond4_fu_649_p2 <= "1" when (indvar6_reg_401 = ap_const_lv6_24) else "0";
    exitcond5_fu_739_p2 <= "1" when (indvar8_reg_412 = ap_const_lv4_8) else "0";

    grp_fu_423_ce_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state30, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state29, ap_CS_fsm_state32, ap_sig_ioackin_pos_r_AWREADY, ap_sig_ioackin_pos_r_WREADY, ap_block_state30_io, ap_CS_fsm_state26, ap_block_state27_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_sig_ioackin_pos_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_boolean_0 = ap_block_state30_io) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_boolean_0 = ap_block_state27_io) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            grp_fu_423_ce <= ap_const_logic_1;
        else 
            grp_fu_423_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_423_p0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, tmp_9_reg_957, tmp_9_1_reg_967, ap_CS_fsm_state26, tmp_9_2_reg_983, tmp_9_3_reg_994)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_423_p0 <= tmp_9_3_reg_994;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_423_p0 <= tmp_9_2_reg_983;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_423_p0 <= tmp_9_1_reg_967;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_423_p0 <= tmp_9_reg_957;
        else 
            grp_fu_423_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_428_ce_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_sig_ioackin_pos_r_AWREADY, ap_CS_fsm_state26, ap_block_state27_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_sig_ioackin_pos_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_boolean_0 = ap_block_state27_io) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            grp_fu_428_ce <= ap_const_logic_1;
        else 
            grp_fu_428_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_428_p0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, tmp_8_fu_584_p1, tmp_8_1_fu_589_p1, tmp_8_2_fu_594_p1, ap_CS_fsm_state26, tmp_8_3_fu_599_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_428_p0 <= tmp_8_3_fu_599_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_428_p0 <= tmp_8_2_fu_594_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_428_p0 <= tmp_8_1_fu_589_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_428_p0 <= tmp_8_fu_584_p1;
        else 
            grp_fu_428_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    indvar4_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_378_pp0_iter1_reg),64));
    indvar_next2_fu_516_p2 <= std_logic_vector(unsigned(indvar3_reg_390) + unsigned(ap_const_lv4_1));
    indvar_next3_fu_655_p2 <= std_logic_vector(unsigned(indvar6_reg_401) + unsigned(ap_const_lv6_1));
    indvar_next4_fu_745_p2 <= std_logic_vector(unsigned(indvar8_reg_412) + unsigned(ap_const_lv4_1));
    indvar_next_fu_499_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_382_p4) + unsigned(ap_const_lv19_1));
    inv_out7_fu_443_p4 <= inv_out(63 downto 2);
    m_axi_patches_ARADDR <= ap_const_lv64_0;
    m_axi_patches_ARBURST <= ap_const_lv2_0;
    m_axi_patches_ARCACHE <= ap_const_lv4_0;
    m_axi_patches_ARID <= ap_const_lv1_0;
    m_axi_patches_ARLEN <= ap_const_lv8_0;
    m_axi_patches_ARLOCK <= ap_const_lv2_0;
    m_axi_patches_ARPROT <= ap_const_lv3_0;
    m_axi_patches_ARQOS <= ap_const_lv4_0;
    m_axi_patches_ARREGION <= ap_const_lv4_0;
    m_axi_patches_ARSIZE <= ap_const_lv3_0;
    m_axi_patches_ARUSER <= ap_const_lv1_0;
    m_axi_patches_ARVALID <= ap_const_logic_0;
    m_axi_patches_AWADDR <= ap_const_lv64_0;
    m_axi_patches_AWBURST <= ap_const_lv2_0;
    m_axi_patches_AWCACHE <= ap_const_lv4_0;
    m_axi_patches_AWID <= ap_const_lv1_0;
    m_axi_patches_AWLEN <= ap_const_lv8_0;
    m_axi_patches_AWLOCK <= ap_const_lv2_0;
    m_axi_patches_AWPROT <= ap_const_lv3_0;
    m_axi_patches_AWQOS <= ap_const_lv4_0;
    m_axi_patches_AWREGION <= ap_const_lv4_0;
    m_axi_patches_AWSIZE <= ap_const_lv3_0;
    m_axi_patches_AWUSER <= ap_const_lv1_0;
    m_axi_patches_AWVALID <= ap_const_logic_0;
    m_axi_patches_BREADY <= ap_const_logic_0;
    m_axi_patches_RREADY <= ap_const_logic_0;
    m_axi_patches_WDATA <= ap_const_lv32_0;
    m_axi_patches_WID <= ap_const_lv1_0;
    m_axi_patches_WLAST <= ap_const_logic_0;
    m_axi_patches_WSTRB <= ap_const_lv4_0;
    m_axi_patches_WUSER <= ap_const_lv1_0;
    m_axi_patches_WVALID <= ap_const_logic_0;

    pos_r_ARVALID_assign_proc : process(ap_CS_fsm_state12, ap_reg_ioackin_pos_r_ARREADY)
    begin
        if (((ap_reg_ioackin_pos_r_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            pos_r_ARVALID <= ap_const_logic_1;
        else 
            pos_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    pos_r_AWADDR_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state30, ap_CS_fsm_state45, ap_CS_fsm_state28, ap_CS_fsm_state29, debug_BVALID, pos_addr_reg_902, pos_addr_1_reg_977, pos_addr_2_reg_988, pos_addr_3_reg_999, ap_reg_ioackin_pos_r_AWREADY)
    begin
        if (((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            pos_r_AWADDR <= pos_addr_3_reg_999;
        elsif (((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            pos_r_AWADDR <= pos_addr_2_reg_988;
        elsif (((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            pos_r_AWADDR <= pos_addr_1_reg_977;
        elsif ((((debug_BVALID = ap_const_logic_1) and (ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            pos_r_AWADDR <= pos_addr_reg_902;
        else 
            pos_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pos_r_AWLEN_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state30, ap_CS_fsm_state45, ap_CS_fsm_state28, ap_CS_fsm_state29, debug_BVALID, ap_reg_ioackin_pos_r_AWREADY)
    begin
        if (((debug_BVALID = ap_const_logic_1) and (ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            pos_r_AWLEN <= ap_const_lv32_8;
        elsif ((((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            pos_r_AWLEN <= ap_const_lv32_1;
        else 
            pos_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pos_r_AWVALID_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state30, ap_CS_fsm_state45, ap_CS_fsm_state28, ap_CS_fsm_state29, debug_BVALID, ap_reg_ioackin_pos_r_AWREADY)
    begin
        if ((((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((debug_BVALID = ap_const_logic_1) and (ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_reg_ioackin_pos_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            pos_r_AWVALID <= ap_const_logic_1;
        else 
            pos_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    pos_r_BREADY_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state52, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, pos_r_BVALID)
    begin
        if ((((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((pos_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            pos_r_BREADY <= ap_const_logic_1;
        else 
            pos_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    pos_r_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pos_r_RREADY <= ap_const_logic_1;
        else 
            pos_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    pos_r_WDATA_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond5_reg_1019, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, reg_435, UnifiedRetVal_i_reg_1028, ap_reg_ioackin_pos_r_WREADY, ap_block_pp3_stage0_01001)
    begin
        if (((exitcond5_reg_1019 = ap_const_lv1_0) and (ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
            pos_r_WDATA <= UnifiedRetVal_i_reg_1028;
        elsif ((((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            pos_r_WDATA <= reg_435;
        else 
            pos_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pos_r_WVALID_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond5_reg_1019, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_reg_ioackin_pos_r_WREADY, ap_block_pp3_stage0_01001)
    begin
        if ((((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((exitcond5_reg_1019 = ap_const_lv1_0) and (ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001)) or ((ap_reg_ioackin_pos_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            pos_r_WVALID <= ap_const_logic_1;
        else 
            pos_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    pos_r_blk_n_AR_assign_proc : process(m_axi_pos_r_ARREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pos_r_blk_n_AR <= m_axi_pos_r_ARREADY;
        else 
            pos_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    pos_r_blk_n_AW_assign_proc : process(m_axi_pos_r_AWREADY, ap_CS_fsm_state27, ap_CS_fsm_state30, ap_CS_fsm_state45, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            pos_r_blk_n_AW <= m_axi_pos_r_AWREADY;
        else 
            pos_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    pos_r_blk_n_B_assign_proc : process(m_axi_pos_r_BVALID, ap_CS_fsm_state35, ap_CS_fsm_state52, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            pos_r_blk_n_B <= m_axi_pos_r_BVALID;
        else 
            pos_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    pos_r_blk_n_R_assign_proc : process(m_axi_pos_r_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pos_r_blk_n_R <= m_axi_pos_r_RVALID;
        else 
            pos_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    pos_r_blk_n_W_assign_proc : process(m_axi_pos_r_WREADY, ap_CS_fsm_state30, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond5_reg_1019, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond5_reg_1019 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            pos_r_blk_n_W <= m_axi_pos_r_WREADY;
        else 
            pos_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    pyr_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_pyr_ARREADY)
    begin
        if (((ap_reg_ioackin_pyr_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            pyr_ARVALID <= ap_const_logic_1;
        else 
            pyr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    pyr_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_reg_916, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_reg_916 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pyr_RREADY <= ap_const_logic_1;
        else 
            pyr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    pyr_blk_n_AR_assign_proc : process(m_axi_pyr_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pyr_blk_n_AR <= m_axi_pyr_ARREADY;
        else 
            pyr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    pyr_blk_n_R_assign_proc : process(m_axi_pyr_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond3_reg_916)
    begin
        if (((exitcond3_reg_916 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pyr_blk_n_R <= m_axi_pyr_RVALID;
        else 
            pyr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    pyr_data_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_enable_reg_pp0_iter2, indvar4_fu_505_p1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            pyr_data_address0 <= ap_const_lv19_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            pyr_data_address0 <= ap_const_lv19_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            pyr_data_address0 <= ap_const_lv19_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            pyr_data_address0 <= ap_const_lv19_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pyr_data_address0 <= indvar4_fu_505_p1(19 - 1 downto 0);
        else 
            pyr_data_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pyr_data_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_enable_reg_pp0_iter2, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            pyr_data_ce0 <= ap_const_logic_1;
        else 
            pyr_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pyr_data_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond3_reg_916_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_reg_916_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pyr_data_we0 <= ap_const_logic_1;
        else 
            pyr_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp10_i_fu_857_p2 <= "1" when (tmp_4_fu_751_p1 = ap_const_lv3_5) else "0";
    sel_tmp11_i_fu_863_p3 <= 
        cur_px_estimate_2_1 when (sel_tmp10_i_fu_857_p2(0) = '1') else 
        sel_tmp9_i_fu_849_p3;
    sel_tmp12_i_fu_871_p2 <= "1" when (tmp_4_fu_751_p1 = ap_const_lv3_6) else "0";
    sel_tmp1_i_fu_793_p3 <= 
        cur_px_estimate_0_0 when (sel_tmp_i_fu_787_p2(0) = '1') else 
        cur_px_estimate_3_1;
    sel_tmp2_i_fu_801_p2 <= "1" when (tmp_4_fu_751_p1 = ap_const_lv3_1) else "0";
    sel_tmp3_i_fu_807_p3 <= 
        cur_px_estimate_0_1 when (sel_tmp2_i_fu_801_p2(0) = '1') else 
        sel_tmp1_i_fu_793_p3;
    sel_tmp4_i_fu_815_p2 <= "1" when (tmp_4_fu_751_p1 = ap_const_lv3_2) else "0";
    sel_tmp5_i_fu_821_p3 <= 
        cur_px_estimate_1_0 when (sel_tmp4_i_fu_815_p2(0) = '1') else 
        sel_tmp3_i_fu_807_p3;
    sel_tmp6_i_fu_829_p2 <= "1" when (tmp_4_fu_751_p1 = ap_const_lv3_3) else "0";
    sel_tmp7_i_fu_835_p3 <= 
        cur_px_estimate_1_1 when (sel_tmp6_i_fu_829_p2(0) = '1') else 
        sel_tmp5_i_fu_821_p3;
    sel_tmp8_i_fu_843_p2 <= "1" when (tmp_4_fu_751_p1 = ap_const_lv3_4) else "0";
    sel_tmp9_i_fu_849_p3 <= 
        cur_px_estimate_2_0 when (sel_tmp8_i_fu_843_p2(0) = '1') else 
        sel_tmp7_i_fu_835_p3;
    sel_tmp_i_fu_787_p2 <= "1" when (tmp_4_fu_751_p1 = ap_const_lv3_0) else "0";
    tmp_2_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cur_px_estimate_ptr5_fu_463_p4),63));
    tmp_2_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cur_px_estimate_ptr5_fu_463_p4),64));
    tmp_3_fu_532_p1 <= indvar3_reg_390(1 - 1 downto 0);
    tmp_4_fu_751_p1 <= indvar8_reg_412(3 - 1 downto 0);
    tmp_8_1_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_431),32));
    tmp_8_2_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_431),32));
    tmp_8_3_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_431),32));
    tmp_8_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_431),32));
    tmp_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inv_out7_fu_443_p4),64));
    transfer_pyr_read_read_fu_228_p2 <= transfer_pyr;
end behav;
